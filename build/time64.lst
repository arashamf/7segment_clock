ARM GAS  /tmp/cc4CMdmh.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"time64.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_ldivmod
  18              		.section	.text.is_exception_century,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	is_exception_century:
  25              	.LVL0:
  26              	.LFB3:
  27              		.file 1 "timer64/time64.c"
   1:timer64/time64.c **** /* 
   2:timer64/time64.c **** 
   3:timer64/time64.c **** Copyright (c) 2007-2010  Michael G Schwern
   4:timer64/time64.c **** 
   5:timer64/time64.c **** This software originally derived from Paul Sheer's pivotal_gmtime_r.c.
   6:timer64/time64.c **** 
   7:timer64/time64.c **** The MIT License:
   8:timer64/time64.c **** 
   9:timer64/time64.c **** Permission is hereby granted, free of charge, to any person obtaining a copy
  10:timer64/time64.c **** of this software and associated documentation files (the "Software"), to deal
  11:timer64/time64.c **** in the Software without restriction, including without limitation the rights
  12:timer64/time64.c **** to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
  13:timer64/time64.c **** copies of the Software, and to permit persons to whom the Software is
  14:timer64/time64.c **** furnished to do so, subject to the following conditions:
  15:timer64/time64.c **** 
  16:timer64/time64.c **** The above copyright notice and this permission notice shall be included in
  17:timer64/time64.c **** all copies or substantial portions of the Software.
  18:timer64/time64.c **** 
  19:timer64/time64.c **** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
  20:timer64/time64.c **** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
  21:timer64/time64.c **** FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
  22:timer64/time64.c **** AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
  23:timer64/time64.c **** LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
  24:timer64/time64.c **** OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
  25:timer64/time64.c **** THE SOFTWARE.
  26:timer64/time64.c **** 
  27:timer64/time64.c **** */
  28:timer64/time64.c **** 
  29:timer64/time64.c **** /*
  30:timer64/time64.c **** 
  31:timer64/time64.c **** Programmers who have available to them 64-bit time values as a 'long
ARM GAS  /tmp/cc4CMdmh.s 			page 2


  32:timer64/time64.c **** long' type can use localtime64_r() and gmtime64_r() which correctly
  33:timer64/time64.c **** converts the time even on 32-bit systems. Whether you have 64-bit time 
  34:timer64/time64.c **** values will depend on the operating system.
  35:timer64/time64.c **** 
  36:timer64/time64.c **** localtime64_r() is a 64-bit equivalent of localtime_r().
  37:timer64/time64.c **** 
  38:timer64/time64.c **** gmtime64_r() is a 64-bit equivalent of gmtime_r().
  39:timer64/time64.c **** 
  40:timer64/time64.c **** */
  41:timer64/time64.c **** 
  42:timer64/time64.c **** #include <assert.h>
  43:timer64/time64.c **** #include <stdlib.h>
  44:timer64/time64.c **** #include <stdio.h>
  45:timer64/time64.c **** #include <string.h>
  46:timer64/time64.c **** #include <time.h>
  47:timer64/time64.c **** #include <errno.h>
  48:timer64/time64.c **** #include "time64.h"
  49:timer64/time64.c **** #include "time64_limits.h"
  50:timer64/time64.c **** 
  51:timer64/time64.c **** 
  52:timer64/time64.c **** /* Spec says except for stftime() and the _r() functions, these
  53:timer64/time64.c ****    all return static memory.  Stabbings! */
  54:timer64/time64.c **** static struct TM   Static_Return_Date;
  55:timer64/time64.c **** static char        Static_Return_String[35];
  56:timer64/time64.c **** 
  57:timer64/time64.c **** static const char days_in_month[2][12] = {
  58:timer64/time64.c ****     {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  59:timer64/time64.c ****     {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  60:timer64/time64.c **** };
  61:timer64/time64.c **** 
  62:timer64/time64.c **** static const short julian_days_by_month[2][12] = {
  63:timer64/time64.c ****     {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334},
  64:timer64/time64.c ****     {0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335},
  65:timer64/time64.c **** };
  66:timer64/time64.c **** 
  67:timer64/time64.c **** static char wday_name[7][4] = {
  68:timer64/time64.c ****     "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"
  69:timer64/time64.c **** };
  70:timer64/time64.c **** 
  71:timer64/time64.c **** static char mon_name[12][4] = {
  72:timer64/time64.c ****     "Jan", "Feb", "Mar", "Apr", "May", "Jun",
  73:timer64/time64.c ****     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"
  74:timer64/time64.c **** };
  75:timer64/time64.c **** 
  76:timer64/time64.c **** static const short length_of_year[2] = { 365, 366 };
  77:timer64/time64.c **** 
  78:timer64/time64.c **** /* Some numbers relating to the gregorian cycle */
  79:timer64/time64.c **** static const Year     years_in_gregorian_cycle   = 400;
  80:timer64/time64.c **** #define               days_in_gregorian_cycle      ((365 * 400) + 100 - 4 + 1)
  81:timer64/time64.c **** static const Time64_T seconds_in_gregorian_cycle = days_in_gregorian_cycle * 60LL * 60LL * 24LL;
  82:timer64/time64.c **** 
  83:timer64/time64.c **** /* Year range we can trust the time funcitons with */
  84:timer64/time64.c **** #define MAX_SAFE_YEAR 2037
  85:timer64/time64.c **** #define MIN_SAFE_YEAR 1971
  86:timer64/time64.c **** 
  87:timer64/time64.c **** /* 28 year Julian calendar cycle */
  88:timer64/time64.c **** #define SOLAR_CYCLE_LENGTH 28
ARM GAS  /tmp/cc4CMdmh.s 			page 3


  89:timer64/time64.c **** 
  90:timer64/time64.c **** /* Year cycle from MAX_SAFE_YEAR down. */
  91:timer64/time64.c **** static const short safe_years_high[SOLAR_CYCLE_LENGTH] = {
  92:timer64/time64.c ****     2016, 2017, 2018, 2019,
  93:timer64/time64.c ****     2020, 2021, 2022, 2023,
  94:timer64/time64.c ****     2024, 2025, 2026, 2027,
  95:timer64/time64.c ****     2028, 2029, 2030, 2031,
  96:timer64/time64.c ****     2032, 2033, 2034, 2035,
  97:timer64/time64.c ****     2036, 2037, 2010, 2011,
  98:timer64/time64.c ****     2012, 2013, 2014, 2015
  99:timer64/time64.c **** };
 100:timer64/time64.c **** 
 101:timer64/time64.c **** /* Year cycle from MIN_SAFE_YEAR up */
 102:timer64/time64.c **** static const int safe_years_low[SOLAR_CYCLE_LENGTH] = {
 103:timer64/time64.c ****     1996, 1997, 1998, 1971,
 104:timer64/time64.c ****     1972, 1973, 1974, 1975,
 105:timer64/time64.c ****     1976, 1977, 1978, 1979,
 106:timer64/time64.c ****     1980, 1981, 1982, 1983,
 107:timer64/time64.c ****     1984, 1985, 1986, 1987,
 108:timer64/time64.c ****     1988, 1989, 1990, 1991,
 109:timer64/time64.c ****     1992, 1993, 1994, 1995,
 110:timer64/time64.c **** };
 111:timer64/time64.c **** 
 112:timer64/time64.c **** /* This isn't used, but it's handy to look at */
 113:timer64/time64.c **** static const char dow_year_start[SOLAR_CYCLE_LENGTH] = {
 114:timer64/time64.c ****     5, 0, 1, 2,     /* 0       2016 - 2019 */
 115:timer64/time64.c ****     3, 5, 6, 0,     /* 4  */
 116:timer64/time64.c ****     1, 3, 4, 5,     /* 8       1996 - 1998, 1971*/
 117:timer64/time64.c ****     6, 1, 2, 3,     /* 12      1972 - 1975 */
 118:timer64/time64.c ****     4, 6, 0, 1,     /* 16 */
 119:timer64/time64.c ****     2, 4, 5, 6,     /* 20      2036, 2037, 2010, 2011 */
 120:timer64/time64.c ****     0, 2, 3, 4      /* 24      2012, 2013, 2014, 2015 */
 121:timer64/time64.c **** };
 122:timer64/time64.c **** 
 123:timer64/time64.c **** /* Let's assume people are going to be looking for dates in the future.
 124:timer64/time64.c ****    Let's provide some cheats so you can skip ahead.
 125:timer64/time64.c ****    This has a 4x speed boost when near 2008.
 126:timer64/time64.c **** */
 127:timer64/time64.c **** /* Number of days since epoch on Jan 1st, 2008 GMT */
 128:timer64/time64.c **** #define CHEAT_DAYS  (1199145600 / 24 / 60 / 60)
 129:timer64/time64.c **** #define CHEAT_YEARS 108
 130:timer64/time64.c **** 
 131:timer64/time64.c **** #define IS_LEAP(n)      ((!(((n) + 1900) % 400) || (!(((n) + 1900) % 4) && (((n) + 1900) % 100))) !
 132:timer64/time64.c **** #define WRAP(a,b,m)     ((a) = ((a) <  0  ) ? ((b)--, (a) + (m)) : (a))
 133:timer64/time64.c **** 
 134:timer64/time64.c **** #ifdef USE_SYSTEM_LOCALTIME
 135:timer64/time64.c **** #    define SHOULD_USE_SYSTEM_LOCALTIME(a)  (       \
 136:timer64/time64.c ****     (a) <= SYSTEM_LOCALTIME_MAX &&              \
 137:timer64/time64.c ****     (a) >= SYSTEM_LOCALTIME_MIN                 \
 138:timer64/time64.c **** )
 139:timer64/time64.c **** #else
 140:timer64/time64.c **** #    define SHOULD_USE_SYSTEM_LOCALTIME(a)      (0)
 141:timer64/time64.c **** #endif
 142:timer64/time64.c **** 
 143:timer64/time64.c **** #ifdef USE_SYSTEM_GMTIME
 144:timer64/time64.c **** #    define SHOULD_USE_SYSTEM_GMTIME(a)     (       \
 145:timer64/time64.c ****     (a) <= SYSTEM_GMTIME_MAX    &&              \
ARM GAS  /tmp/cc4CMdmh.s 			page 4


 146:timer64/time64.c ****     (a) >= SYSTEM_GMTIME_MIN                    \
 147:timer64/time64.c **** )
 148:timer64/time64.c **** #else
 149:timer64/time64.c **** #    define SHOULD_USE_SYSTEM_GMTIME(a)         (0)
 150:timer64/time64.c **** #endif
 151:timer64/time64.c **** 
 152:timer64/time64.c **** /* Multi varadic macros are a C99 thing, alas */
 153:timer64/time64.c **** #ifdef TIME_64_DEBUG
 154:timer64/time64.c **** #    define TIME64_TRACE(format) (fprintf(stderr, format))
 155:timer64/time64.c **** #    define TIME64_TRACE1(format, var1)    (fprintf(stderr, format, var1))
 156:timer64/time64.c **** #    define TIME64_TRACE2(format, var1, var2)    (fprintf(stderr, format, var1, var2))
 157:timer64/time64.c **** #    define TIME64_TRACE3(format, var1, var2, var3)    (fprintf(stderr, format, var1, var2, var3))
 158:timer64/time64.c **** #else
 159:timer64/time64.c **** #    define TIME64_TRACE(format) ((void)0)
 160:timer64/time64.c **** #    define TIME64_TRACE1(format, var1) ((void)0)
 161:timer64/time64.c **** #    define TIME64_TRACE2(format, var1, var2) ((void)0)
 162:timer64/time64.c **** #    define TIME64_TRACE3(format, var1, var2, var3) ((void)0)
 163:timer64/time64.c **** #endif
 164:timer64/time64.c **** 
 165:timer64/time64.c **** 
 166:timer64/time64.c **** static int is_exception_century(Year year)
 167:timer64/time64.c **** {
  28              		.loc 1 167 1 view -0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		.loc 1 167 1 is_stmt 0 view .LVU1
  33 0000 38B5     		push	{r3, r4, r5, lr}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 16
  36              		.cfi_offset 3, -16
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 14, -4
  40 0002 0546     		mov	r5, r0
  41 0004 0C46     		mov	r4, r1
 168:timer64/time64.c ****     int is_exception = ((year % 100 == 0) && !(year % 400 == 0));
  42              		.loc 1 168 5 is_stmt 1 view .LVU2
  43              		.loc 1 168 31 is_stmt 0 view .LVU3
  44 0006 6422     		movs	r2, #100
  45 0008 0023     		movs	r3, #0
  46 000a FFF7FEFF 		bl	__aeabi_ldivmod
  47              	.LVL1:
  48              		.loc 1 168 43 view .LVU4
  49 000e 1343     		orrs	r3, r3, r2
  50 0010 0AD1     		bne	.L3
  51              		.loc 1 168 53 discriminator 1 view .LVU5
  52 0012 4FF4C872 		mov	r2, #400
  53 0016 0023     		movs	r3, #0
  54 0018 2846     		mov	r0, r5
  55 001a 2146     		mov	r1, r4
  56 001c FFF7FEFF 		bl	__aeabi_ldivmod
  57              	.LVL2:
  58              		.loc 1 168 43 discriminator 1 view .LVU6
  59 0020 1343     		orrs	r3, r3, r2
  60 0022 03D1     		bne	.L4
  61              		.loc 1 168 43 view .LVU7
ARM GAS  /tmp/cc4CMdmh.s 			page 5


  62 0024 0020     		movs	r0, #0
  63 0026 00E0     		b	.L1
  64              	.L3:
  65 0028 0020     		movs	r0, #0
  66              	.L1:
 169:timer64/time64.c ****     TIME64_TRACE1("# is_exception_century: %s\n", is_exception ? "yes" : "no");
 170:timer64/time64.c **** 
 171:timer64/time64.c ****     return(is_exception);
 172:timer64/time64.c **** }
  67              		.loc 1 172 1 view .LVU8
  68 002a 38BD     		pop	{r3, r4, r5, pc}
  69              	.L4:
 168:timer64/time64.c ****     int is_exception = ((year % 100 == 0) && !(year % 400 == 0));
  70              		.loc 1 168 43 view .LVU9
  71 002c 0120     		movs	r0, #1
  72              	.LVL3:
 169:timer64/time64.c ****     TIME64_TRACE1("# is_exception_century: %s\n", is_exception ? "yes" : "no");
  73              		.loc 1 169 5 is_stmt 1 view .LVU10
 171:timer64/time64.c **** }
  74              		.loc 1 171 5 view .LVU11
 171:timer64/time64.c **** }
  75              		.loc 1 171 11 is_stmt 0 view .LVU12
  76 002e FCE7     		b	.L1
  77              		.cfi_endproc
  78              	.LFE3:
  80              		.section	.text.cycle_offset,"ax",%progbits
  81              		.align	1
  82              		.syntax unified
  83              		.thumb
  84              		.thumb_func
  86              	cycle_offset:
  87              	.LVL4:
  88              	.LFB8:
 173:timer64/time64.c **** 
 174:timer64/time64.c **** 
 175:timer64/time64.c **** /* Compare two dates.
 176:timer64/time64.c ****    The result is like cmp.
 177:timer64/time64.c ****    Ignores things like gmtoffset and dst
 178:timer64/time64.c **** */
 179:timer64/time64.c **** int cmp_date( const struct TM* left, const struct tm* right ) {
 180:timer64/time64.c ****     if( left->tm_year > right->tm_year )
 181:timer64/time64.c ****         return 1;
 182:timer64/time64.c ****     else if( left->tm_year < right->tm_year )
 183:timer64/time64.c ****         return -1;
 184:timer64/time64.c **** 
 185:timer64/time64.c ****     if( left->tm_mon > right->tm_mon )
 186:timer64/time64.c ****         return 1;
 187:timer64/time64.c ****     else if( left->tm_mon < right->tm_mon )
 188:timer64/time64.c ****         return -1;
 189:timer64/time64.c **** 
 190:timer64/time64.c ****     if( left->tm_mday > right->tm_mday )
 191:timer64/time64.c ****         return 1;
 192:timer64/time64.c ****     else if( left->tm_mday < right->tm_mday )
 193:timer64/time64.c ****         return -1;
 194:timer64/time64.c **** 
 195:timer64/time64.c ****     if( left->tm_hour > right->tm_hour )
 196:timer64/time64.c ****         return 1;
ARM GAS  /tmp/cc4CMdmh.s 			page 6


 197:timer64/time64.c ****     else if( left->tm_hour < right->tm_hour )
 198:timer64/time64.c ****         return -1;
 199:timer64/time64.c **** 
 200:timer64/time64.c ****     if( left->tm_min > right->tm_min )
 201:timer64/time64.c ****         return 1;
 202:timer64/time64.c ****     else if( left->tm_min < right->tm_min )
 203:timer64/time64.c ****         return -1;
 204:timer64/time64.c **** 
 205:timer64/time64.c ****     if( left->tm_sec > right->tm_sec )
 206:timer64/time64.c ****         return 1;
 207:timer64/time64.c ****     else if( left->tm_sec < right->tm_sec )
 208:timer64/time64.c ****         return -1;
 209:timer64/time64.c **** 
 210:timer64/time64.c ****     return 0;
 211:timer64/time64.c **** }
 212:timer64/time64.c **** 
 213:timer64/time64.c **** 
 214:timer64/time64.c **** /* Check if a date is safely inside a range.
 215:timer64/time64.c ****    The intention is to check if its a few days inside.
 216:timer64/time64.c **** */
 217:timer64/time64.c **** int date_in_safe_range( const struct TM* date, const struct tm* min, const struct tm* max ) {
 218:timer64/time64.c ****     if( cmp_date(date, min) == -1 )
 219:timer64/time64.c ****         return 0;
 220:timer64/time64.c **** 
 221:timer64/time64.c ****     if( cmp_date(date, max) == 1 )
 222:timer64/time64.c ****         return 0;
 223:timer64/time64.c **** 
 224:timer64/time64.c ****     return 1;
 225:timer64/time64.c **** }
 226:timer64/time64.c **** 
 227:timer64/time64.c **** 
 228:timer64/time64.c **** /* timegm() is not in the C or POSIX spec, but it is such a useful
 229:timer64/time64.c ****    extension I would be remiss in leaving it out.  Also I need it
 230:timer64/time64.c ****    for localtime64()
 231:timer64/time64.c **** */
 232:timer64/time64.c **** Time64_T timegm64(const struct TM *date) {
 233:timer64/time64.c ****     Time64_T days    = 0;
 234:timer64/time64.c ****     Time64_T seconds = 0;
 235:timer64/time64.c ****     Year     year;
 236:timer64/time64.c ****     Year     orig_year = (Year)date->tm_year;
 237:timer64/time64.c ****     int      cycles  = 0;
 238:timer64/time64.c **** 
 239:timer64/time64.c ****     if( orig_year > 100 ) {
 240:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 241:timer64/time64.c ****         orig_year -= cycles * 400;
 242:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 243:timer64/time64.c ****     }
 244:timer64/time64.c ****     else if( orig_year < -300 ) {
 245:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 246:timer64/time64.c ****         orig_year -= cycles * 400;
 247:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 248:timer64/time64.c ****     }
 249:timer64/time64.c ****     TIME64_TRACE3("# timegm/ cycles: %d, days: %lld, orig_year: %lld\n", cycles, days, orig_year);
 250:timer64/time64.c **** 
 251:timer64/time64.c ****     if( orig_year > 70 ) {
 252:timer64/time64.c ****         year = 70;
 253:timer64/time64.c ****         while( year < orig_year ) {
ARM GAS  /tmp/cc4CMdmh.s 			page 7


 254:timer64/time64.c ****             days += length_of_year[IS_LEAP(year)];
 255:timer64/time64.c ****             year++;
 256:timer64/time64.c ****         }
 257:timer64/time64.c ****     }
 258:timer64/time64.c ****     else if ( orig_year < 70 ) {
 259:timer64/time64.c ****         year = 69;
 260:timer64/time64.c ****         do {
 261:timer64/time64.c ****             days -= length_of_year[IS_LEAP(year)];
 262:timer64/time64.c ****             year--;
 263:timer64/time64.c ****         } while( year >= orig_year );
 264:timer64/time64.c ****     }
 265:timer64/time64.c **** 
 266:timer64/time64.c ****     days += julian_days_by_month[IS_LEAP(orig_year)][date->tm_mon];
 267:timer64/time64.c ****     days += date->tm_mday - 1;
 268:timer64/time64.c **** 
 269:timer64/time64.c ****     seconds = days * 60 * 60 * 24;
 270:timer64/time64.c **** 
 271:timer64/time64.c ****     seconds += date->tm_hour * 60 * 60;
 272:timer64/time64.c ****     seconds += date->tm_min * 60;
 273:timer64/time64.c ****     seconds += date->tm_sec;
 274:timer64/time64.c **** 
 275:timer64/time64.c ****     return(seconds);
 276:timer64/time64.c **** }
 277:timer64/time64.c **** 
 278:timer64/time64.c **** 
 279:timer64/time64.c **** static int check_tm(struct TM *tm)
 280:timer64/time64.c **** {
 281:timer64/time64.c ****     /* Don't forget leap seconds */
 282:timer64/time64.c ****     assert(tm->tm_sec >= 0);
 283:timer64/time64.c ****     assert(tm->tm_sec <= 61);
 284:timer64/time64.c **** 
 285:timer64/time64.c ****     assert(tm->tm_min >= 0);
 286:timer64/time64.c ****     assert(tm->tm_min <= 59);
 287:timer64/time64.c **** 
 288:timer64/time64.c ****     assert(tm->tm_hour >= 0);
 289:timer64/time64.c ****     assert(tm->tm_hour <= 23);
 290:timer64/time64.c **** 
 291:timer64/time64.c ****     assert(tm->tm_mday >= 1);
 292:timer64/time64.c ****     assert(tm->tm_mday <= days_in_month[IS_LEAP(tm->tm_year)][tm->tm_mon]);
 293:timer64/time64.c **** 
 294:timer64/time64.c ****     assert(tm->tm_mon  >= 0);
 295:timer64/time64.c ****     assert(tm->tm_mon  <= 11);
 296:timer64/time64.c **** 
 297:timer64/time64.c ****     assert(tm->tm_wday >= 0);
 298:timer64/time64.c ****     assert(tm->tm_wday <= 6);
 299:timer64/time64.c ****     
 300:timer64/time64.c ****     assert(tm->tm_yday >= 0);
 301:timer64/time64.c ****     assert(tm->tm_yday <= length_of_year[IS_LEAP(tm->tm_year)]);
 302:timer64/time64.c **** 
 303:timer64/time64.c **** #ifdef HAS_TM_TM_GMTOFF
 304:timer64/time64.c ****     assert(tm->tm_gmtoff >= -24 * 60 * 60);
 305:timer64/time64.c ****     assert(tm->tm_gmtoff <=  24 * 60 * 60);
 306:timer64/time64.c **** #endif
 307:timer64/time64.c **** 
 308:timer64/time64.c ****     return 1;
 309:timer64/time64.c **** }
 310:timer64/time64.c **** 
ARM GAS  /tmp/cc4CMdmh.s 			page 8


 311:timer64/time64.c **** 
 312:timer64/time64.c **** /* The exceptional centuries without leap years cause the cycle to
 313:timer64/time64.c ****    shift by 16
 314:timer64/time64.c **** */
 315:timer64/time64.c **** static Year cycle_offset(Year year)
 316:timer64/time64.c **** {
  89              		.loc 1 316 1 is_stmt 1 view -0
  90              		.cfi_startproc
  91              		@ args = 0, pretend = 0, frame = 0
  92              		@ frame_needed = 0, uses_anonymous_args = 0
  93              		.loc 1 316 1 is_stmt 0 view .LVU14
  94 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  95              	.LCFI1:
  96              		.cfi_def_cfa_offset 24
  97              		.cfi_offset 3, -24
  98              		.cfi_offset 4, -20
  99              		.cfi_offset 5, -16
 100              		.cfi_offset 6, -12
 101              		.cfi_offset 7, -8
 102              		.cfi_offset 14, -4
 317:timer64/time64.c ****     const Year start_year = 2000;
 103              		.loc 1 317 5 is_stmt 1 view .LVU15
 104              	.LVL5:
 318:timer64/time64.c ****     Year year_diff  = year - start_year;
 105              		.loc 1 318 5 view .LVU16
 106              		.loc 1 318 10 is_stmt 0 view .LVU17
 107 0002 B0F5FA66 		subs	r6, r0, #2000
 108 0006 41F1FF37 		adc	r7, r1, #-1
 109              	.LVL6:
 319:timer64/time64.c ****     Year exceptions;
 110              		.loc 1 319 5 is_stmt 1 view .LVU18
 320:timer64/time64.c **** 
 321:timer64/time64.c ****     if( year > start_year )
 111              		.loc 1 321 5 view .LVU19
 112              		.loc 1 321 7 is_stmt 0 view .LVU20
 113 000a 40F2D173 		movw	r3, #2001
 114 000e 9842     		cmp	r0, r3
 115 0010 71F10003 		sbcs	r3, r1, #0
 116 0014 04DB     		blt	.L7
 322:timer64/time64.c ****         year_diff--;
 117              		.loc 1 322 9 is_stmt 1 view .LVU21
 118              		.loc 1 322 18 is_stmt 0 view .LVU22
 119 0016 6FF4FA66 		mvn	r6, #2000
 120              	.LVL7:
 121              		.loc 1 322 18 view .LVU23
 122 001a 8619     		adds	r6, r0, r6
 123 001c 61F10007 		sbc	r7, r1, #0
 124              	.LVL8:
 125              	.L7:
 323:timer64/time64.c **** 
 324:timer64/time64.c ****     exceptions  = year_diff / 100;
 126              		.loc 1 324 5 is_stmt 1 view .LVU24
 127              		.loc 1 324 17 is_stmt 0 view .LVU25
 128 0020 6422     		movs	r2, #100
 129 0022 0023     		movs	r3, #0
 130 0024 3046     		mov	r0, r6
 131              	.LVL9:
ARM GAS  /tmp/cc4CMdmh.s 			page 9


 132              		.loc 1 324 17 view .LVU26
 133 0026 3946     		mov	r1, r7
 134 0028 FFF7FEFF 		bl	__aeabi_ldivmod
 135              	.LVL10:
 136 002c 0D46     		mov	r5, r1
 137 002e 0446     		mov	r4, r0
 138              	.LVL11:
 325:timer64/time64.c ****     exceptions -= year_diff / 400;
 139              		.loc 1 325 5 is_stmt 1 view .LVU27
 140              		.loc 1 325 29 is_stmt 0 view .LVU28
 141 0030 074A     		ldr	r2, .L9
 142 0032 4FF0FF33 		mov	r3, #-1
 143 0036 3046     		mov	r0, r6
 144              	.LVL12:
 145              		.loc 1 325 29 view .LVU29
 146 0038 3946     		mov	r1, r7
 147              	.LVL13:
 148              		.loc 1 325 29 view .LVU30
 149 003a FFF7FEFF 		bl	__aeabi_ldivmod
 150              	.LVL14:
 151              		.loc 1 325 16 view .LVU31
 152 003e 2418     		adds	r4, r4, r0
 153              	.LVL15:
 154              		.loc 1 325 16 view .LVU32
 155 0040 41EB0501 		adc	r1, r1, r5
 156              	.LVL16:
 326:timer64/time64.c **** 
 327:timer64/time64.c ****     TIME64_TRACE3("# year: %lld, exceptions: %lld, year_diff: %lld\n",
 157              		.loc 1 327 5 is_stmt 1 view .LVU33
 328:timer64/time64.c ****           year, exceptions, year_diff);
 329:timer64/time64.c **** 
 330:timer64/time64.c ****     return exceptions * 16;
 158              		.loc 1 330 5 view .LVU34
 159              		.loc 1 330 23 is_stmt 0 view .LVU35
 160 0044 0901     		lsls	r1, r1, #4
 161              	.LVL17:
 331:timer64/time64.c **** }
 162              		.loc 1 331 1 view .LVU36
 163 0046 2001     		lsls	r0, r4, #4
 164 0048 41EA1471 		orr	r1, r1, r4, lsr #28
 165 004c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 166              	.LVL18:
 167              	.L10:
 168              		.loc 1 331 1 view .LVU37
 169 004e 00BF     		.align	2
 170              	.L9:
 171 0050 70FEFFFF 		.word	-400
 172              		.cfi_endproc
 173              	.LFE8:
 175              		.section	.text.seconds_between_years,"ax",%progbits
 176              		.align	1
 177              		.syntax unified
 178              		.thumb
 179              		.thumb_func
 181              	seconds_between_years:
 182              	.LVL19:
 183              	.LFB14:
ARM GAS  /tmp/cc4CMdmh.s 			page 10


 332:timer64/time64.c **** 
 333:timer64/time64.c **** /* For a given year after 2038, pick the latest possible matching
 334:timer64/time64.c ****    year in the 28 year calendar cycle.
 335:timer64/time64.c **** 
 336:timer64/time64.c ****    A matching year...
 337:timer64/time64.c ****    1) Starts on the same day of the week.
 338:timer64/time64.c ****    2) Has the same leap year status.
 339:timer64/time64.c **** 
 340:timer64/time64.c ****    This is so the calendars match up.
 341:timer64/time64.c **** 
 342:timer64/time64.c ****    Also the previous year must match.  When doing Jan 1st you might
 343:timer64/time64.c ****    wind up on Dec 31st the previous year when doing a -UTC time zone.
 344:timer64/time64.c **** 
 345:timer64/time64.c ****    Finally, the next year must have the same start day of week.  This
 346:timer64/time64.c ****    is for Dec 31st with a +UTC time zone.
 347:timer64/time64.c ****    It doesn't need the same leap year status since we only care about
 348:timer64/time64.c ****    January 1st.
 349:timer64/time64.c **** */
 350:timer64/time64.c **** static int safe_year(const Year year)
 351:timer64/time64.c **** {
 352:timer64/time64.c ****     int safe_year;
 353:timer64/time64.c ****     Year year_cycle;
 354:timer64/time64.c **** 
 355:timer64/time64.c ****     if( year >= MIN_SAFE_YEAR && year <= MAX_SAFE_YEAR ) {
 356:timer64/time64.c ****         return (int)year;
 357:timer64/time64.c ****     }
 358:timer64/time64.c **** 
 359:timer64/time64.c ****     year_cycle = year + cycle_offset(year);
 360:timer64/time64.c **** 
 361:timer64/time64.c ****     /* safe_years_low is off from safe_years_high by 8 years */
 362:timer64/time64.c ****     if( year < MIN_SAFE_YEAR )
 363:timer64/time64.c ****         year_cycle -= 8;
 364:timer64/time64.c **** 
 365:timer64/time64.c ****     /* Change non-leap xx00 years to an equivalent */
 366:timer64/time64.c ****     if( is_exception_century(year) )
 367:timer64/time64.c ****         year_cycle += 11;
 368:timer64/time64.c **** 
 369:timer64/time64.c ****     /* Also xx01 years, since the previous year will be wrong */
 370:timer64/time64.c ****     if( is_exception_century(year - 1) )
 371:timer64/time64.c ****         year_cycle += 17;
 372:timer64/time64.c **** 
 373:timer64/time64.c ****     year_cycle %= SOLAR_CYCLE_LENGTH;
 374:timer64/time64.c ****     if( year_cycle < 0 ) 
 375:timer64/time64.c ****         year_cycle = SOLAR_CYCLE_LENGTH + year_cycle;
 376:timer64/time64.c **** 
 377:timer64/time64.c ****     assert( year_cycle >= 0 );
 378:timer64/time64.c ****     assert( year_cycle < SOLAR_CYCLE_LENGTH );
 379:timer64/time64.c ****     if( year < MIN_SAFE_YEAR )
 380:timer64/time64.c ****         safe_year = safe_years_low[year_cycle];
 381:timer64/time64.c ****     else if( year > MAX_SAFE_YEAR )
 382:timer64/time64.c ****         safe_year = safe_years_high[year_cycle];
 383:timer64/time64.c ****     else
 384:timer64/time64.c ****         assert(0);
 385:timer64/time64.c **** 
 386:timer64/time64.c ****     TIME64_TRACE3("# year: %lld, year_cycle: %lld, safe_year: %d\n",
 387:timer64/time64.c ****           year, year_cycle, safe_year);
 388:timer64/time64.c **** 
ARM GAS  /tmp/cc4CMdmh.s 			page 11


 389:timer64/time64.c ****     assert(safe_year <= MAX_SAFE_YEAR && safe_year >= MIN_SAFE_YEAR);
 390:timer64/time64.c **** 
 391:timer64/time64.c ****     return safe_year;
 392:timer64/time64.c **** }
 393:timer64/time64.c **** 
 394:timer64/time64.c **** 
 395:timer64/time64.c **** void copy_tm_to_TM64(const struct tm *src, struct TM *dest) {
 396:timer64/time64.c ****     if( src == NULL ) {
 397:timer64/time64.c ****         memset(dest, 0, sizeof(*dest));
 398:timer64/time64.c ****     }
 399:timer64/time64.c ****     else {
 400:timer64/time64.c **** #       ifdef USE_TM64
 401:timer64/time64.c ****             dest->tm_sec        = src->tm_sec;
 402:timer64/time64.c ****             dest->tm_min        = src->tm_min;
 403:timer64/time64.c ****             dest->tm_hour       = src->tm_hour;
 404:timer64/time64.c ****             dest->tm_mday       = src->tm_mday;
 405:timer64/time64.c ****             dest->tm_mon        = src->tm_mon;
 406:timer64/time64.c ****             dest->tm_year       = (Year)src->tm_year;
 407:timer64/time64.c ****             dest->tm_wday       = src->tm_wday;
 408:timer64/time64.c ****             dest->tm_yday       = src->tm_yday;
 409:timer64/time64.c ****             dest->tm_isdst      = src->tm_isdst;
 410:timer64/time64.c **** 
 411:timer64/time64.c **** #           ifdef HAS_TM_TM_GMTOFF
 412:timer64/time64.c ****                 dest->tm_gmtoff  = src->tm_gmtoff;
 413:timer64/time64.c **** #           endif
 414:timer64/time64.c **** 
 415:timer64/time64.c **** #           ifdef HAS_TM_TM_ZONE
 416:timer64/time64.c ****                 dest->tm_zone  = src->tm_zone;
 417:timer64/time64.c **** #           endif
 418:timer64/time64.c **** 
 419:timer64/time64.c **** #       else
 420:timer64/time64.c ****             /* They're the same type */
 421:timer64/time64.c ****             memcpy(dest, src, sizeof(*dest));
 422:timer64/time64.c **** #       endif
 423:timer64/time64.c ****     }
 424:timer64/time64.c **** }
 425:timer64/time64.c **** 
 426:timer64/time64.c **** 
 427:timer64/time64.c **** void copy_TM64_to_tm(const struct TM *src, struct tm *dest) {
 428:timer64/time64.c ****     if( src == NULL ) {
 429:timer64/time64.c ****         memset(dest, 0, sizeof(*dest));
 430:timer64/time64.c ****     }
 431:timer64/time64.c ****     else {
 432:timer64/time64.c **** #       ifdef USE_TM64
 433:timer64/time64.c ****             dest->tm_sec        = src->tm_sec;
 434:timer64/time64.c ****             dest->tm_min        = src->tm_min;
 435:timer64/time64.c ****             dest->tm_hour       = src->tm_hour;
 436:timer64/time64.c ****             dest->tm_mday       = src->tm_mday;
 437:timer64/time64.c ****             dest->tm_mon        = src->tm_mon;
 438:timer64/time64.c ****             dest->tm_year       = (int)src->tm_year;
 439:timer64/time64.c ****             dest->tm_wday       = src->tm_wday;
 440:timer64/time64.c ****             dest->tm_yday       = src->tm_yday;
 441:timer64/time64.c ****             dest->tm_isdst      = src->tm_isdst;
 442:timer64/time64.c **** 
 443:timer64/time64.c **** #           ifdef HAS_TM_TM_GMTOFF
 444:timer64/time64.c ****                 dest->tm_gmtoff  = src->tm_gmtoff;
 445:timer64/time64.c **** #           endif
ARM GAS  /tmp/cc4CMdmh.s 			page 12


 446:timer64/time64.c **** 
 447:timer64/time64.c **** #           ifdef HAS_TM_TM_ZONE
 448:timer64/time64.c ****                 dest->tm_zone  = src->tm_zone;
 449:timer64/time64.c **** #           endif
 450:timer64/time64.c **** 
 451:timer64/time64.c **** #       else
 452:timer64/time64.c ****             /* They're the same type */
 453:timer64/time64.c ****             memcpy(dest, src, sizeof(*dest));
 454:timer64/time64.c **** #       endif
 455:timer64/time64.c ****     }
 456:timer64/time64.c **** }
 457:timer64/time64.c **** 
 458:timer64/time64.c **** 
 459:timer64/time64.c **** /* Simulate localtime_r() to the best of our ability */
 460:timer64/time64.c **** struct tm * fake_localtime_r(const time_t *time, struct tm *result) {
 461:timer64/time64.c ****     const struct tm *static_result = localtime(time);
 462:timer64/time64.c **** 
 463:timer64/time64.c ****     assert(result != NULL);
 464:timer64/time64.c **** 
 465:timer64/time64.c ****     if( static_result == NULL ) {
 466:timer64/time64.c ****         memset(result, 0, sizeof(*result));
 467:timer64/time64.c ****         return NULL;
 468:timer64/time64.c ****     }
 469:timer64/time64.c ****     else {
 470:timer64/time64.c ****         memcpy(result, static_result, sizeof(*result));
 471:timer64/time64.c ****         return result;
 472:timer64/time64.c ****     }
 473:timer64/time64.c **** }
 474:timer64/time64.c **** 
 475:timer64/time64.c **** 
 476:timer64/time64.c **** /* Simulate gmtime_r() to the best of our ability */
 477:timer64/time64.c **** struct tm * fake_gmtime_r(const time_t *time, struct tm *result) {
 478:timer64/time64.c ****     const struct tm *static_result = gmtime(time);
 479:timer64/time64.c **** 
 480:timer64/time64.c ****     assert(result != NULL);
 481:timer64/time64.c **** 
 482:timer64/time64.c ****     if( static_result == NULL ) {
 483:timer64/time64.c ****         memset(result, 0, sizeof(*result));
 484:timer64/time64.c ****         return NULL;
 485:timer64/time64.c ****     }
 486:timer64/time64.c ****     else {
 487:timer64/time64.c ****         memcpy(result, static_result, sizeof(*result));
 488:timer64/time64.c ****         return result;
 489:timer64/time64.c ****     }
 490:timer64/time64.c **** }
 491:timer64/time64.c **** 
 492:timer64/time64.c **** 
 493:timer64/time64.c **** static Time64_T seconds_between_years(Year left_year, Year right_year) {
 184              		.loc 1 493 72 is_stmt 1 view -0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		.loc 1 493 72 is_stmt 0 view .LVU39
 189 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 32
 192              		.cfi_offset 4, -32
ARM GAS  /tmp/cc4CMdmh.s 			page 13


 193              		.cfi_offset 5, -28
 194              		.cfi_offset 6, -24
 195              		.cfi_offset 7, -20
 196              		.cfi_offset 8, -16
 197              		.cfi_offset 9, -12
 198              		.cfi_offset 10, -8
 199              		.cfi_offset 14, -4
 200 0004 8146     		mov	r9, r0
 201 0006 8A46     		mov	r10, r1
 202 0008 1446     		mov	r4, r2
 203 000a 1E46     		mov	r6, r3
 494:timer64/time64.c ****     int increment = (left_year > right_year) ? 1 : -1;
 204              		.loc 1 494 5 is_stmt 1 view .LVU40
 205              		.loc 1 494 50 is_stmt 0 view .LVU41
 206 000c 8242     		cmp	r2, r0
 207 000e 76EB0103 		sbcs	r3, r6, r1
 208 0012 22DA     		bge	.L18
 209 0014 0127     		movs	r7, #1
 210              	.L12:
 211              	.LVL20:
 495:timer64/time64.c ****     Time64_T seconds = 0;
 212              		.loc 1 495 5 is_stmt 1 discriminator 4 view .LVU42
 496:timer64/time64.c ****     int cycles;
 213              		.loc 1 496 5 discriminator 4 view .LVU43
 497:timer64/time64.c **** 
 498:timer64/time64.c ****     if( left_year > 2400 ) {
 214              		.loc 1 498 5 discriminator 4 view .LVU44
 215              		.loc 1 498 7 is_stmt 0 discriminator 4 view .LVU45
 216 0016 40F66113 		movw	r3, #2401
 217 001a 9945     		cmp	r9, r3
 218 001c 7AF10003 		sbcs	r3, r10, #0
 219 0020 1EDB     		blt	.L13
 499:timer64/time64.c ****         cycles = (left_year - 2400) / 400;
 220              		.loc 1 499 9 is_stmt 1 view .LVU46
 221              		.loc 1 499 29 is_stmt 0 view .LVU47
 222 0022 B9F51660 		subs	r0, r9, #2400
 223              	.LVL21:
 224              		.loc 1 499 37 view .LVU48
 225 0026 4FF4C872 		mov	r2, #400
 226              	.LVL22:
 227              		.loc 1 499 37 view .LVU49
 228 002a 4FF00003 		mov	r3, #0
 229 002e 4AF1FF31 		adc	r1, r10, #-1
 230 0032 FFF7FEFF 		bl	__aeabi_ldivmod
 231              	.LVL23:
 232 0036 0546     		mov	r5, r0
 233              	.LVL24:
 500:timer64/time64.c ****         left_year -= cycles * 400;
 234              		.loc 1 500 9 is_stmt 1 view .LVU50
 235              		.loc 1 500 29 is_stmt 0 view .LVU51
 236 0038 4FF4C873 		mov	r3, #400
 237 003c 00FB03F3 		mul	r3, r0, r3
 238              		.loc 1 500 19 view .LVU52
 239 0040 B9EB0309 		subs	r9, r9, r3
 240 0044 6AEBE37A 		sbc	r10, r10, r3, asr #31
 241              	.LVL25:
 501:timer64/time64.c ****         seconds   += cycles * seconds_in_gregorian_cycle;
ARM GAS  /tmp/cc4CMdmh.s 			page 14


 242              		.loc 1 501 9 is_stmt 1 view .LVU53
 243              		.loc 1 501 29 is_stmt 0 view .LVU54
 244 0048 C317     		asrs	r3, r0, #31
 245 004a 324A     		ldr	r2, .L25
 246 004c 4000     		lsls	r0, r0, #1
 247              	.LVL26:
 248              		.loc 1 501 29 view .LVU55
 249 004e 02FB0303 		mla	r3, r2, r3, r0
 250 0052 A5FB0258 		umull	r5, r8, r5, r2
 251              	.LVL27:
 252              		.loc 1 501 29 view .LVU56
 253 0056 9844     		add	r8, r8, r3
 254              	.LVL28:
 255              		.loc 1 501 29 view .LVU57
 256 0058 30E0     		b	.L16
 257              	.LVL29:
 258              	.L18:
 494:timer64/time64.c ****     Time64_T seconds = 0;
 259              		.loc 1 494 50 view .LVU58
 260 005a 4FF0FF37 		mov	r7, #-1
 261 005e DAE7     		b	.L12
 262              	.LVL30:
 263              	.L13:
 502:timer64/time64.c ****     }
 503:timer64/time64.c ****     else if( left_year < 1600 ) {
 264              		.loc 1 503 10 is_stmt 1 view .LVU59
 265              		.loc 1 503 12 is_stmt 0 view .LVU60
 266 0060 B9F5C86F 		cmp	r9, #1600
 267 0064 7AF10003 		sbcs	r3, r10, #0
 268 0068 46DA     		bge	.L19
 504:timer64/time64.c ****         cycles = (left_year - 1600) / 400;
 269              		.loc 1 504 9 is_stmt 1 view .LVU61
 270              		.loc 1 504 29 is_stmt 0 view .LVU62
 271 006a B9F5C860 		subs	r0, r9, #1600
 272              	.LVL31:
 273              		.loc 1 504 37 view .LVU63
 274 006e 4FF4C872 		mov	r2, #400
 275              	.LVL32:
 276              		.loc 1 504 37 view .LVU64
 277 0072 4FF00003 		mov	r3, #0
 278 0076 4AF1FF31 		adc	r1, r10, #-1
 279 007a FFF7FEFF 		bl	__aeabi_ldivmod
 280              	.LVL33:
 281 007e 0546     		mov	r5, r0
 282              	.LVL34:
 505:timer64/time64.c ****         left_year += cycles * 400;
 283              		.loc 1 505 9 is_stmt 1 view .LVU65
 284              		.loc 1 505 29 is_stmt 0 view .LVU66
 285 0080 4FF4C873 		mov	r3, #400
 286 0084 00FB03F3 		mul	r3, r0, r3
 287              		.loc 1 505 19 view .LVU67
 288 0088 13EB0909 		adds	r9, r3, r9
 289 008c 4AEBE37A 		adc	r10, r10, r3, asr #31
 290              	.LVL35:
 506:timer64/time64.c ****         seconds   += cycles * seconds_in_gregorian_cycle;
 291              		.loc 1 506 9 is_stmt 1 view .LVU68
 292              		.loc 1 506 29 is_stmt 0 view .LVU69
ARM GAS  /tmp/cc4CMdmh.s 			page 15


 293 0090 C317     		asrs	r3, r0, #31
 294 0092 204A     		ldr	r2, .L25
 295 0094 4000     		lsls	r0, r0, #1
 296              	.LVL36:
 297              		.loc 1 506 29 view .LVU70
 298 0096 02FB0303 		mla	r3, r2, r3, r0
 299 009a A5FB0258 		umull	r5, r8, r5, r2
 300              	.LVL37:
 301              		.loc 1 506 29 view .LVU71
 302 009e 9844     		add	r8, r8, r3
 303              	.LVL38:
 304              		.loc 1 506 29 view .LVU72
 305 00a0 0CE0     		b	.L16
 306              	.LVL39:
 307              	.L20:
 507:timer64/time64.c ****     }
 508:timer64/time64.c **** 
 509:timer64/time64.c ****     while( left_year != right_year ) {
 510:timer64/time64.c ****         seconds += length_of_year[IS_LEAP(right_year - 1900)] * 60 * 60 * 24;
 308              		.loc 1 510 35 view .LVU73
 309 00a2 0122     		movs	r2, #1
 310              	.L15:
 311              		.loc 1 510 34 discriminator 8 view .LVU74
 312 00a4 1C4B     		ldr	r3, .L25+4
 313 00a6 33F91220 		ldrsh	r2, [r3, r2, lsl #1]
 314              		.loc 1 510 73 discriminator 8 view .LVU75
 315 00aa 1C4B     		ldr	r3, .L25+8
 316 00ac 03FB02F2 		mul	r2, r3, r2
 317              		.loc 1 510 17 discriminator 8 view .LVU76
 318 00b0 5519     		adds	r5, r2, r5
 319              	.LVL40:
 320              		.loc 1 510 17 discriminator 8 view .LVU77
 321 00b2 48EBE278 		adc	r8, r8, r2, asr #31
 322              	.LVL41:
 511:timer64/time64.c ****         right_year += increment;
 323              		.loc 1 511 9 is_stmt 1 discriminator 8 view .LVU78
 324              		.loc 1 511 20 is_stmt 0 discriminator 8 view .LVU79
 325 00b6 3C19     		adds	r4, r7, r4
 326              	.LVL42:
 327              		.loc 1 511 20 discriminator 8 view .LVU80
 328 00b8 46EBE776 		adc	r6, r6, r7, asr #31
 329              	.LVL43:
 330              	.L16:
 509:timer64/time64.c ****         seconds += length_of_year[IS_LEAP(right_year - 1900)] * 60 * 60 * 24;
 331              		.loc 1 509 10 is_stmt 1 view .LVU81
 332 00bc 5645     		cmp	r6, r10
 333 00be 08BF     		it	eq
 334 00c0 4C45     		cmpeq	r4, r9
 335 00c2 1CD0     		beq	.L24
 510:timer64/time64.c ****         right_year += increment;
 336              		.loc 1 510 9 view .LVU82
 510:timer64/time64.c ****         right_year += increment;
 337              		.loc 1 510 35 is_stmt 0 view .LVU83
 338 00c4 4FF4C872 		mov	r2, #400
 339 00c8 0023     		movs	r3, #0
 340 00ca 2046     		mov	r0, r4
 341 00cc 3146     		mov	r1, r6
ARM GAS  /tmp/cc4CMdmh.s 			page 16


 342 00ce FFF7FEFF 		bl	__aeabi_ldivmod
 343              	.LVL44:
 344 00d2 1343     		orrs	r3, r3, r2
 345 00d4 E5D0     		beq	.L20
 510:timer64/time64.c ****         right_year += increment;
 346              		.loc 1 510 35 discriminator 2 view .LVU84
 347 00d6 14F0030F 		tst	r4, #3
 348 00da 09D1     		bne	.L21
 510:timer64/time64.c ****         right_year += increment;
 349              		.loc 1 510 35 discriminator 3 view .LVU85
 350 00dc 6422     		movs	r2, #100
 351 00de 0023     		movs	r3, #0
 352 00e0 2046     		mov	r0, r4
 353 00e2 3146     		mov	r1, r6
 354 00e4 FFF7FEFF 		bl	__aeabi_ldivmod
 355              	.LVL45:
 356 00e8 1343     		orrs	r3, r3, r2
 357 00ea 03D1     		bne	.L22
 510:timer64/time64.c ****         right_year += increment;
 358              		.loc 1 510 35 view .LVU86
 359 00ec 0022     		movs	r2, #0
 360 00ee D9E7     		b	.L15
 361              	.L21:
 362 00f0 0022     		movs	r2, #0
 363 00f2 D7E7     		b	.L15
 364              	.L22:
 365 00f4 0122     		movs	r2, #1
 366 00f6 D5E7     		b	.L15
 367              	.LVL46:
 368              	.L19:
 495:timer64/time64.c ****     int cycles;
 369              		.loc 1 495 14 view .LVU87
 370 00f8 0025     		movs	r5, #0
 371 00fa A846     		mov	r8, r5
 372 00fc DEE7     		b	.L16
 373              	.LVL47:
 374              	.L24:
 512:timer64/time64.c ****     }
 513:timer64/time64.c **** 
 514:timer64/time64.c ****     return seconds * increment;
 375              		.loc 1 514 5 is_stmt 1 view .LVU88
 376              		.loc 1 514 20 is_stmt 0 view .LVU89
 377 00fe F917     		asrs	r1, r7, #31
 378 0100 07FB08F8 		mul	r8, r7, r8
 379              	.LVL48:
 380              		.loc 1 514 20 view .LVU90
 381 0104 05FB0181 		mla	r1, r5, r1, r8
 382 0108 A7FB0505 		umull	r0, r5, r7, r5
 515:timer64/time64.c **** }
 383              		.loc 1 515 1 view .LVU91
 384 010c 2944     		add	r1, r1, r5
 385 010e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 386              	.LVL49:
 387              	.L26:
 388              		.loc 1 515 1 view .LVU92
 389 0112 00BF     		.align	2
 390              	.L25:
ARM GAS  /tmp/cc4CMdmh.s 			page 17


 391 0114 805960F0 		.word	-262121088
 392 0118 00000000 		.word	.LANCHOR0
 393 011c 80510100 		.word	86400
 394              		.cfi_endproc
 395              	.LFE14:
 397              		.section	.rodata.safe_year.str1.4,"aMS",%progbits,1
 398              		.align	2
 399              	.LC0:
 400 0000 79656172 		.ascii	"year_cycle >= 0\000"
 400      5F637963 
 400      6C65203E 
 400      3D203000 
 401              		.align	2
 402              	.LC1:
 403 0010 74696D65 		.ascii	"timer64/time64.c\000"
 403      7236342F 
 403      74696D65 
 403      36342E63 
 403      00
 404 0021 000000   		.align	2
 405              	.LC2:
 406 0024 79656172 		.ascii	"year_cycle < SOLAR_CYCLE_LENGTH\000"
 406      5F637963 
 406      6C65203C 
 406      20534F4C 
 406      41525F43 
 407              		.align	2
 408              	.LC3:
 409 0044 3000     		.ascii	"0\000"
 410 0046 0000     		.align	2
 411              	.LC4:
 412 0048 73616665 		.ascii	"safe_year <= MAX_SAFE_YEAR && safe_year >= MIN_SAFE"
 412      5F796561 
 412      72203C3D 
 412      204D4158 
 412      5F534146 
 413 007b 5F594541 		.ascii	"_YEAR\000"
 413      5200
 414              		.section	.text.safe_year,"ax",%progbits
 415              		.align	1
 416              		.syntax unified
 417              		.thumb
 418              		.thumb_func
 420              	safe_year:
 421              	.LVL50:
 422              	.LFB9:
 351:timer64/time64.c ****     int safe_year;
 423              		.loc 1 351 1 is_stmt 1 view -0
 424              		.cfi_startproc
 425              		@ args = 0, pretend = 0, frame = 0
 426              		@ frame_needed = 0, uses_anonymous_args = 0
 351:timer64/time64.c ****     int safe_year;
 427              		.loc 1 351 1 is_stmt 0 view .LVU94
 428 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 429              	.LCFI3:
 430              		.cfi_def_cfa_offset 24
 431              		.cfi_offset 3, -24
ARM GAS  /tmp/cc4CMdmh.s 			page 18


 432              		.cfi_offset 4, -20
 433              		.cfi_offset 5, -16
 434              		.cfi_offset 6, -12
 435              		.cfi_offset 7, -8
 436              		.cfi_offset 14, -4
 437 0002 0446     		mov	r4, r0
 352:timer64/time64.c ****     Year year_cycle;
 438              		.loc 1 352 5 is_stmt 1 view .LVU95
 353:timer64/time64.c **** 
 439              		.loc 1 353 5 view .LVU96
 355:timer64/time64.c ****         return (int)year;
 440              		.loc 1 355 5 view .LVU97
 355:timer64/time64.c ****         return (int)year;
 441              		.loc 1 355 31 is_stmt 0 view .LVU98
 442 0004 374B     		ldr	r3, .L44
 443 0006 C318     		adds	r3, r0, r3
 444 0008 61F10002 		sbc	r2, r1, #0
 355:timer64/time64.c ****         return (int)year;
 445              		.loc 1 355 7 view .LVU99
 446 000c 432B     		cmp	r3, #67
 447 000e 72F10003 		sbcs	r3, r2, #0
 448 0012 3BD3     		bcc	.L27
 449 0014 0E46     		mov	r6, r1
 359:timer64/time64.c **** 
 450              		.loc 1 359 5 is_stmt 1 view .LVU100
 359:timer64/time64.c **** 
 451              		.loc 1 359 25 is_stmt 0 view .LVU101
 452 0016 FFF7FEFF 		bl	cycle_offset
 453              	.LVL51:
 359:timer64/time64.c **** 
 454              		.loc 1 359 16 view .LVU102
 455 001a 0519     		adds	r5, r0, r4
 456 001c 46EB0107 		adc	r7, r6, r1
 457              	.LVL52:
 362:timer64/time64.c ****         year_cycle -= 8;
 458              		.loc 1 362 5 is_stmt 1 view .LVU103
 362:timer64/time64.c ****         year_cycle -= 8;
 459              		.loc 1 362 7 is_stmt 0 view .LVU104
 460 0020 40F2B373 		movw	r3, #1971
 461 0024 9C42     		cmp	r4, r3
 462 0026 76F10003 		sbcs	r3, r6, #0
 463 002a 02DA     		bge	.L30
 363:timer64/time64.c **** 
 464              		.loc 1 363 9 is_stmt 1 view .LVU105
 363:timer64/time64.c **** 
 465              		.loc 1 363 20 is_stmt 0 view .LVU106
 466 002c 083D     		subs	r5, r5, #8
 467              	.LVL53:
 363:timer64/time64.c **** 
 468              		.loc 1 363 20 view .LVU107
 469 002e 47F1FF37 		adc	r7, r7, #-1
 470              	.LVL54:
 471              	.L30:
 366:timer64/time64.c ****         year_cycle += 11;
 472              		.loc 1 366 5 is_stmt 1 view .LVU108
 366:timer64/time64.c ****         year_cycle += 11;
 473              		.loc 1 366 9 is_stmt 0 view .LVU109
ARM GAS  /tmp/cc4CMdmh.s 			page 19


 474 0032 2046     		mov	r0, r4
 475 0034 3146     		mov	r1, r6
 476 0036 FFF7FEFF 		bl	is_exception_century
 477              	.LVL55:
 366:timer64/time64.c ****         year_cycle += 11;
 478              		.loc 1 366 7 view .LVU110
 479 003a 10B1     		cbz	r0, .L31
 367:timer64/time64.c **** 
 480              		.loc 1 367 9 is_stmt 1 view .LVU111
 367:timer64/time64.c **** 
 481              		.loc 1 367 20 is_stmt 0 view .LVU112
 482 003c 0B35     		adds	r5, r5, #11
 483              	.LVL56:
 367:timer64/time64.c **** 
 484              		.loc 1 367 20 view .LVU113
 485 003e 47F10007 		adc	r7, r7, #0
 486              	.LVL57:
 487              	.L31:
 370:timer64/time64.c ****         year_cycle += 17;
 488              		.loc 1 370 5 is_stmt 1 view .LVU114
 370:timer64/time64.c ****         year_cycle += 17;
 489              		.loc 1 370 9 is_stmt 0 view .LVU115
 490 0042 601E     		subs	r0, r4, #1
 491 0044 46F1FF31 		adc	r1, r6, #-1
 492 0048 FFF7FEFF 		bl	is_exception_century
 493              	.LVL58:
 370:timer64/time64.c ****         year_cycle += 17;
 494              		.loc 1 370 7 view .LVU116
 495 004c 10B1     		cbz	r0, .L32
 371:timer64/time64.c **** 
 496              		.loc 1 371 9 is_stmt 1 view .LVU117
 371:timer64/time64.c **** 
 497              		.loc 1 371 20 is_stmt 0 view .LVU118
 498 004e 1135     		adds	r5, r5, #17
 499              	.LVL59:
 371:timer64/time64.c **** 
 500              		.loc 1 371 20 view .LVU119
 501 0050 47F10007 		adc	r7, r7, #0
 502              	.LVL60:
 503              	.L32:
 373:timer64/time64.c ****     if( year_cycle < 0 ) 
 504              		.loc 1 373 5 is_stmt 1 view .LVU120
 373:timer64/time64.c ****     if( year_cycle < 0 ) 
 505              		.loc 1 373 16 is_stmt 0 view .LVU121
 506 0054 1C22     		movs	r2, #28
 507 0056 0023     		movs	r3, #0
 508 0058 2846     		mov	r0, r5
 509 005a 3946     		mov	r1, r7
 510 005c FFF7FEFF 		bl	__aeabi_ldivmod
 511              	.LVL61:
 512 0060 1946     		mov	r1, r3
 513              	.LVL62:
 374:timer64/time64.c ****         year_cycle = SOLAR_CYCLE_LENGTH + year_cycle;
 514              		.loc 1 374 5 is_stmt 1 view .LVU122
 374:timer64/time64.c ****         year_cycle = SOLAR_CYCLE_LENGTH + year_cycle;
 515              		.loc 1 374 7 is_stmt 0 view .LVU123
 516 0062 002B     		cmp	r3, #0
ARM GAS  /tmp/cc4CMdmh.s 			page 20


 517 0064 13DB     		blt	.L40
 518              	.LVL63:
 519              	.L33:
 377:timer64/time64.c ****     assert( year_cycle < SOLAR_CYCLE_LENGTH );
 520              		.loc 1 377 5 is_stmt 1 view .LVU124
 521 0066 0029     		cmp	r1, #0
 522 0068 15DB     		blt	.L41
 378:timer64/time64.c ****     if( year < MIN_SAFE_YEAR )
 523              		.loc 1 378 5 view .LVU125
 524 006a 1C2A     		cmp	r2, #28
 525 006c 71F10003 		sbcs	r3, r1, #0
 526 0070 18DA     		bge	.L42
 379:timer64/time64.c ****         safe_year = safe_years_low[year_cycle];
 527              		.loc 1 379 5 view .LVU126
 379:timer64/time64.c ****         safe_year = safe_years_low[year_cycle];
 528              		.loc 1 379 7 is_stmt 0 view .LVU127
 529 0072 40F2B373 		movw	r3, #1971
 530 0076 9C42     		cmp	r4, r3
 531 0078 76F10003 		sbcs	r3, r6, #0
 532 007c 19DA     		bge	.L36
 380:timer64/time64.c ****     else if( year > MAX_SAFE_YEAR )
 533              		.loc 1 380 9 is_stmt 1 view .LVU128
 380:timer64/time64.c ****     else if( year > MAX_SAFE_YEAR )
 534              		.loc 1 380 19 is_stmt 0 view .LVU129
 535 007e 1A4B     		ldr	r3, .L44+4
 536 0080 53F82200 		ldr	r0, [r3, r2, lsl #2]
 537              	.LVL64:
 538              	.L37:
 386:timer64/time64.c ****           year, year_cycle, safe_year);
 539              		.loc 1 386 5 is_stmt 1 view .LVU130
 389:timer64/time64.c **** 
 540              		.loc 1 389 5 view .LVU131
 541 0084 A0F2B373 		subw	r3, r0, #1971
 542 0088 422B     		cmp	r3, #66
 543 008a 23D8     		bhi	.L43
 544              	.LVL65:
 545              	.L27:
 392:timer64/time64.c **** 
 546              		.loc 1 392 1 is_stmt 0 view .LVU132
 547 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 548              	.LVL66:
 549              	.L40:
 375:timer64/time64.c **** 
 550              		.loc 1 375 9 is_stmt 1 view .LVU133
 375:timer64/time64.c **** 
 551              		.loc 1 375 20 is_stmt 0 view .LVU134
 552 008e 1C32     		adds	r2, r2, #28
 553              	.LVL67:
 375:timer64/time64.c **** 
 554              		.loc 1 375 20 view .LVU135
 555 0090 43F10001 		adc	r1, r3, #0
 556              	.LVL68:
 375:timer64/time64.c **** 
 557              		.loc 1 375 20 view .LVU136
 558 0094 E7E7     		b	.L33
 559              	.L41:
 377:timer64/time64.c ****     assert( year_cycle < SOLAR_CYCLE_LENGTH );
ARM GAS  /tmp/cc4CMdmh.s 			page 21


 560              		.loc 1 377 5 discriminator 1 view .LVU137
 561 0096 154B     		ldr	r3, .L44+8
 562 0098 154A     		ldr	r2, .L44+12
 563              	.LVL69:
 377:timer64/time64.c ****     assert( year_cycle < SOLAR_CYCLE_LENGTH );
 564              		.loc 1 377 5 discriminator 1 view .LVU138
 565 009a 40F27911 		movw	r1, #377
 566 009e 1548     		ldr	r0, .L44+16
 567 00a0 FFF7FEFF 		bl	__assert_func
 568              	.LVL70:
 569              	.L42:
 378:timer64/time64.c ****     if( year < MIN_SAFE_YEAR )
 570              		.loc 1 378 5 discriminator 1 view .LVU139
 571 00a4 144B     		ldr	r3, .L44+20
 572 00a6 124A     		ldr	r2, .L44+12
 573              	.LVL71:
 378:timer64/time64.c ****     if( year < MIN_SAFE_YEAR )
 574              		.loc 1 378 5 discriminator 1 view .LVU140
 575 00a8 4FF4BD71 		mov	r1, #378
 576 00ac 1148     		ldr	r0, .L44+16
 577 00ae FFF7FEFF 		bl	__assert_func
 578              	.LVL72:
 579              	.L36:
 381:timer64/time64.c ****         safe_year = safe_years_high[year_cycle];
 580              		.loc 1 381 10 is_stmt 1 view .LVU141
 381:timer64/time64.c ****         safe_year = safe_years_high[year_cycle];
 581              		.loc 1 381 12 is_stmt 0 view .LVU142
 582 00b2 40F2F673 		movw	r3, #2038
 583 00b6 9C42     		cmp	r4, r3
 584 00b8 76F10003 		sbcs	r3, r6, #0
 585 00bc 03DB     		blt	.L38
 382:timer64/time64.c ****     else
 586              		.loc 1 382 9 is_stmt 1 view .LVU143
 382:timer64/time64.c ****     else
 587              		.loc 1 382 36 is_stmt 0 view .LVU144
 588 00be 0F4B     		ldr	r3, .L44+24
 589 00c0 33F91200 		ldrsh	r0, [r3, r2, lsl #1]
 590              	.LVL73:
 382:timer64/time64.c ****     else
 591              		.loc 1 382 36 view .LVU145
 592 00c4 DEE7     		b	.L37
 593              	.LVL74:
 594              	.L38:
 384:timer64/time64.c **** 
 595              		.loc 1 384 9 is_stmt 1 view .LVU146
 596 00c6 0E4B     		ldr	r3, .L44+28
 597 00c8 094A     		ldr	r2, .L44+12
 598              	.LVL75:
 384:timer64/time64.c **** 
 599              		.loc 1 384 9 is_stmt 0 view .LVU147
 600 00ca 4FF4C071 		mov	r1, #384
 601 00ce 0948     		ldr	r0, .L44+16
 602 00d0 FFF7FEFF 		bl	__assert_func
 603              	.LVL76:
 604              	.L43:
 389:timer64/time64.c **** 
 605              		.loc 1 389 5 discriminator 1 view .LVU148
ARM GAS  /tmp/cc4CMdmh.s 			page 22


 606 00d4 0B4B     		ldr	r3, .L44+32
 607 00d6 064A     		ldr	r2, .L44+12
 608              	.LVL77:
 389:timer64/time64.c **** 
 609              		.loc 1 389 5 discriminator 1 view .LVU149
 610 00d8 40F28511 		movw	r1, #389
 611 00dc 0548     		ldr	r0, .L44+16
 612              	.LVL78:
 389:timer64/time64.c **** 
 613              		.loc 1 389 5 discriminator 1 view .LVU150
 614 00de FFF7FEFF 		bl	__assert_func
 615              	.LVL79:
 616              	.L45:
 617 00e2 00BF     		.align	2
 618              	.L44:
 619 00e4 4DF8FFFF 		.word	-1971
 620 00e8 00000000 		.word	.LANCHOR2
 621 00ec 00000000 		.word	.LC0
 622 00f0 00000000 		.word	.LANCHOR1
 623 00f4 10000000 		.word	.LC1
 624 00f8 24000000 		.word	.LC2
 625 00fc 00000000 		.word	.LANCHOR3
 626 0100 44000000 		.word	.LC3
 627 0104 48000000 		.word	.LC4
 628              		.cfi_endproc
 629              	.LFE9:
 631              		.section	.rodata.check_tm.str1.4,"aMS",%progbits,1
 632              		.align	2
 633              	.LC5:
 634 0000 746D2D3E 		.ascii	"tm->tm_sec >= 0\000"
 634      746D5F73 
 634      6563203E 
 634      3D203000 
 635              		.align	2
 636              	.LC6:
 637 0010 746D2D3E 		.ascii	"tm->tm_sec <= 61\000"
 637      746D5F73 
 637      6563203C 
 637      3D203631 
 637      00
 638 0021 000000   		.align	2
 639              	.LC7:
 640 0024 746D2D3E 		.ascii	"tm->tm_min >= 0\000"
 640      746D5F6D 
 640      696E203E 
 640      3D203000 
 641              		.align	2
 642              	.LC8:
 643 0034 746D2D3E 		.ascii	"tm->tm_min <= 59\000"
 643      746D5F6D 
 643      696E203C 
 643      3D203539 
 643      00
 644 0045 000000   		.align	2
 645              	.LC9:
 646 0048 746D2D3E 		.ascii	"tm->tm_hour >= 0\000"
 646      746D5F68 
ARM GAS  /tmp/cc4CMdmh.s 			page 23


 646      6F757220 
 646      3E3D2030 
 646      00
 647 0059 000000   		.align	2
 648              	.LC10:
 649 005c 746D2D3E 		.ascii	"tm->tm_hour <= 23\000"
 649      746D5F68 
 649      6F757220 
 649      3C3D2032 
 649      3300
 650 006e 0000     		.align	2
 651              	.LC11:
 652 0070 746D2D3E 		.ascii	"tm->tm_mday >= 1\000"
 652      746D5F6D 
 652      64617920 
 652      3E3D2031 
 652      00
 653 0081 000000   		.align	2
 654              	.LC12:
 655 0084 746D2D3E 		.ascii	"tm->tm_mday <= days_in_month[IS_LEAP(tm->tm_year)]["
 655      746D5F6D 
 655      64617920 
 655      3C3D2064 
 655      6179735F 
 656 00b7 746D2D3E 		.ascii	"tm->tm_mon]\000"
 656      746D5F6D 
 656      6F6E5D00 
 657 00c3 00       		.align	2
 658              	.LC13:
 659 00c4 746D2D3E 		.ascii	"tm->tm_mon >= 0\000"
 659      746D5F6D 
 659      6F6E203E 
 659      3D203000 
 660              		.align	2
 661              	.LC14:
 662 00d4 746D2D3E 		.ascii	"tm->tm_mon <= 11\000"
 662      746D5F6D 
 662      6F6E203C 
 662      3D203131 
 662      00
 663 00e5 000000   		.align	2
 664              	.LC15:
 665 00e8 746D2D3E 		.ascii	"tm->tm_wday >= 0\000"
 665      746D5F77 
 665      64617920 
 665      3E3D2030 
 665      00
 666 00f9 000000   		.align	2
 667              	.LC16:
 668 00fc 746D2D3E 		.ascii	"tm->tm_wday <= 6\000"
 668      746D5F77 
 668      64617920 
 668      3C3D2036 
 668      00
 669 010d 000000   		.align	2
 670              	.LC17:
 671 0110 746D2D3E 		.ascii	"tm->tm_yday >= 0\000"
ARM GAS  /tmp/cc4CMdmh.s 			page 24


 671      746D5F79 
 671      64617920 
 671      3E3D2030 
 671      00
 672 0121 000000   		.align	2
 673              	.LC18:
 674 0124 746D2D3E 		.ascii	"tm->tm_yday <= length_of_year[IS_LEAP(tm->tm_year)]"
 674      746D5F79 
 674      64617920 
 674      3C3D206C 
 674      656E6774 
 675 0157 00       		.ascii	"\000"
 676              		.section	.text.check_tm,"ax",%progbits
 677              		.align	1
 678              		.syntax unified
 679              		.thumb
 680              		.thumb_func
 682              	check_tm:
 683              	.LVL80:
 684              	.LFB7:
 280:timer64/time64.c ****     /* Don't forget leap seconds */
 685              		.loc 1 280 1 is_stmt 1 view -0
 686              		.cfi_startproc
 687              		@ args = 0, pretend = 0, frame = 0
 688              		@ frame_needed = 0, uses_anonymous_args = 0
 280:timer64/time64.c ****     /* Don't forget leap seconds */
 689              		.loc 1 280 1 is_stmt 0 view .LVU152
 690 0000 70B5     		push	{r4, r5, r6, lr}
 691              	.LCFI4:
 692              		.cfi_def_cfa_offset 16
 693              		.cfi_offset 4, -16
 694              		.cfi_offset 5, -12
 695              		.cfi_offset 6, -8
 696              		.cfi_offset 14, -4
 282:timer64/time64.c ****     assert(tm->tm_sec <= 61);
 697              		.loc 1 282 5 is_stmt 1 view .LVU153
 698 0002 0368     		ldr	r3, [r0]
 699 0004 002B     		cmp	r3, #0
 700 0006 2DDB     		blt	.L70
 283:timer64/time64.c **** 
 701              		.loc 1 283 5 view .LVU154
 702 0008 3D2B     		cmp	r3, #61
 703 000a 32DC     		bgt	.L71
 285:timer64/time64.c ****     assert(tm->tm_min <= 59);
 704              		.loc 1 285 5 view .LVU155
 705 000c 4368     		ldr	r3, [r0, #4]
 706 000e 002B     		cmp	r3, #0
 707 0010 36DB     		blt	.L72
 286:timer64/time64.c **** 
 708              		.loc 1 286 5 view .LVU156
 709 0012 3B2B     		cmp	r3, #59
 710 0014 3BDC     		bgt	.L73
 288:timer64/time64.c ****     assert(tm->tm_hour <= 23);
 711              		.loc 1 288 5 view .LVU157
 712 0016 8368     		ldr	r3, [r0, #8]
 713 0018 002B     		cmp	r3, #0
 714 001a 3FDB     		blt	.L74
ARM GAS  /tmp/cc4CMdmh.s 			page 25


 289:timer64/time64.c **** 
 715              		.loc 1 289 5 view .LVU158
 716 001c 172B     		cmp	r3, #23
 717 001e 44DC     		bgt	.L75
 291:timer64/time64.c ****     assert(tm->tm_mday <= days_in_month[IS_LEAP(tm->tm_year)][tm->tm_mon]);
 718              		.loc 1 291 5 view .LVU159
 719 0020 C668     		ldr	r6, [r0, #12]
 720 0022 002E     		cmp	r6, #0
 721 0024 48DD     		ble	.L76
 292:timer64/time64.c **** 
 722              		.loc 1 292 5 view .LVU160
 723 0026 4369     		ldr	r3, [r0, #20]
 724 0028 03F26C73 		addw	r3, r3, #1900
 725 002c 584A     		ldr	r2, .L84
 726 002e 82FB0312 		smull	r1, r2, r2, r3
 727 0032 D917     		asrs	r1, r3, #31
 728 0034 C1EBE212 		rsb	r2, r1, r2, asr #7
 729 0038 4FF4C871 		mov	r1, #400
 730 003c 01FB1232 		mls	r2, r1, r2, r3
 731 0040 002A     		cmp	r2, #0
 732 0042 40D0     		beq	.L63
 292:timer64/time64.c **** 
 733              		.loc 1 292 5 is_stmt 0 discriminator 2 view .LVU161
 734 0044 13F0030F 		tst	r3, #3
 735 0048 65D1     		bne	.L64
 292:timer64/time64.c **** 
 736              		.loc 1 292 5 discriminator 3 view .LVU162
 737 004a 514C     		ldr	r4, .L84
 738 004c 84FB0314 		smull	r1, r4, r4, r3
 739 0050 D917     		asrs	r1, r3, #31
 740 0052 C1EB6411 		rsb	r1, r1, r4, asr #5
 741 0056 6424     		movs	r4, #100
 742 0058 04FB1131 		mls	r1, r4, r1, r3
 743 005c 0029     		cmp	r1, #0
 744 005e 33D0     		beq	.L54
 292:timer64/time64.c **** 
 745              		.loc 1 292 5 view .LVU163
 746 0060 0121     		movs	r1, #1
 747 0062 31E0     		b	.L54
 748              	.L70:
 282:timer64/time64.c ****     assert(tm->tm_sec <= 61);
 749              		.loc 1 282 5 discriminator 1 view .LVU164
 750 0064 4B4B     		ldr	r3, .L84+4
 751 0066 4C4A     		ldr	r2, .L84+8
 752 0068 4FF48D71 		mov	r1, #282
 753 006c 4B48     		ldr	r0, .L84+12
 754              	.LVL81:
 282:timer64/time64.c ****     assert(tm->tm_sec <= 61);
 755              		.loc 1 282 5 discriminator 1 view .LVU165
 756 006e FFF7FEFF 		bl	__assert_func
 757              	.LVL82:
 758              	.L71:
 283:timer64/time64.c **** 
 759              		.loc 1 283 5 discriminator 1 view .LVU166
 760 0072 4B4B     		ldr	r3, .L84+16
 761 0074 484A     		ldr	r2, .L84+8
 762 0076 40F21B11 		movw	r1, #283
ARM GAS  /tmp/cc4CMdmh.s 			page 26


 763 007a 4848     		ldr	r0, .L84+12
 764              	.LVL83:
 283:timer64/time64.c **** 
 765              		.loc 1 283 5 discriminator 1 view .LVU167
 766 007c FFF7FEFF 		bl	__assert_func
 767              	.LVL84:
 768              	.L72:
 285:timer64/time64.c ****     assert(tm->tm_min <= 59);
 769              		.loc 1 285 5 discriminator 1 view .LVU168
 770 0080 484B     		ldr	r3, .L84+20
 771 0082 454A     		ldr	r2, .L84+8
 772 0084 40F21D11 		movw	r1, #285
 773 0088 4448     		ldr	r0, .L84+12
 774              	.LVL85:
 285:timer64/time64.c ****     assert(tm->tm_min <= 59);
 775              		.loc 1 285 5 discriminator 1 view .LVU169
 776 008a FFF7FEFF 		bl	__assert_func
 777              	.LVL86:
 778              	.L73:
 286:timer64/time64.c **** 
 779              		.loc 1 286 5 discriminator 1 view .LVU170
 780 008e 464B     		ldr	r3, .L84+24
 781 0090 414A     		ldr	r2, .L84+8
 782 0092 4FF48F71 		mov	r1, #286
 783 0096 4148     		ldr	r0, .L84+12
 784              	.LVL87:
 286:timer64/time64.c **** 
 785              		.loc 1 286 5 discriminator 1 view .LVU171
 786 0098 FFF7FEFF 		bl	__assert_func
 787              	.LVL88:
 788              	.L74:
 288:timer64/time64.c ****     assert(tm->tm_hour <= 23);
 789              		.loc 1 288 5 discriminator 1 view .LVU172
 790 009c 434B     		ldr	r3, .L84+28
 791 009e 3E4A     		ldr	r2, .L84+8
 792 00a0 4FF49071 		mov	r1, #288
 793 00a4 3D48     		ldr	r0, .L84+12
 794              	.LVL89:
 288:timer64/time64.c ****     assert(tm->tm_hour <= 23);
 795              		.loc 1 288 5 discriminator 1 view .LVU173
 796 00a6 FFF7FEFF 		bl	__assert_func
 797              	.LVL90:
 798              	.L75:
 289:timer64/time64.c **** 
 799              		.loc 1 289 5 discriminator 1 view .LVU174
 800 00aa 414B     		ldr	r3, .L84+32
 801 00ac 3A4A     		ldr	r2, .L84+8
 802 00ae 40F22111 		movw	r1, #289
 803 00b2 3A48     		ldr	r0, .L84+12
 804              	.LVL91:
 289:timer64/time64.c **** 
 805              		.loc 1 289 5 discriminator 1 view .LVU175
 806 00b4 FFF7FEFF 		bl	__assert_func
 807              	.LVL92:
 808              	.L76:
 291:timer64/time64.c ****     assert(tm->tm_mday <= days_in_month[IS_LEAP(tm->tm_year)][tm->tm_mon]);
 809              		.loc 1 291 5 discriminator 1 view .LVU176
ARM GAS  /tmp/cc4CMdmh.s 			page 27


 810 00b8 3E4B     		ldr	r3, .L84+36
 811 00ba 374A     		ldr	r2, .L84+8
 812 00bc 40F22311 		movw	r1, #291
 813 00c0 3648     		ldr	r0, .L84+12
 814              	.LVL93:
 291:timer64/time64.c ****     assert(tm->tm_mday <= days_in_month[IS_LEAP(tm->tm_year)][tm->tm_mon]);
 815              		.loc 1 291 5 discriminator 1 view .LVU177
 816 00c2 FFF7FEFF 		bl	__assert_func
 817              	.LVL94:
 818              	.L63:
 292:timer64/time64.c **** 
 819              		.loc 1 292 5 view .LVU178
 820 00c6 0121     		movs	r1, #1
 821              	.L54:
 292:timer64/time64.c **** 
 822              		.loc 1 292 5 discriminator 8 view .LVU179
 823 00c8 0569     		ldr	r5, [r0, #16]
 824 00ca 01EB4101 		add	r1, r1, r1, lsl #1
 825 00ce 3A4C     		ldr	r4, .L84+40
 826 00d0 04EB8101 		add	r1, r4, r1, lsl #2
 827 00d4 495D     		ldrb	r1, [r1, r5]	@ zero_extendqisi2
 828 00d6 8E42     		cmp	r6, r1
 829 00d8 1FDC     		bgt	.L77
 294:timer64/time64.c ****     assert(tm->tm_mon  <= 11);
 830              		.loc 1 294 5 is_stmt 1 view .LVU180
 831 00da 002D     		cmp	r5, #0
 832 00dc 24DB     		blt	.L78
 295:timer64/time64.c **** 
 833              		.loc 1 295 5 view .LVU181
 834 00de 0B2D     		cmp	r5, #11
 835 00e0 29DC     		bgt	.L79
 297:timer64/time64.c ****     assert(tm->tm_wday <= 6);
 836              		.loc 1 297 5 view .LVU182
 837 00e2 8169     		ldr	r1, [r0, #24]
 838 00e4 0029     		cmp	r1, #0
 839 00e6 2DDB     		blt	.L80
 298:timer64/time64.c ****     
 840              		.loc 1 298 5 view .LVU183
 841 00e8 0629     		cmp	r1, #6
 842 00ea 32DC     		bgt	.L81
 300:timer64/time64.c ****     assert(tm->tm_yday <= length_of_year[IS_LEAP(tm->tm_year)]);
 843              		.loc 1 300 5 view .LVU184
 844 00ec C169     		ldr	r1, [r0, #28]
 845 00ee 0029     		cmp	r1, #0
 846 00f0 36DB     		blt	.L82
 301:timer64/time64.c **** 
 847              		.loc 1 301 5 view .LVU185
 848 00f2 002A     		cmp	r2, #0
 849 00f4 3BD0     		beq	.L66
 301:timer64/time64.c **** 
 850              		.loc 1 301 5 is_stmt 0 discriminator 2 view .LVU186
 851 00f6 13F0030F 		tst	r3, #3
 852 00fa 40D1     		bne	.L67
 301:timer64/time64.c **** 
 853              		.loc 1 301 5 discriminator 3 view .LVU187
 854 00fc 2448     		ldr	r0, .L84
 855              	.LVL95:
ARM GAS  /tmp/cc4CMdmh.s 			page 28


 301:timer64/time64.c **** 
 856              		.loc 1 301 5 discriminator 3 view .LVU188
 857 00fe 80FB0320 		smull	r2, r0, r0, r3
 858 0102 DA17     		asrs	r2, r3, #31
 859 0104 C2EB6012 		rsb	r2, r2, r0, asr #5
 860 0108 6420     		movs	r0, #100
 861 010a 00FB1232 		mls	r2, r0, r2, r3
 862 010e 002A     		cmp	r2, #0
 863 0110 2ED0     		beq	.L61
 301:timer64/time64.c **** 
 864              		.loc 1 301 5 view .LVU189
 865 0112 0122     		movs	r2, #1
 866 0114 2CE0     		b	.L61
 867              	.LVL96:
 868              	.L64:
 292:timer64/time64.c **** 
 869              		.loc 1 292 5 view .LVU190
 870 0116 0021     		movs	r1, #0
 871 0118 D6E7     		b	.L54
 872              	.L77:
 292:timer64/time64.c **** 
 873              		.loc 1 292 5 discriminator 9 view .LVU191
 874 011a 284B     		ldr	r3, .L84+44
 875 011c 1E4A     		ldr	r2, .L84+8
 876 011e 4FF49271 		mov	r1, #292
 877 0122 1E48     		ldr	r0, .L84+12
 878              	.LVL97:
 292:timer64/time64.c **** 
 879              		.loc 1 292 5 discriminator 9 view .LVU192
 880 0124 FFF7FEFF 		bl	__assert_func
 881              	.LVL98:
 882              	.L78:
 294:timer64/time64.c ****     assert(tm->tm_mon  <= 11);
 883              		.loc 1 294 5 discriminator 1 view .LVU193
 884 0128 254B     		ldr	r3, .L84+48
 885 012a 1B4A     		ldr	r2, .L84+8
 886 012c 4FF49371 		mov	r1, #294
 887 0130 1A48     		ldr	r0, .L84+12
 888              	.LVL99:
 294:timer64/time64.c ****     assert(tm->tm_mon  <= 11);
 889              		.loc 1 294 5 discriminator 1 view .LVU194
 890 0132 FFF7FEFF 		bl	__assert_func
 891              	.LVL100:
 892              	.L79:
 295:timer64/time64.c **** 
 893              		.loc 1 295 5 discriminator 1 view .LVU195
 894 0136 234B     		ldr	r3, .L84+52
 895 0138 174A     		ldr	r2, .L84+8
 896 013a 40F22711 		movw	r1, #295
 897 013e 1748     		ldr	r0, .L84+12
 898              	.LVL101:
 295:timer64/time64.c **** 
 899              		.loc 1 295 5 discriminator 1 view .LVU196
 900 0140 FFF7FEFF 		bl	__assert_func
 901              	.LVL102:
 902              	.L80:
 297:timer64/time64.c ****     assert(tm->tm_wday <= 6);
ARM GAS  /tmp/cc4CMdmh.s 			page 29


 903              		.loc 1 297 5 discriminator 1 view .LVU197
 904 0144 204B     		ldr	r3, .L84+56
 905 0146 144A     		ldr	r2, .L84+8
 906 0148 40F22911 		movw	r1, #297
 907 014c 1348     		ldr	r0, .L84+12
 908              	.LVL103:
 297:timer64/time64.c ****     assert(tm->tm_wday <= 6);
 909              		.loc 1 297 5 discriminator 1 view .LVU198
 910 014e FFF7FEFF 		bl	__assert_func
 911              	.LVL104:
 912              	.L81:
 298:timer64/time64.c ****     
 913              		.loc 1 298 5 discriminator 1 view .LVU199
 914 0152 1E4B     		ldr	r3, .L84+60
 915 0154 104A     		ldr	r2, .L84+8
 916 0156 4FF49571 		mov	r1, #298
 917 015a 1048     		ldr	r0, .L84+12
 918              	.LVL105:
 298:timer64/time64.c ****     
 919              		.loc 1 298 5 discriminator 1 view .LVU200
 920 015c FFF7FEFF 		bl	__assert_func
 921              	.LVL106:
 922              	.L82:
 300:timer64/time64.c ****     assert(tm->tm_yday <= length_of_year[IS_LEAP(tm->tm_year)]);
 923              		.loc 1 300 5 discriminator 1 view .LVU201
 924 0160 1B4B     		ldr	r3, .L84+64
 925 0162 0D4A     		ldr	r2, .L84+8
 926 0164 4FF49671 		mov	r1, #300
 927 0168 0C48     		ldr	r0, .L84+12
 928              	.LVL107:
 300:timer64/time64.c ****     assert(tm->tm_yday <= length_of_year[IS_LEAP(tm->tm_year)]);
 929              		.loc 1 300 5 discriminator 1 view .LVU202
 930 016a FFF7FEFF 		bl	__assert_func
 931              	.LVL108:
 932              	.L66:
 301:timer64/time64.c **** 
 933              		.loc 1 301 5 view .LVU203
 934 016e 0122     		movs	r2, #1
 935              	.LVL109:
 936              	.L61:
 301:timer64/time64.c **** 
 937              		.loc 1 301 5 discriminator 8 view .LVU204
 938 0170 184B     		ldr	r3, .L84+68
 939 0172 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 940 0176 9942     		cmp	r1, r3
 941 0178 03DC     		bgt	.L83
 308:timer64/time64.c **** }
 942              		.loc 1 308 5 is_stmt 1 view .LVU205
 309:timer64/time64.c **** 
 943              		.loc 1 309 1 is_stmt 0 view .LVU206
 944 017a 0120     		movs	r0, #1
 945 017c 70BD     		pop	{r4, r5, r6, pc}
 946              	.LVL110:
 947              	.L67:
 301:timer64/time64.c **** 
 948              		.loc 1 301 5 view .LVU207
 949 017e 0022     		movs	r2, #0
ARM GAS  /tmp/cc4CMdmh.s 			page 30


 950 0180 F6E7     		b	.L61
 951              	.LVL111:
 952              	.L83:
 301:timer64/time64.c **** 
 953              		.loc 1 301 5 discriminator 9 view .LVU208
 954 0182 154B     		ldr	r3, .L84+72
 955 0184 044A     		ldr	r2, .L84+8
 956 0186 40F22D11 		movw	r1, #301
 957 018a 0448     		ldr	r0, .L84+12
 958 018c FFF7FEFF 		bl	__assert_func
 959              	.LVL112:
 960              	.L85:
 961              		.align	2
 962              	.L84:
 963 0190 1F85EB51 		.word	1374389535
 964 0194 00000000 		.word	.LC5
 965 0198 00000000 		.word	.LANCHOR4
 966 019c 10000000 		.word	.LC1
 967 01a0 10000000 		.word	.LC6
 968 01a4 24000000 		.word	.LC7
 969 01a8 34000000 		.word	.LC8
 970 01ac 48000000 		.word	.LC9
 971 01b0 5C000000 		.word	.LC10
 972 01b4 70000000 		.word	.LC11
 973 01b8 00000000 		.word	.LANCHOR5
 974 01bc 84000000 		.word	.LC12
 975 01c0 C4000000 		.word	.LC13
 976 01c4 D4000000 		.word	.LC14
 977 01c8 E8000000 		.word	.LC15
 978 01cc FC000000 		.word	.LC16
 979 01d0 10010000 		.word	.LC17
 980 01d4 00000000 		.word	.LANCHOR0
 981 01d8 24010000 		.word	.LC18
 982              		.cfi_endproc
 983              	.LFE7:
 985              		.section	.text.cmp_date,"ax",%progbits
 986              		.align	1
 987              		.global	cmp_date
 988              		.syntax unified
 989              		.thumb
 990              		.thumb_func
 992              	cmp_date:
 993              	.LVL113:
 994              	.LFB4:
 179:timer64/time64.c ****     if( left->tm_year > right->tm_year )
 995              		.loc 1 179 63 is_stmt 1 view -0
 996              		.cfi_startproc
 997              		@ args = 0, pretend = 0, frame = 0
 998              		@ frame_needed = 0, uses_anonymous_args = 0
 999              		@ link register save eliminated.
 180:timer64/time64.c ****         return 1;
 1000              		.loc 1 180 5 view .LVU210
 180:timer64/time64.c ****         return 1;
 1001              		.loc 1 180 13 is_stmt 0 view .LVU211
 1002 0000 4269     		ldr	r2, [r0, #20]
 180:timer64/time64.c ****         return 1;
 1003              		.loc 1 180 30 view .LVU212
ARM GAS  /tmp/cc4CMdmh.s 			page 31


 1004 0002 4B69     		ldr	r3, [r1, #20]
 180:timer64/time64.c ****         return 1;
 1005              		.loc 1 180 7 view .LVU213
 1006 0004 9A42     		cmp	r2, r3
 1007 0006 1BDC     		bgt	.L88
 182:timer64/time64.c ****         return -1;
 1008              		.loc 1 182 10 is_stmt 1 view .LVU214
 182:timer64/time64.c ****         return -1;
 1009              		.loc 1 182 12 is_stmt 0 view .LVU215
 1010 0008 1CDB     		blt	.L89
 185:timer64/time64.c ****         return 1;
 1011              		.loc 1 185 5 is_stmt 1 view .LVU216
 185:timer64/time64.c ****         return 1;
 1012              		.loc 1 185 13 is_stmt 0 view .LVU217
 1013 000a 0269     		ldr	r2, [r0, #16]
 185:timer64/time64.c ****         return 1;
 1014              		.loc 1 185 29 view .LVU218
 1015 000c 0B69     		ldr	r3, [r1, #16]
 185:timer64/time64.c ****         return 1;
 1016              		.loc 1 185 7 view .LVU219
 1017 000e 9A42     		cmp	r2, r3
 1018 0010 1BDC     		bgt	.L90
 187:timer64/time64.c ****         return -1;
 1019              		.loc 1 187 10 is_stmt 1 view .LVU220
 187:timer64/time64.c ****         return -1;
 1020              		.loc 1 187 12 is_stmt 0 view .LVU221
 1021 0012 1CDB     		blt	.L91
 190:timer64/time64.c ****         return 1;
 1022              		.loc 1 190 5 is_stmt 1 view .LVU222
 190:timer64/time64.c ****         return 1;
 1023              		.loc 1 190 13 is_stmt 0 view .LVU223
 1024 0014 C268     		ldr	r2, [r0, #12]
 190:timer64/time64.c ****         return 1;
 1025              		.loc 1 190 30 view .LVU224
 1026 0016 CB68     		ldr	r3, [r1, #12]
 190:timer64/time64.c ****         return 1;
 1027              		.loc 1 190 7 view .LVU225
 1028 0018 9A42     		cmp	r2, r3
 1029 001a 1BDC     		bgt	.L92
 192:timer64/time64.c ****         return -1;
 1030              		.loc 1 192 10 is_stmt 1 view .LVU226
 192:timer64/time64.c ****         return -1;
 1031              		.loc 1 192 12 is_stmt 0 view .LVU227
 1032 001c 1CDB     		blt	.L93
 195:timer64/time64.c ****         return 1;
 1033              		.loc 1 195 5 is_stmt 1 view .LVU228
 195:timer64/time64.c ****         return 1;
 1034              		.loc 1 195 13 is_stmt 0 view .LVU229
 1035 001e 8268     		ldr	r2, [r0, #8]
 195:timer64/time64.c ****         return 1;
 1036              		.loc 1 195 30 view .LVU230
 1037 0020 8B68     		ldr	r3, [r1, #8]
 195:timer64/time64.c ****         return 1;
 1038              		.loc 1 195 7 view .LVU231
 1039 0022 9A42     		cmp	r2, r3
 1040 0024 1BDC     		bgt	.L94
 197:timer64/time64.c ****         return -1;
ARM GAS  /tmp/cc4CMdmh.s 			page 32


 1041              		.loc 1 197 10 is_stmt 1 view .LVU232
 197:timer64/time64.c ****         return -1;
 1042              		.loc 1 197 12 is_stmt 0 view .LVU233
 1043 0026 1CDB     		blt	.L95
 200:timer64/time64.c ****         return 1;
 1044              		.loc 1 200 5 is_stmt 1 view .LVU234
 200:timer64/time64.c ****         return 1;
 1045              		.loc 1 200 13 is_stmt 0 view .LVU235
 1046 0028 4268     		ldr	r2, [r0, #4]
 200:timer64/time64.c ****         return 1;
 1047              		.loc 1 200 29 view .LVU236
 1048 002a 4B68     		ldr	r3, [r1, #4]
 200:timer64/time64.c ****         return 1;
 1049              		.loc 1 200 7 view .LVU237
 1050 002c 9A42     		cmp	r2, r3
 1051 002e 1BDC     		bgt	.L96
 202:timer64/time64.c ****         return -1;
 1052              		.loc 1 202 10 is_stmt 1 view .LVU238
 202:timer64/time64.c ****         return -1;
 1053              		.loc 1 202 12 is_stmt 0 view .LVU239
 1054 0030 1CDB     		blt	.L97
 205:timer64/time64.c ****         return 1;
 1055              		.loc 1 205 5 is_stmt 1 view .LVU240
 205:timer64/time64.c ****         return 1;
 1056              		.loc 1 205 13 is_stmt 0 view .LVU241
 1057 0032 0268     		ldr	r2, [r0]
 205:timer64/time64.c ****         return 1;
 1058              		.loc 1 205 29 view .LVU242
 1059 0034 0B68     		ldr	r3, [r1]
 205:timer64/time64.c ****         return 1;
 1060              		.loc 1 205 7 view .LVU243
 1061 0036 9A42     		cmp	r2, r3
 1062 0038 1BDC     		bgt	.L98
 207:timer64/time64.c ****         return -1;
 1063              		.loc 1 207 10 is_stmt 1 view .LVU244
 207:timer64/time64.c ****         return -1;
 1064              		.loc 1 207 12 is_stmt 0 view .LVU245
 1065 003a 1CDB     		blt	.L99
 210:timer64/time64.c **** }
 1066              		.loc 1 210 12 view .LVU246
 1067 003c 0020     		movs	r0, #0
 1068              	.LVL114:
 210:timer64/time64.c **** }
 1069              		.loc 1 210 12 view .LVU247
 1070 003e 7047     		bx	lr
 1071              	.LVL115:
 1072              	.L88:
 181:timer64/time64.c ****     else if( left->tm_year < right->tm_year )
 1073              		.loc 1 181 16 view .LVU248
 1074 0040 0120     		movs	r0, #1
 1075              	.LVL116:
 181:timer64/time64.c ****     else if( left->tm_year < right->tm_year )
 1076              		.loc 1 181 16 view .LVU249
 1077 0042 7047     		bx	lr
 1078              	.LVL117:
 1079              	.L89:
 183:timer64/time64.c **** 
ARM GAS  /tmp/cc4CMdmh.s 			page 33


 1080              		.loc 1 183 16 view .LVU250
 1081 0044 4FF0FF30 		mov	r0, #-1
 1082              	.LVL118:
 183:timer64/time64.c **** 
 1083              		.loc 1 183 16 view .LVU251
 1084 0048 7047     		bx	lr
 1085              	.LVL119:
 1086              	.L90:
 186:timer64/time64.c ****     else if( left->tm_mon < right->tm_mon )
 1087              		.loc 1 186 16 view .LVU252
 1088 004a 0120     		movs	r0, #1
 1089              	.LVL120:
 186:timer64/time64.c ****     else if( left->tm_mon < right->tm_mon )
 1090              		.loc 1 186 16 view .LVU253
 1091 004c 7047     		bx	lr
 1092              	.LVL121:
 1093              	.L91:
 188:timer64/time64.c **** 
 1094              		.loc 1 188 16 view .LVU254
 1095 004e 4FF0FF30 		mov	r0, #-1
 1096              	.LVL122:
 188:timer64/time64.c **** 
 1097              		.loc 1 188 16 view .LVU255
 1098 0052 7047     		bx	lr
 1099              	.LVL123:
 1100              	.L92:
 191:timer64/time64.c ****     else if( left->tm_mday < right->tm_mday )
 1101              		.loc 1 191 16 view .LVU256
 1102 0054 0120     		movs	r0, #1
 1103              	.LVL124:
 191:timer64/time64.c ****     else if( left->tm_mday < right->tm_mday )
 1104              		.loc 1 191 16 view .LVU257
 1105 0056 7047     		bx	lr
 1106              	.LVL125:
 1107              	.L93:
 193:timer64/time64.c **** 
 1108              		.loc 1 193 16 view .LVU258
 1109 0058 4FF0FF30 		mov	r0, #-1
 1110              	.LVL126:
 193:timer64/time64.c **** 
 1111              		.loc 1 193 16 view .LVU259
 1112 005c 7047     		bx	lr
 1113              	.LVL127:
 1114              	.L94:
 196:timer64/time64.c ****     else if( left->tm_hour < right->tm_hour )
 1115              		.loc 1 196 16 view .LVU260
 1116 005e 0120     		movs	r0, #1
 1117              	.LVL128:
 196:timer64/time64.c ****     else if( left->tm_hour < right->tm_hour )
 1118              		.loc 1 196 16 view .LVU261
 1119 0060 7047     		bx	lr
 1120              	.LVL129:
 1121              	.L95:
 198:timer64/time64.c **** 
 1122              		.loc 1 198 16 view .LVU262
 1123 0062 4FF0FF30 		mov	r0, #-1
 1124              	.LVL130:
ARM GAS  /tmp/cc4CMdmh.s 			page 34


 198:timer64/time64.c **** 
 1125              		.loc 1 198 16 view .LVU263
 1126 0066 7047     		bx	lr
 1127              	.LVL131:
 1128              	.L96:
 201:timer64/time64.c ****     else if( left->tm_min < right->tm_min )
 1129              		.loc 1 201 16 view .LVU264
 1130 0068 0120     		movs	r0, #1
 1131              	.LVL132:
 201:timer64/time64.c ****     else if( left->tm_min < right->tm_min )
 1132              		.loc 1 201 16 view .LVU265
 1133 006a 7047     		bx	lr
 1134              	.LVL133:
 1135              	.L97:
 203:timer64/time64.c **** 
 1136              		.loc 1 203 16 view .LVU266
 1137 006c 4FF0FF30 		mov	r0, #-1
 1138              	.LVL134:
 203:timer64/time64.c **** 
 1139              		.loc 1 203 16 view .LVU267
 1140 0070 7047     		bx	lr
 1141              	.LVL135:
 1142              	.L98:
 206:timer64/time64.c ****     else if( left->tm_sec < right->tm_sec )
 1143              		.loc 1 206 16 view .LVU268
 1144 0072 0120     		movs	r0, #1
 1145              	.LVL136:
 206:timer64/time64.c ****     else if( left->tm_sec < right->tm_sec )
 1146              		.loc 1 206 16 view .LVU269
 1147 0074 7047     		bx	lr
 1148              	.LVL137:
 1149              	.L99:
 208:timer64/time64.c **** 
 1150              		.loc 1 208 16 view .LVU270
 1151 0076 4FF0FF30 		mov	r0, #-1
 1152              	.LVL138:
 211:timer64/time64.c **** 
 1153              		.loc 1 211 1 view .LVU271
 1154 007a 7047     		bx	lr
 1155              		.cfi_endproc
 1156              	.LFE4:
 1158              		.section	.text.date_in_safe_range,"ax",%progbits
 1159              		.align	1
 1160              		.global	date_in_safe_range
 1161              		.syntax unified
 1162              		.thumb
 1163              		.thumb_func
 1165              	date_in_safe_range:
 1166              	.LVL139:
 1167              	.LFB5:
 217:timer64/time64.c ****     if( cmp_date(date, min) == -1 )
 1168              		.loc 1 217 93 is_stmt 1 view -0
 1169              		.cfi_startproc
 1170              		@ args = 0, pretend = 0, frame = 0
 1171              		@ frame_needed = 0, uses_anonymous_args = 0
 217:timer64/time64.c ****     if( cmp_date(date, min) == -1 )
 1172              		.loc 1 217 93 is_stmt 0 view .LVU273
ARM GAS  /tmp/cc4CMdmh.s 			page 35


 1173 0000 38B5     		push	{r3, r4, r5, lr}
 1174              	.LCFI5:
 1175              		.cfi_def_cfa_offset 16
 1176              		.cfi_offset 3, -16
 1177              		.cfi_offset 4, -12
 1178              		.cfi_offset 5, -8
 1179              		.cfi_offset 14, -4
 1180 0002 0446     		mov	r4, r0
 1181 0004 1546     		mov	r5, r2
 218:timer64/time64.c ****         return 0;
 1182              		.loc 1 218 5 is_stmt 1 view .LVU274
 218:timer64/time64.c ****         return 0;
 1183              		.loc 1 218 9 is_stmt 0 view .LVU275
 1184 0006 FFF7FEFF 		bl	cmp_date
 1185              	.LVL140:
 218:timer64/time64.c ****         return 0;
 1186              		.loc 1 218 7 view .LVU276
 1187 000a B0F1FF3F 		cmp	r0, #-1
 1188 000e 07D0     		beq	.L102
 221:timer64/time64.c ****         return 0;
 1189              		.loc 1 221 5 is_stmt 1 view .LVU277
 221:timer64/time64.c ****         return 0;
 1190              		.loc 1 221 9 is_stmt 0 view .LVU278
 1191 0010 2946     		mov	r1, r5
 1192 0012 2046     		mov	r0, r4
 1193 0014 FFF7FEFF 		bl	cmp_date
 1194              	.LVL141:
 221:timer64/time64.c ****         return 0;
 1195              		.loc 1 221 7 view .LVU279
 1196 0018 0128     		cmp	r0, #1
 1197 001a 03D0     		beq	.L103
 224:timer64/time64.c **** }
 1198              		.loc 1 224 12 view .LVU280
 1199 001c 0120     		movs	r0, #1
 1200              	.L100:
 225:timer64/time64.c **** 
 1201              		.loc 1 225 1 view .LVU281
 1202 001e 38BD     		pop	{r3, r4, r5, pc}
 1203              	.LVL142:
 1204              	.L102:
 219:timer64/time64.c **** 
 1205              		.loc 1 219 16 view .LVU282
 1206 0020 0020     		movs	r0, #0
 1207 0022 FCE7     		b	.L100
 1208              	.L103:
 222:timer64/time64.c **** 
 1209              		.loc 1 222 16 view .LVU283
 1210 0024 0020     		movs	r0, #0
 1211 0026 FAE7     		b	.L100
 1212              		.cfi_endproc
 1213              	.LFE5:
 1215              		.section	.text.timegm64,"ax",%progbits
 1216              		.align	1
 1217              		.global	timegm64
 1218              		.syntax unified
 1219              		.thumb
 1220              		.thumb_func
ARM GAS  /tmp/cc4CMdmh.s 			page 36


 1222              	timegm64:
 1223              	.LVL143:
 1224              	.LFB6:
 232:timer64/time64.c ****     Time64_T days    = 0;
 1225              		.loc 1 232 42 is_stmt 1 view -0
 1226              		.cfi_startproc
 1227              		@ args = 0, pretend = 0, frame = 8
 1228              		@ frame_needed = 0, uses_anonymous_args = 0
 232:timer64/time64.c ****     Time64_T days    = 0;
 1229              		.loc 1 232 42 is_stmt 0 view .LVU285
 1230 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1231              	.LCFI6:
 1232              		.cfi_def_cfa_offset 36
 1233              		.cfi_offset 4, -36
 1234              		.cfi_offset 5, -32
 1235              		.cfi_offset 6, -28
 1236              		.cfi_offset 7, -24
 1237              		.cfi_offset 8, -20
 1238              		.cfi_offset 9, -16
 1239              		.cfi_offset 10, -12
 1240              		.cfi_offset 11, -8
 1241              		.cfi_offset 14, -4
 1242 0004 83B0     		sub	sp, sp, #12
 1243              	.LCFI7:
 1244              		.cfi_def_cfa_offset 48
 1245 0006 8346     		mov	fp, r0
 233:timer64/time64.c ****     Time64_T seconds = 0;
 1246              		.loc 1 233 5 is_stmt 1 view .LVU286
 1247              	.LVL144:
 234:timer64/time64.c ****     Year     year;
 1248              		.loc 1 234 5 view .LVU287
 235:timer64/time64.c ****     Year     orig_year = (Year)date->tm_year;
 1249              		.loc 1 235 5 view .LVU288
 236:timer64/time64.c ****     int      cycles  = 0;
 1250              		.loc 1 236 5 view .LVU289
 236:timer64/time64.c ****     int      cycles  = 0;
 1251              		.loc 1 236 36 is_stmt 0 view .LVU290
 1252 0008 4369     		ldr	r3, [r0, #20]
 236:timer64/time64.c ****     int      cycles  = 0;
 1253              		.loc 1 236 14 view .LVU291
 1254 000a D917     		asrs	r1, r3, #31
 1255 000c 1F46     		mov	r7, r3
 1256 000e 8946     		mov	r9, r1
 1257              	.LVL145:
 237:timer64/time64.c **** 
 1258              		.loc 1 237 5 is_stmt 1 view .LVU292
 239:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 1259              		.loc 1 239 5 view .LVU293
 239:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 1260              		.loc 1 239 7 is_stmt 0 view .LVU294
 1261 0010 652B     		cmp	r3, #101
 1262 0012 71F10002 		sbcs	r2, r1, #0
 1263 0016 3EDB     		blt	.L106
 240:timer64/time64.c ****         orig_year -= cycles * 400;
 1264              		.loc 1 240 9 is_stmt 1 view .LVU295
 240:timer64/time64.c ****         orig_year -= cycles * 400;
 1265              		.loc 1 240 29 is_stmt 0 view .LVU296
ARM GAS  /tmp/cc4CMdmh.s 			page 37


 1266 0018 B3F16400 		subs	r0, r3, #100
 1267              	.LVL146:
 240:timer64/time64.c ****         orig_year -= cycles * 400;
 1268              		.loc 1 240 36 view .LVU297
 1269 001c 4FF4C872 		mov	r2, #400
 1270 0020 4FF00003 		mov	r3, #0
 1271              	.LVL147:
 240:timer64/time64.c ****         orig_year -= cycles * 400;
 1272              		.loc 1 240 36 view .LVU298
 1273 0024 61F10001 		sbc	r1, r1, #0
 1274              	.LVL148:
 240:timer64/time64.c ****         orig_year -= cycles * 400;
 1275              		.loc 1 240 36 view .LVU299
 1276 0028 FFF7FEFF 		bl	__aeabi_ldivmod
 1277              	.LVL149:
 1278 002c 0146     		mov	r1, r0
 1279              	.LVL150:
 241:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1280              		.loc 1 241 9 is_stmt 1 view .LVU300
 241:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1281              		.loc 1 241 29 is_stmt 0 view .LVU301
 1282 002e 4FF4C873 		mov	r3, #400
 1283 0032 00FB03F3 		mul	r3, r0, r3
 241:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1284              		.loc 1 241 19 view .LVU302
 1285 0036 FF1A     		subs	r7, r7, r3
 1286              	.LVL151:
 241:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1287              		.loc 1 241 19 view .LVU303
 1288 0038 69EBE379 		sbc	r9, r9, r3, asr #31
 1289              	.LVL152:
 242:timer64/time64.c ****     }
 1290              		.loc 1 242 9 is_stmt 1 view .LVU304
 242:timer64/time64.c ****     }
 1291              		.loc 1 242 22 is_stmt 0 view .LVU305
 1292 003c C217     		asrs	r2, r0, #31
 242:timer64/time64.c ****     }
 1293              		.loc 1 242 39 view .LVU306
 1294 003e D500     		lsls	r5, r2, #3
 1295 0040 45EA5075 		orr	r5, r5, r0, lsr #29
 1296 0044 C000     		lsls	r0, r0, #3
 1297              	.LVL153:
 242:timer64/time64.c ****     }
 1298              		.loc 1 242 39 view .LVU307
 1299 0046 4018     		adds	r0, r0, r1
 1300 0048 42EB0505 		adc	r5, r2, r5
 1301 004c 2D01     		lsls	r5, r5, #4
 1302 004e 45EA1075 		orr	r5, r5, r0, lsr #28
 1303 0052 0001     		lsls	r0, r0, #4
 1304 0054 4318     		adds	r3, r0, r1
 1305 0056 42EB0505 		adc	r5, r2, r5
 1306 005a 2D01     		lsls	r5, r5, #4
 1307 005c 45EA1375 		orr	r5, r5, r3, lsr #28
 1308 0060 1B01     		lsls	r3, r3, #4
 1309 0062 5B1A     		subs	r3, r3, r1
 1310 0064 65EB0205 		sbc	r5, r5, r2
 1311 0068 A901     		lsls	r1, r5, #6
ARM GAS  /tmp/cc4CMdmh.s 			page 38


 1312              	.LVL154:
 242:timer64/time64.c ****     }
 1313              		.loc 1 242 39 view .LVU308
 1314 006a 41EA9361 		orr	r1, r1, r3, lsr #26
 1315 006e 9A01     		lsls	r2, r3, #6
 1316 0070 D31A     		subs	r3, r2, r3
 1317 0072 1E46     		mov	r6, r3
 1318 0074 61EB0505 		sbc	r5, r1, r5
 1319              	.LVL155:
 1320              	.L107:
 249:timer64/time64.c **** 
 1321              		.loc 1 249 5 is_stmt 1 view .LVU309
 251:timer64/time64.c ****         year = 70;
 1322              		.loc 1 251 5 view .LVU310
 251:timer64/time64.c ****         year = 70;
 1323              		.loc 1 251 7 is_stmt 0 view .LVU311
 1324 0078 472F     		cmp	r7, #71
 1325 007a 79F10003 		sbcs	r3, r9, #0
 1326 007e 72DA     		bge	.L117
 258:timer64/time64.c ****         year = 69;
 1327              		.loc 1 258 10 is_stmt 1 view .LVU312
 258:timer64/time64.c ****         year = 69;
 1328              		.loc 1 258 13 is_stmt 0 view .LVU313
 1329 0080 462F     		cmp	r7, #70
 1330 0082 79F10003 		sbcs	r3, r9, #0
 1331 0086 78DA     		bge	.L112
 259:timer64/time64.c ****         do {
 1332              		.loc 1 259 14 view .LVU314
 1333 0088 4524     		movs	r4, #69
 1334 008a 4FF0000A 		mov	r10, #0
 1335 008e CDF804B0 		str	fp, [sp, #4]
 1336 0092 B046     		mov	r8, r6
 1337 0094 9EE0     		b	.L114
 1338              	.LVL156:
 1339              	.L106:
 244:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 1340              		.loc 1 244 10 is_stmt 1 view .LVU315
 244:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 1341              		.loc 1 244 12 is_stmt 0 view .LVU316
 1342 0096 13F5967F 		cmn	r3, #300
 1343 009a 71F1FF33 		sbcs	r3, r1, #-1
 1344              	.LVL157:
 244:timer64/time64.c ****         cycles = (orig_year - 100) / 400;
 1345              		.loc 1 244 12 view .LVU317
 1346 009e 30DA     		bge	.L116
 245:timer64/time64.c ****         orig_year -= cycles * 400;
 1347              		.loc 1 245 9 is_stmt 1 view .LVU318
 245:timer64/time64.c ****         orig_year -= cycles * 400;
 1348              		.loc 1 245 29 is_stmt 0 view .LVU319
 1349 00a0 B7F16400 		subs	r0, r7, #100
 1350              	.LVL158:
 245:timer64/time64.c ****         orig_year -= cycles * 400;
 1351              		.loc 1 245 36 view .LVU320
 1352 00a4 4FF4C872 		mov	r2, #400
 1353 00a8 4FF00003 		mov	r3, #0
 1354 00ac 61F10001 		sbc	r1, r1, #0
 1355              	.LVL159:
ARM GAS  /tmp/cc4CMdmh.s 			page 39


 245:timer64/time64.c ****         orig_year -= cycles * 400;
 1356              		.loc 1 245 36 view .LVU321
 1357 00b0 FFF7FEFF 		bl	__aeabi_ldivmod
 1358              	.LVL160:
 1359 00b4 0446     		mov	r4, r0
 1360              	.LVL161:
 246:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1361              		.loc 1 246 9 is_stmt 1 view .LVU322
 246:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1362              		.loc 1 246 29 is_stmt 0 view .LVU323
 1363 00b6 4FF4C873 		mov	r3, #400
 1364 00ba 00FB03F3 		mul	r3, r0, r3
 246:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1365              		.loc 1 246 19 view .LVU324
 1366 00be FF1A     		subs	r7, r7, r3
 1367              	.LVL162:
 246:timer64/time64.c ****         days      += (Time64_T)cycles * days_in_gregorian_cycle;
 1368              		.loc 1 246 19 view .LVU325
 1369 00c0 69EBE379 		sbc	r9, r9, r3, asr #31
 1370              	.LVL163:
 247:timer64/time64.c ****     }
 1371              		.loc 1 247 9 is_stmt 1 view .LVU326
 247:timer64/time64.c ****     }
 1372              		.loc 1 247 22 is_stmt 0 view .LVU327
 1373 00c4 C117     		asrs	r1, r0, #31
 247:timer64/time64.c ****     }
 1374              		.loc 1 247 39 view .LVU328
 1375 00c6 CD00     		lsls	r5, r1, #3
 1376 00c8 45EA5075 		orr	r5, r5, r0, lsr #29
 1377 00cc C000     		lsls	r0, r0, #3
 1378              	.LVL164:
 247:timer64/time64.c ****     }
 1379              		.loc 1 247 39 view .LVU329
 1380 00ce 0019     		adds	r0, r0, r4
 1381 00d0 41EB0505 		adc	r5, r1, r5
 1382 00d4 2D01     		lsls	r5, r5, #4
 1383 00d6 45EA1075 		orr	r5, r5, r0, lsr #28
 1384 00da 0201     		lsls	r2, r0, #4
 1385 00dc 1319     		adds	r3, r2, r4
 1386 00de 41EB0505 		adc	r5, r1, r5
 1387 00e2 2D01     		lsls	r5, r5, #4
 1388 00e4 45EA1375 		orr	r5, r5, r3, lsr #28
 1389 00e8 1B01     		lsls	r3, r3, #4
 1390 00ea 1B1B     		subs	r3, r3, r4
 1391 00ec 65EB0105 		sbc	r5, r5, r1
 1392 00f0 A901     		lsls	r1, r5, #6
 1393 00f2 41EA9361 		orr	r1, r1, r3, lsr #26
 1394 00f6 9A01     		lsls	r2, r3, #6
 1395 00f8 D31A     		subs	r3, r2, r3
 1396 00fa 1E46     		mov	r6, r3
 1397 00fc 61EB0505 		sbc	r5, r1, r5
 1398              	.LVL165:
 247:timer64/time64.c ****     }
 1399              		.loc 1 247 39 view .LVU330
 1400 0100 BAE7     		b	.L107
 1401              	.LVL166:
 1402              	.L116:
ARM GAS  /tmp/cc4CMdmh.s 			page 40


 233:timer64/time64.c ****     Time64_T seconds = 0;
 1403              		.loc 1 233 14 view .LVU331
 1404 0102 0023     		movs	r3, #0
 1405 0104 1E46     		mov	r6, r3
 1406 0106 1D46     		mov	r5, r3
 1407 0108 B6E7     		b	.L107
 1408              	.LVL167:
 1409              	.L118:
 254:timer64/time64.c ****             year++;
 1410              		.loc 1 254 36 view .LVU332
 1411 010a 0122     		movs	r2, #1
 1412              	.L110:
 254:timer64/time64.c ****             year++;
 1413              		.loc 1 254 35 discriminator 8 view .LVU333
 1414 010c 684B     		ldr	r3, .L131
 1415 010e 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 254:timer64/time64.c ****             year++;
 1416              		.loc 1 254 18 discriminator 8 view .LVU334
 1417 0112 13EB0A0A 		adds	r10, r3, r10
 1418              	.LVL168:
 254:timer64/time64.c ****             year++;
 1419              		.loc 1 254 18 discriminator 8 view .LVU335
 1420 0116 45EBE375 		adc	r5, r5, r3, asr #31
 1421              	.LVL169:
 255:timer64/time64.c ****         }
 1422              		.loc 1 255 13 is_stmt 1 discriminator 8 view .LVU336
 255:timer64/time64.c ****         }
 1423              		.loc 1 255 17 is_stmt 0 discriminator 8 view .LVU337
 1424 011a 0134     		adds	r4, r4, #1
 1425              	.LVL170:
 255:timer64/time64.c ****         }
 1426              		.loc 1 255 17 discriminator 8 view .LVU338
 1427 011c 48F10008 		adc	r8, r8, #0
 1428              	.LVL171:
 1429              	.L108:
 253:timer64/time64.c ****             days += length_of_year[IS_LEAP(year)];
 1430              		.loc 1 253 14 is_stmt 1 view .LVU339
 1431 0120 BC42     		cmp	r4, r7
 1432 0122 78EB0903 		sbcs	r3, r8, r9
 1433 0126 25DA     		bge	.L129
 254:timer64/time64.c ****             year++;
 1434              		.loc 1 254 13 view .LVU340
 254:timer64/time64.c ****             year++;
 1435              		.loc 1 254 36 is_stmt 0 view .LVU341
 1436 0128 40F26C76 		movw	r6, #1900
 1437 012c A619     		adds	r6, r4, r6
 1438 012e 48F1000B 		adc	fp, r8, #0
 1439 0132 4FF4C872 		mov	r2, #400
 1440 0136 0023     		movs	r3, #0
 1441 0138 3046     		mov	r0, r6
 1442 013a 5946     		mov	r1, fp
 1443 013c FFF7FEFF 		bl	__aeabi_ldivmod
 1444              	.LVL172:
 1445 0140 1343     		orrs	r3, r3, r2
 1446 0142 E2D0     		beq	.L118
 254:timer64/time64.c ****             year++;
 1447              		.loc 1 254 36 discriminator 2 view .LVU342
ARM GAS  /tmp/cc4CMdmh.s 			page 41


 1448 0144 16F0030F 		tst	r6, #3
 1449 0148 09D1     		bne	.L119
 254:timer64/time64.c ****             year++;
 1450              		.loc 1 254 36 discriminator 3 view .LVU343
 1451 014a 6422     		movs	r2, #100
 1452 014c 0023     		movs	r3, #0
 1453 014e 3046     		mov	r0, r6
 1454 0150 5946     		mov	r1, fp
 1455 0152 FFF7FEFF 		bl	__aeabi_ldivmod
 1456              	.LVL173:
 1457 0156 1343     		orrs	r3, r3, r2
 1458 0158 03D1     		bne	.L120
 254:timer64/time64.c ****             year++;
 1459              		.loc 1 254 36 view .LVU344
 1460 015a 0022     		movs	r2, #0
 1461 015c D6E7     		b	.L110
 1462              	.L119:
 1463 015e 0022     		movs	r2, #0
 1464 0160 D4E7     		b	.L110
 1465              	.L120:
 1466 0162 0122     		movs	r2, #1
 1467 0164 D2E7     		b	.L110
 1468              	.LVL174:
 1469              	.L117:
 252:timer64/time64.c ****         while( year < orig_year ) {
 1470              		.loc 1 252 14 view .LVU345
 1471 0166 4624     		movs	r4, #70
 1472 0168 4FF00008 		mov	r8, #0
 1473 016c CDF804B0 		str	fp, [sp, #4]
 1474 0170 B246     		mov	r10, r6
 1475 0172 D5E7     		b	.L108
 1476              	.LVL175:
 1477              	.L129:
 252:timer64/time64.c ****         while( year < orig_year ) {
 1478              		.loc 1 252 14 view .LVU346
 1479 0174 DDF804B0 		ldr	fp, [sp, #4]
 1480 0178 5646     		mov	r6, r10
 1481              	.LVL176:
 1482              	.L112:
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1483              		.loc 1 266 5 is_stmt 1 view .LVU347
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1484              		.loc 1 266 34 is_stmt 0 view .LVU348
 1485 017a 40F26C73 		movw	r3, #1900
 1486 017e FF18     		adds	r7, r7, r3
 1487              	.LVL177:
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1488              		.loc 1 266 34 view .LVU349
 1489 0180 49F10009 		adc	r9, r9, #0
 1490              	.LVL178:
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1491              		.loc 1 266 34 view .LVU350
 1492 0184 4FF4C872 		mov	r2, #400
 1493 0188 0023     		movs	r3, #0
 1494 018a 3846     		mov	r0, r7
 1495 018c 4946     		mov	r1, r9
 1496 018e FFF7FEFF 		bl	__aeabi_ldivmod
ARM GAS  /tmp/cc4CMdmh.s 			page 42


 1497              	.LVL179:
 1498 0192 1343     		orrs	r3, r3, r2
 1499 0194 41D0     		beq	.L124
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1500              		.loc 1 266 34 discriminator 2 view .LVU351
 1501 0196 17F0030F 		tst	r7, #3
 1502 019a 40F08480 		bne	.L125
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1503              		.loc 1 266 34 discriminator 3 view .LVU352
 1504 019e 6422     		movs	r2, #100
 1505 01a0 0023     		movs	r3, #0
 1506 01a2 3846     		mov	r0, r7
 1507 01a4 4946     		mov	r1, r9
 1508 01a6 FFF7FEFF 		bl	__aeabi_ldivmod
 1509              	.LVL180:
 1510 01aa 1343     		orrs	r3, r3, r2
 1511 01ac 7DD1     		bne	.L126
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1512              		.loc 1 266 34 view .LVU353
 1513 01ae 0023     		movs	r3, #0
 1514 01b0 34E0     		b	.L115
 1515              	.LVL181:
 1516              	.L121:
 261:timer64/time64.c ****             year--;
 1517              		.loc 1 261 36 view .LVU354
 1518 01b2 0122     		movs	r2, #1
 1519              	.L113:
 261:timer64/time64.c ****             year--;
 1520              		.loc 1 261 35 discriminator 8 view .LVU355
 1521 01b4 3E4B     		ldr	r3, .L131
 1522 01b6 33F91230 		ldrsh	r3, [r3, r2, lsl #1]
 261:timer64/time64.c ****             year--;
 1523              		.loc 1 261 18 discriminator 8 view .LVU356
 1524 01ba B8EB0308 		subs	r8, r8, r3
 1525              	.LVL182:
 261:timer64/time64.c ****             year--;
 1526              		.loc 1 261 18 discriminator 8 view .LVU357
 1527 01be 65EBE375 		sbc	r5, r5, r3, asr #31
 1528              	.LVL183:
 262:timer64/time64.c ****         } while( year >= orig_year );
 1529              		.loc 1 262 13 is_stmt 1 discriminator 8 view .LVU358
 262:timer64/time64.c ****         } while( year >= orig_year );
 1530              		.loc 1 262 17 is_stmt 0 discriminator 8 view .LVU359
 1531 01c2 621E     		subs	r2, r4, #1
 1532 01c4 4AF1FF33 		adc	r3, r10, #-1
 1533 01c8 1446     		mov	r4, r2
 1534              	.LVL184:
 262:timer64/time64.c ****         } while( year >= orig_year );
 1535              		.loc 1 262 17 discriminator 8 view .LVU360
 1536 01ca 9A46     		mov	r10, r3
 1537              	.LVL185:
 263:timer64/time64.c ****     }
 1538              		.loc 1 263 16 is_stmt 1 discriminator 8 view .LVU361
 263:timer64/time64.c ****     }
 1539              		.loc 1 263 9 is_stmt 0 discriminator 8 view .LVU362
 1540 01cc BA42     		cmp	r2, r7
 1541 01ce 73EB0903 		sbcs	r3, r3, r9
ARM GAS  /tmp/cc4CMdmh.s 			page 43


 1542              	.LVL186:
 263:timer64/time64.c ****     }
 1543              		.loc 1 263 9 discriminator 8 view .LVU363
 1544 01d2 1EDB     		blt	.L130
 1545              	.LVL187:
 1546              	.L114:
 260:timer64/time64.c ****             days -= length_of_year[IS_LEAP(year)];
 1547              		.loc 1 260 9 is_stmt 1 view .LVU364
 261:timer64/time64.c ****             year--;
 1548              		.loc 1 261 13 view .LVU365
 261:timer64/time64.c ****             year--;
 1549              		.loc 1 261 36 is_stmt 0 view .LVU366
 1550 01d4 40F26C76 		movw	r6, #1900
 1551 01d8 A619     		adds	r6, r4, r6
 1552 01da 4AF1000B 		adc	fp, r10, #0
 1553 01de 4FF4C872 		mov	r2, #400
 1554 01e2 0023     		movs	r3, #0
 1555 01e4 3046     		mov	r0, r6
 1556 01e6 5946     		mov	r1, fp
 1557 01e8 FFF7FEFF 		bl	__aeabi_ldivmod
 1558              	.LVL188:
 1559 01ec 1343     		orrs	r3, r3, r2
 1560 01ee E0D0     		beq	.L121
 261:timer64/time64.c ****             year--;
 1561              		.loc 1 261 36 discriminator 2 view .LVU367
 1562 01f0 16F0030F 		tst	r6, #3
 1563 01f4 09D1     		bne	.L122
 261:timer64/time64.c ****             year--;
 1564              		.loc 1 261 36 discriminator 3 view .LVU368
 1565 01f6 6422     		movs	r2, #100
 1566 01f8 0023     		movs	r3, #0
 1567 01fa 3046     		mov	r0, r6
 1568 01fc 5946     		mov	r1, fp
 1569 01fe FFF7FEFF 		bl	__aeabi_ldivmod
 1570              	.LVL189:
 1571 0202 1343     		orrs	r3, r3, r2
 1572 0204 03D1     		bne	.L123
 261:timer64/time64.c ****             year--;
 1573              		.loc 1 261 36 view .LVU369
 1574 0206 0022     		movs	r2, #0
 1575 0208 D4E7     		b	.L113
 1576              	.L122:
 1577 020a 0022     		movs	r2, #0
 1578 020c D2E7     		b	.L113
 1579              	.L123:
 1580 020e 0122     		movs	r2, #1
 1581 0210 D0E7     		b	.L113
 1582              	.LVL190:
 1583              	.L130:
 261:timer64/time64.c ****             year--;
 1584              		.loc 1 261 36 view .LVU370
 1585 0212 DDF804B0 		ldr	fp, [sp, #4]
 1586 0216 4646     		mov	r6, r8
 1587 0218 AFE7     		b	.L112
 1588              	.LVL191:
 1589              	.L124:
 266:timer64/time64.c ****     days += date->tm_mday - 1;
ARM GAS  /tmp/cc4CMdmh.s 			page 44


 1590              		.loc 1 266 34 view .LVU371
 1591 021a 0123     		movs	r3, #1
 1592              	.L115:
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1593              		.loc 1 266 58 discriminator 8 view .LVU372
 1594 021c DBF81020 		ldr	r2, [fp, #16]
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1595              		.loc 1 266 53 discriminator 8 view .LVU373
 1596 0220 03EB4303 		add	r3, r3, r3, lsl #1
 1597 0224 02EB8303 		add	r3, r2, r3, lsl #2
 1598 0228 224A     		ldr	r2, .L131+4
 1599 022a 32F91320 		ldrsh	r2, [r2, r3, lsl #1]
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1600              		.loc 1 266 10 discriminator 8 view .LVU374
 1601 022e 9319     		adds	r3, r2, r6
 1602 0230 45EBE275 		adc	r5, r5, r2, asr #31
 1603              	.LVL192:
 267:timer64/time64.c **** 
 1604              		.loc 1 267 5 is_stmt 1 discriminator 8 view .LVU375
 267:timer64/time64.c **** 
 1605              		.loc 1 267 17 is_stmt 0 discriminator 8 view .LVU376
 1606 0234 DBF80C20 		ldr	r2, [fp, #12]
 267:timer64/time64.c **** 
 1607              		.loc 1 267 27 discriminator 8 view .LVU377
 1608 0238 013A     		subs	r2, r2, #1
 267:timer64/time64.c **** 
 1609              		.loc 1 267 10 discriminator 8 view .LVU378
 1610 023a D318     		adds	r3, r2, r3
 1611              	.LVL193:
 267:timer64/time64.c **** 
 1612              		.loc 1 267 10 discriminator 8 view .LVU379
 1613 023c 45EBE275 		adc	r5, r5, r2, asr #31
 1614              	.LVL194:
 269:timer64/time64.c **** 
 1615              		.loc 1 269 5 is_stmt 1 discriminator 8 view .LVU380
 269:timer64/time64.c **** 
 1616              		.loc 1 269 13 is_stmt 0 discriminator 8 view .LVU381
 1617 0240 D818     		adds	r0, r3, r3
 1618 0242 45EB0502 		adc	r2, r5, r5
 1619 0246 C318     		adds	r3, r0, r3
 1620              	.LVL195:
 269:timer64/time64.c **** 
 1621              		.loc 1 269 13 discriminator 8 view .LVU382
 1622 0248 45EB0205 		adc	r5, r5, r2
 1623 024c 2A01     		lsls	r2, r5, #4
 1624 024e 42EA1372 		orr	r2, r2, r3, lsr #28
 1625 0252 1801     		lsls	r0, r3, #4
 1626 0254 C31A     		subs	r3, r0, r3
 1627 0256 62EB0505 		sbc	r5, r2, r5
 1628 025a 2A01     		lsls	r2, r5, #4
 1629 025c 42EA1372 		orr	r2, r2, r3, lsr #28
 1630 0260 1801     		lsls	r0, r3, #4
 1631 0262 C01A     		subs	r0, r0, r3
 1632 0264 62EB0505 		sbc	r5, r2, r5
 1633 0268 ED01     		lsls	r5, r5, #7
 1634 026a 45EA5065 		orr	r5, r5, r0, lsr #25
 1635 026e C001     		lsls	r0, r0, #7
ARM GAS  /tmp/cc4CMdmh.s 			page 45


 1636              	.LVL196:
 271:timer64/time64.c ****     seconds += date->tm_min * 60;
 1637              		.loc 1 271 5 is_stmt 1 discriminator 8 view .LVU383
 271:timer64/time64.c ****     seconds += date->tm_min * 60;
 1638              		.loc 1 271 20 is_stmt 0 discriminator 8 view .LVU384
 1639 0270 DBF80810 		ldr	r1, [fp, #8]
 271:timer64/time64.c ****     seconds += date->tm_min * 60;
 1640              		.loc 1 271 35 discriminator 8 view .LVU385
 1641 0274 4FF46163 		mov	r3, #3600
 1642 0278 03FB01F1 		mul	r1, r3, r1
 271:timer64/time64.c ****     seconds += date->tm_min * 60;
 1643              		.loc 1 271 13 discriminator 8 view .LVU386
 1644 027c 0818     		adds	r0, r1, r0
 1645              	.LVL197:
 271:timer64/time64.c ****     seconds += date->tm_min * 60;
 1646              		.loc 1 271 13 discriminator 8 view .LVU387
 1647 027e 45EBE175 		adc	r5, r5, r1, asr #31
 1648              	.LVL198:
 272:timer64/time64.c ****     seconds += date->tm_sec;
 1649              		.loc 1 272 5 is_stmt 1 discriminator 8 view .LVU388
 272:timer64/time64.c ****     seconds += date->tm_sec;
 1650              		.loc 1 272 20 is_stmt 0 discriminator 8 view .LVU389
 1651 0282 DBF80410 		ldr	r1, [fp, #4]
 272:timer64/time64.c ****     seconds += date->tm_sec;
 1652              		.loc 1 272 29 discriminator 8 view .LVU390
 1653 0286 C1EB0111 		rsb	r1, r1, r1, lsl #4
 1654 028a 8B00     		lsls	r3, r1, #2
 1655 028c 41F34071 		sbfx	r1, r1, #29, #1
 272:timer64/time64.c ****     seconds += date->tm_sec;
 1656              		.loc 1 272 13 discriminator 8 view .LVU391
 1657 0290 1818     		adds	r0, r3, r0
 1658              	.LVL199:
 272:timer64/time64.c ****     seconds += date->tm_sec;
 1659              		.loc 1 272 13 discriminator 8 view .LVU392
 1660 0292 41EB0505 		adc	r5, r1, r5
 1661              	.LVL200:
 273:timer64/time64.c **** 
 1662              		.loc 1 273 5 is_stmt 1 discriminator 8 view .LVU393
 273:timer64/time64.c **** 
 1663              		.loc 1 273 20 is_stmt 0 discriminator 8 view .LVU394
 1664 0296 DBF80010 		ldr	r1, [fp]
 273:timer64/time64.c **** 
 1665              		.loc 1 273 13 discriminator 8 view .LVU395
 1666 029a 0818     		adds	r0, r1, r0
 1667              	.LVL201:
 275:timer64/time64.c **** }
 1668              		.loc 1 275 5 is_stmt 1 discriminator 8 view .LVU396
 276:timer64/time64.c **** 
 1669              		.loc 1 276 1 is_stmt 0 discriminator 8 view .LVU397
 1670 029c 45EBE171 		adc	r1, r5, r1, asr #31
 1671              	.LVL202:
 276:timer64/time64.c **** 
 1672              		.loc 1 276 1 discriminator 8 view .LVU398
 1673 02a0 03B0     		add	sp, sp, #12
 1674              	.LCFI8:
 1675              		.cfi_remember_state
 1676              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cc4CMdmh.s 			page 46


 1677              		@ sp needed
 1678 02a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1679              	.LVL203:
 1680              	.L125:
 1681              	.LCFI9:
 1682              		.cfi_restore_state
 266:timer64/time64.c ****     days += date->tm_mday - 1;
 1683              		.loc 1 266 34 view .LVU399
 1684 02a6 0023     		movs	r3, #0
 1685 02a8 B8E7     		b	.L115
 1686              	.L126:
 1687 02aa 0123     		movs	r3, #1
 1688 02ac B6E7     		b	.L115
 1689              	.L132:
 1690 02ae 00BF     		.align	2
 1691              	.L131:
 1692 02b0 00000000 		.word	.LANCHOR0
 1693 02b4 00000000 		.word	.LANCHOR6
 1694              		.cfi_endproc
 1695              	.LFE6:
 1697              		.section	.text.copy_tm_to_TM64,"ax",%progbits
 1698              		.align	1
 1699              		.global	copy_tm_to_TM64
 1700              		.syntax unified
 1701              		.thumb
 1702              		.thumb_func
 1704              	copy_tm_to_TM64:
 1705              	.LVL204:
 1706              	.LFB10:
 395:timer64/time64.c ****     if( src == NULL ) {
 1707              		.loc 1 395 61 is_stmt 1 view -0
 1708              		.cfi_startproc
 1709              		@ args = 0, pretend = 0, frame = 0
 1710              		@ frame_needed = 0, uses_anonymous_args = 0
 395:timer64/time64.c ****     if( src == NULL ) {
 1711              		.loc 1 395 61 is_stmt 0 view .LVU401
 1712 0000 10B5     		push	{r4, lr}
 1713              	.LCFI10:
 1714              		.cfi_def_cfa_offset 8
 1715              		.cfi_offset 4, -8
 1716              		.cfi_offset 14, -4
 1717 0002 0B46     		mov	r3, r1
 396:timer64/time64.c ****         memset(dest, 0, sizeof(*dest));
 1718              		.loc 1 396 5 is_stmt 1 view .LVU402
 396:timer64/time64.c ****         memset(dest, 0, sizeof(*dest));
 1719              		.loc 1 396 7 is_stmt 0 view .LVU403
 1720 0004 B0B1     		cbz	r0, .L138
 1721 0006 0146     		mov	r1, r0
 1722              	.LVL205:
 421:timer64/time64.c **** #       endif
 1723              		.loc 1 421 13 is_stmt 1 view .LVU404
 1724 0008 0246     		mov	r2, r0
 1725 000a 1846     		mov	r0, r3
 1726              	.LVL206:
 421:timer64/time64.c **** #       endif
 1727              		.loc 1 421 13 is_stmt 0 view .LVU405
 1728 000c 2031     		adds	r1, r1, #32
ARM GAS  /tmp/cc4CMdmh.s 			page 47


 1729              	.LVL207:
 1730              	.L136:
 421:timer64/time64.c **** #       endif
 1731              		.loc 1 421 13 view .LVU406
 1732 000e 1468     		ldr	r4, [r2]	@ unaligned
 1733 0010 D2F804E0 		ldr	lr, [r2, #4]	@ unaligned
 1734 0014 D2F808C0 		ldr	ip, [r2, #8]	@ unaligned
 1735 0018 D368     		ldr	r3, [r2, #12]	@ unaligned
 1736 001a 0460     		str	r4, [r0]	@ unaligned
 1737 001c C0F804E0 		str	lr, [r0, #4]	@ unaligned
 1738 0020 C0F808C0 		str	ip, [r0, #8]	@ unaligned
 1739 0024 C360     		str	r3, [r0, #12]	@ unaligned
 1740 0026 1032     		adds	r2, r2, #16
 1741 0028 1030     		adds	r0, r0, #16
 1742 002a 8A42     		cmp	r2, r1
 1743 002c EFD1     		bne	.L136
 1744 002e 1368     		ldr	r3, [r2]	@ unaligned
 1745 0030 0360     		str	r3, [r0]	@ unaligned
 1746              	.LVL208:
 1747              	.L133:
 424:timer64/time64.c **** 
 1748              		.loc 1 424 1 view .LVU407
 1749 0032 10BD     		pop	{r4, pc}
 1750              	.LVL209:
 1751              	.L138:
 397:timer64/time64.c ****     }
 1752              		.loc 1 397 9 is_stmt 1 view .LVU408
 1753 0034 2422     		movs	r2, #36
 1754 0036 0021     		movs	r1, #0
 1755              	.LVL210:
 397:timer64/time64.c ****     }
 1756              		.loc 1 397 9 is_stmt 0 view .LVU409
 1757 0038 1846     		mov	r0, r3
 1758              	.LVL211:
 397:timer64/time64.c ****     }
 1759              		.loc 1 397 9 view .LVU410
 1760 003a FFF7FEFF 		bl	memset
 1761              	.LVL212:
 397:timer64/time64.c ****     }
 1762              		.loc 1 397 9 view .LVU411
 1763 003e F8E7     		b	.L133
 1764              		.cfi_endproc
 1765              	.LFE10:
 1767              		.section	.text.copy_TM64_to_tm,"ax",%progbits
 1768              		.align	1
 1769              		.global	copy_TM64_to_tm
 1770              		.syntax unified
 1771              		.thumb
 1772              		.thumb_func
 1774              	copy_TM64_to_tm:
 1775              	.LVL213:
 1776              	.LFB11:
 427:timer64/time64.c ****     if( src == NULL ) {
 1777              		.loc 1 427 61 is_stmt 1 view -0
 1778              		.cfi_startproc
 1779              		@ args = 0, pretend = 0, frame = 0
 1780              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc4CMdmh.s 			page 48


 427:timer64/time64.c ****     if( src == NULL ) {
 1781              		.loc 1 427 61 is_stmt 0 view .LVU413
 1782 0000 10B5     		push	{r4, lr}
 1783              	.LCFI11:
 1784              		.cfi_def_cfa_offset 8
 1785              		.cfi_offset 4, -8
 1786              		.cfi_offset 14, -4
 1787 0002 0B46     		mov	r3, r1
 428:timer64/time64.c ****         memset(dest, 0, sizeof(*dest));
 1788              		.loc 1 428 5 is_stmt 1 view .LVU414
 428:timer64/time64.c ****         memset(dest, 0, sizeof(*dest));
 1789              		.loc 1 428 7 is_stmt 0 view .LVU415
 1790 0004 B0B1     		cbz	r0, .L144
 1791 0006 0146     		mov	r1, r0
 1792              	.LVL214:
 453:timer64/time64.c **** #       endif
 1793              		.loc 1 453 13 is_stmt 1 view .LVU416
 1794 0008 0246     		mov	r2, r0
 1795 000a 1846     		mov	r0, r3
 1796              	.LVL215:
 453:timer64/time64.c **** #       endif
 1797              		.loc 1 453 13 is_stmt 0 view .LVU417
 1798 000c 2031     		adds	r1, r1, #32
 1799              	.LVL216:
 1800              	.L142:
 453:timer64/time64.c **** #       endif
 1801              		.loc 1 453 13 view .LVU418
 1802 000e 1468     		ldr	r4, [r2]	@ unaligned
 1803 0010 D2F804E0 		ldr	lr, [r2, #4]	@ unaligned
 1804 0014 D2F808C0 		ldr	ip, [r2, #8]	@ unaligned
 1805 0018 D368     		ldr	r3, [r2, #12]	@ unaligned
 1806 001a 0460     		str	r4, [r0]	@ unaligned
 1807 001c C0F804E0 		str	lr, [r0, #4]	@ unaligned
 1808 0020 C0F808C0 		str	ip, [r0, #8]	@ unaligned
 1809 0024 C360     		str	r3, [r0, #12]	@ unaligned
 1810 0026 1032     		adds	r2, r2, #16
 1811 0028 1030     		adds	r0, r0, #16
 1812 002a 8A42     		cmp	r2, r1
 1813 002c EFD1     		bne	.L142
 1814 002e 1368     		ldr	r3, [r2]	@ unaligned
 1815 0030 0360     		str	r3, [r0]	@ unaligned
 1816              	.LVL217:
 1817              	.L139:
 456:timer64/time64.c **** 
 1818              		.loc 1 456 1 view .LVU419
 1819 0032 10BD     		pop	{r4, pc}
 1820              	.LVL218:
 1821              	.L144:
 429:timer64/time64.c ****     }
 1822              		.loc 1 429 9 is_stmt 1 view .LVU420
 1823 0034 2422     		movs	r2, #36
 1824 0036 0021     		movs	r1, #0
 1825              	.LVL219:
 429:timer64/time64.c ****     }
 1826              		.loc 1 429 9 is_stmt 0 view .LVU421
 1827 0038 1846     		mov	r0, r3
 1828              	.LVL220:
ARM GAS  /tmp/cc4CMdmh.s 			page 49


 429:timer64/time64.c ****     }
 1829              		.loc 1 429 9 view .LVU422
 1830 003a FFF7FEFF 		bl	memset
 1831              	.LVL221:
 429:timer64/time64.c ****     }
 1832              		.loc 1 429 9 view .LVU423
 1833 003e F8E7     		b	.L139
 1834              		.cfi_endproc
 1835              	.LFE11:
 1837              		.section	.rodata.fake_localtime_r.str1.4,"aMS",%progbits,1
 1838              		.align	2
 1839              	.LC19:
 1840 0000 72657375 		.ascii	"result != NULL\000"
 1840      6C742021 
 1840      3D204E55 
 1840      4C4C00
 1841              		.section	.text.fake_localtime_r,"ax",%progbits
 1842              		.align	1
 1843              		.global	fake_localtime_r
 1844              		.syntax unified
 1845              		.thumb
 1846              		.thumb_func
 1848              	fake_localtime_r:
 1849              	.LVL222:
 1850              	.LFB12:
 460:timer64/time64.c ****     const struct tm *static_result = localtime(time);
 1851              		.loc 1 460 69 is_stmt 1 view -0
 1852              		.cfi_startproc
 1853              		@ args = 0, pretend = 0, frame = 0
 1854              		@ frame_needed = 0, uses_anonymous_args = 0
 460:timer64/time64.c ****     const struct tm *static_result = localtime(time);
 1855              		.loc 1 460 69 is_stmt 0 view .LVU425
 1856 0000 38B5     		push	{r3, r4, r5, lr}
 1857              	.LCFI12:
 1858              		.cfi_def_cfa_offset 16
 1859              		.cfi_offset 3, -16
 1860              		.cfi_offset 4, -12
 1861              		.cfi_offset 5, -8
 1862              		.cfi_offset 14, -4
 1863 0002 0D46     		mov	r5, r1
 461:timer64/time64.c **** 
 1864              		.loc 1 461 5 is_stmt 1 view .LVU426
 461:timer64/time64.c **** 
 1865              		.loc 1 461 38 is_stmt 0 view .LVU427
 1866 0004 FFF7FEFF 		bl	localtime
 1867              	.LVL223:
 463:timer64/time64.c **** 
 1868              		.loc 1 463 5 is_stmt 1 view .LVU428
 1869 0008 CDB1     		cbz	r5, .L151
 1870 000a 0446     		mov	r4, r0
 465:timer64/time64.c ****         memset(result, 0, sizeof(*result));
 1871              		.loc 1 465 5 view .LVU429
 465:timer64/time64.c ****         memset(result, 0, sizeof(*result));
 1872              		.loc 1 465 7 is_stmt 0 view .LVU430
 1873 000c F0B1     		cbz	r0, .L152
 470:timer64/time64.c ****         return result;
 1874              		.loc 1 470 9 is_stmt 1 view .LVU431
ARM GAS  /tmp/cc4CMdmh.s 			page 50


 1875 000e 0346     		mov	r3, r0
 1876 0010 2A46     		mov	r2, r5
 1877 0012 2034     		adds	r4, r4, #32
 1878              	.LVL224:
 1879              	.L149:
 470:timer64/time64.c ****         return result;
 1880              		.loc 1 470 9 is_stmt 0 view .LVU432
 1881 0014 D3F800E0 		ldr	lr, [r3]	@ unaligned
 1882 0018 D3F804C0 		ldr	ip, [r3, #4]	@ unaligned
 1883 001c 9868     		ldr	r0, [r3, #8]	@ unaligned
 1884 001e D968     		ldr	r1, [r3, #12]	@ unaligned
 1885 0020 C2F800E0 		str	lr, [r2]	@ unaligned
 1886 0024 C2F804C0 		str	ip, [r2, #4]	@ unaligned
 1887 0028 9060     		str	r0, [r2, #8]	@ unaligned
 1888 002a D160     		str	r1, [r2, #12]	@ unaligned
 1889 002c 1033     		adds	r3, r3, #16
 1890 002e 1032     		adds	r2, r2, #16
 1891 0030 A342     		cmp	r3, r4
 1892 0032 EFD1     		bne	.L149
 1893 0034 1B68     		ldr	r3, [r3]	@ unaligned
 1894 0036 1360     		str	r3, [r2]	@ unaligned
 471:timer64/time64.c ****     }
 1895              		.loc 1 471 9 is_stmt 1 view .LVU433
 471:timer64/time64.c ****     }
 1896              		.loc 1 471 16 is_stmt 0 view .LVU434
 1897 0038 2C46     		mov	r4, r5
 1898              	.LVL225:
 1899              	.L145:
 473:timer64/time64.c **** 
 1900              		.loc 1 473 1 view .LVU435
 1901 003a 2046     		mov	r0, r4
 1902 003c 38BD     		pop	{r3, r4, r5, pc}
 1903              	.LVL226:
 1904              	.L151:
 463:timer64/time64.c **** 
 1905              		.loc 1 463 5 discriminator 1 view .LVU436
 1906 003e 064B     		ldr	r3, .L153
 1907 0040 064A     		ldr	r2, .L153+4
 1908 0042 40F2CF11 		movw	r1, #463
 1909 0046 0648     		ldr	r0, .L153+8
 1910              	.LVL227:
 463:timer64/time64.c **** 
 1911              		.loc 1 463 5 discriminator 1 view .LVU437
 1912 0048 FFF7FEFF 		bl	__assert_func
 1913              	.LVL228:
 1914              	.L152:
 466:timer64/time64.c ****         return NULL;
 1915              		.loc 1 466 9 is_stmt 1 view .LVU438
 1916 004c 2422     		movs	r2, #36
 1917 004e 0021     		movs	r1, #0
 1918 0050 2846     		mov	r0, r5
 1919              	.LVL229:
 466:timer64/time64.c ****         return NULL;
 1920              		.loc 1 466 9 is_stmt 0 view .LVU439
 1921 0052 FFF7FEFF 		bl	memset
 1922              	.LVL230:
 467:timer64/time64.c ****     }
ARM GAS  /tmp/cc4CMdmh.s 			page 51


 1923              		.loc 1 467 9 is_stmt 1 view .LVU440
 467:timer64/time64.c ****     }
 1924              		.loc 1 467 16 is_stmt 0 view .LVU441
 1925 0056 F0E7     		b	.L145
 1926              	.L154:
 1927              		.align	2
 1928              	.L153:
 1929 0058 00000000 		.word	.LC19
 1930 005c 00000000 		.word	.LANCHOR7
 1931 0060 10000000 		.word	.LC1
 1932              		.cfi_endproc
 1933              	.LFE12:
 1935              		.section	.text.fake_gmtime_r,"ax",%progbits
 1936              		.align	1
 1937              		.global	fake_gmtime_r
 1938              		.syntax unified
 1939              		.thumb
 1940              		.thumb_func
 1942              	fake_gmtime_r:
 1943              	.LVL231:
 1944              	.LFB13:
 477:timer64/time64.c ****     const struct tm *static_result = gmtime(time);
 1945              		.loc 1 477 66 is_stmt 1 view -0
 1946              		.cfi_startproc
 1947              		@ args = 0, pretend = 0, frame = 0
 1948              		@ frame_needed = 0, uses_anonymous_args = 0
 477:timer64/time64.c ****     const struct tm *static_result = gmtime(time);
 1949              		.loc 1 477 66 is_stmt 0 view .LVU443
 1950 0000 38B5     		push	{r3, r4, r5, lr}
 1951              	.LCFI13:
 1952              		.cfi_def_cfa_offset 16
 1953              		.cfi_offset 3, -16
 1954              		.cfi_offset 4, -12
 1955              		.cfi_offset 5, -8
 1956              		.cfi_offset 14, -4
 1957 0002 0D46     		mov	r5, r1
 478:timer64/time64.c **** 
 1958              		.loc 1 478 5 is_stmt 1 view .LVU444
 478:timer64/time64.c **** 
 1959              		.loc 1 478 38 is_stmt 0 view .LVU445
 1960 0004 FFF7FEFF 		bl	gmtime
 1961              	.LVL232:
 480:timer64/time64.c **** 
 1962              		.loc 1 480 5 is_stmt 1 view .LVU446
 1963 0008 CDB1     		cbz	r5, .L161
 1964 000a 0446     		mov	r4, r0
 482:timer64/time64.c ****         memset(result, 0, sizeof(*result));
 1965              		.loc 1 482 5 view .LVU447
 482:timer64/time64.c ****         memset(result, 0, sizeof(*result));
 1966              		.loc 1 482 7 is_stmt 0 view .LVU448
 1967 000c F0B1     		cbz	r0, .L162
 487:timer64/time64.c ****         return result;
 1968              		.loc 1 487 9 is_stmt 1 view .LVU449
 1969 000e 0346     		mov	r3, r0
 1970 0010 2A46     		mov	r2, r5
 1971 0012 2034     		adds	r4, r4, #32
 1972              	.LVL233:
ARM GAS  /tmp/cc4CMdmh.s 			page 52


 1973              	.L159:
 487:timer64/time64.c ****         return result;
 1974              		.loc 1 487 9 is_stmt 0 view .LVU450
 1975 0014 D3F800E0 		ldr	lr, [r3]	@ unaligned
 1976 0018 D3F804C0 		ldr	ip, [r3, #4]	@ unaligned
 1977 001c 9868     		ldr	r0, [r3, #8]	@ unaligned
 1978 001e D968     		ldr	r1, [r3, #12]	@ unaligned
 1979 0020 C2F800E0 		str	lr, [r2]	@ unaligned
 1980 0024 C2F804C0 		str	ip, [r2, #4]	@ unaligned
 1981 0028 9060     		str	r0, [r2, #8]	@ unaligned
 1982 002a D160     		str	r1, [r2, #12]	@ unaligned
 1983 002c 1033     		adds	r3, r3, #16
 1984 002e 1032     		adds	r2, r2, #16
 1985 0030 A342     		cmp	r3, r4
 1986 0032 EFD1     		bne	.L159
 1987 0034 1B68     		ldr	r3, [r3]	@ unaligned
 1988 0036 1360     		str	r3, [r2]	@ unaligned
 488:timer64/time64.c ****     }
 1989              		.loc 1 488 9 is_stmt 1 view .LVU451
 488:timer64/time64.c ****     }
 1990              		.loc 1 488 16 is_stmt 0 view .LVU452
 1991 0038 2C46     		mov	r4, r5
 1992              	.LVL234:
 1993              	.L155:
 490:timer64/time64.c **** 
 1994              		.loc 1 490 1 view .LVU453
 1995 003a 2046     		mov	r0, r4
 1996 003c 38BD     		pop	{r3, r4, r5, pc}
 1997              	.LVL235:
 1998              	.L161:
 480:timer64/time64.c **** 
 1999              		.loc 1 480 5 discriminator 1 view .LVU454
 2000 003e 064B     		ldr	r3, .L163
 2001 0040 064A     		ldr	r2, .L163+4
 2002 0042 4FF4F071 		mov	r1, #480
 2003 0046 0648     		ldr	r0, .L163+8
 2004              	.LVL236:
 480:timer64/time64.c **** 
 2005              		.loc 1 480 5 discriminator 1 view .LVU455
 2006 0048 FFF7FEFF 		bl	__assert_func
 2007              	.LVL237:
 2008              	.L162:
 483:timer64/time64.c ****         return NULL;
 2009              		.loc 1 483 9 is_stmt 1 view .LVU456
 2010 004c 2422     		movs	r2, #36
 2011 004e 0021     		movs	r1, #0
 2012 0050 2846     		mov	r0, r5
 2013              	.LVL238:
 483:timer64/time64.c ****         return NULL;
 2014              		.loc 1 483 9 is_stmt 0 view .LVU457
 2015 0052 FFF7FEFF 		bl	memset
 2016              	.LVL239:
 484:timer64/time64.c ****     }
 2017              		.loc 1 484 9 is_stmt 1 view .LVU458
 484:timer64/time64.c ****     }
 2018              		.loc 1 484 16 is_stmt 0 view .LVU459
 2019 0056 F0E7     		b	.L155
ARM GAS  /tmp/cc4CMdmh.s 			page 53


 2020              	.L164:
 2021              		.align	2
 2022              	.L163:
 2023 0058 00000000 		.word	.LC19
 2024 005c 00000000 		.word	.LANCHOR8
 2025 0060 10000000 		.word	.LC1
 2026              		.cfi_endproc
 2027              	.LFE13:
 2029              		.section	.text.mktime64,"ax",%progbits
 2030              		.align	1
 2031              		.global	mktime64
 2032              		.syntax unified
 2033              		.thumb
 2034              		.thumb_func
 2036              	mktime64:
 2037              	.LVL240:
 2038              	.LFB15:
 516:timer64/time64.c **** 
 517:timer64/time64.c **** 
 518:timer64/time64.c **** Time64_T mktime64(struct TM *input_date) 
 519:timer64/time64.c **** {
 2039              		.loc 1 519 1 is_stmt 1 view -0
 2040              		.cfi_startproc
 2041              		@ args = 0, pretend = 0, frame = 72
 2042              		@ frame_needed = 0, uses_anonymous_args = 0
 2043              		.loc 1 519 1 is_stmt 0 view .LVU461
 2044 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2045              	.LCFI14:
 2046              		.cfi_def_cfa_offset 24
 2047              		.cfi_offset 4, -24
 2048              		.cfi_offset 5, -20
 2049              		.cfi_offset 6, -16
 2050              		.cfi_offset 7, -12
 2051              		.cfi_offset 8, -8
 2052              		.cfi_offset 14, -4
 2053 0004 92B0     		sub	sp, sp, #72
 2054              	.LCFI15:
 2055              		.cfi_def_cfa_offset 96
 2056 0006 0546     		mov	r5, r0
 520:timer64/time64.c ****     struct tm safe_date;
 2057              		.loc 1 520 5 is_stmt 1 view .LVU462
 521:timer64/time64.c ****     struct TM date;
 2058              		.loc 1 521 5 view .LVU463
 522:timer64/time64.c ****     Time64_T  time;
 2059              		.loc 1 522 5 view .LVU464
 523:timer64/time64.c ****     Year      year = input_date->tm_year + 1900;
 2060              		.loc 1 523 5 view .LVU465
 2061              		.loc 1 523 32 is_stmt 0 view .LVU466
 2062 0008 4769     		ldr	r7, [r0, #20]
 2063              	.LVL241:
 524:timer64/time64.c **** 
 525:timer64/time64.c ****     if( date_in_safe_range(input_date, &SYSTEM_MKTIME_MIN, &SYSTEM_MKTIME_MAX) )
 2064              		.loc 1 525 5 is_stmt 1 view .LVU467
 2065              		.loc 1 525 9 is_stmt 0 view .LVU468
 2066 000a 244A     		ldr	r2, .L170
 2067 000c 2449     		ldr	r1, .L170+4
 2068 000e FFF7FEFF 		bl	date_in_safe_range
ARM GAS  /tmp/cc4CMdmh.s 			page 54


 2069              	.LVL242:
 2070              		.loc 1 525 7 view .LVU469
 2071 0012 A8BB     		cbnz	r0, .L169
 2072 0014 07F26C77 		addw	r7, r7, #1900
 2073              	.LVL243:
 2074              		.loc 1 525 7 view .LVU470
 2075 0018 4FEAE778 		asr	r8, r7, #31
 526:timer64/time64.c ****     {
 527:timer64/time64.c ****         copy_TM64_to_tm(input_date, &safe_date);
 528:timer64/time64.c ****         time = (Time64_T)mktime(&safe_date);
 529:timer64/time64.c **** 
 530:timer64/time64.c ****         /* Correct the possibly out of bound input date */
 531:timer64/time64.c ****         copy_tm_to_TM64(&safe_date, input_date);
 532:timer64/time64.c ****         return time;
 533:timer64/time64.c ****     }
 534:timer64/time64.c **** 
 535:timer64/time64.c ****     /* Have to make the year safe in date else it won't fit in safe_date */
 536:timer64/time64.c ****     date = *input_date;
 2076              		.loc 1 536 5 is_stmt 1 view .LVU471
 2077              		.loc 1 536 10 is_stmt 0 view .LVU472
 2078 001c EC46     		mov	ip, sp
 2079 001e AE46     		mov	lr, r5
 2080 0020 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2081 0024 ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2082 0028 BEE80F00 		ldmia	lr!, {r0, r1, r2, r3}
 2083 002c ACE80F00 		stmia	ip!, {r0, r1, r2, r3}
 2084 0030 DEF80030 		ldr	r3, [lr]
 2085 0034 CCF80030 		str	r3, [ip]
 537:timer64/time64.c ****     date.tm_year = safe_year(year) - 1900;
 2086              		.loc 1 537 5 is_stmt 1 view .LVU473
 2087              		.loc 1 537 20 is_stmt 0 view .LVU474
 2088 0038 3846     		mov	r0, r7
 2089 003a 4146     		mov	r1, r8
 2090 003c FFF7FEFF 		bl	safe_year
 2091              	.LVL244:
 2092              		.loc 1 537 36 view .LVU475
 2093 0040 A0F26C70 		subw	r0, r0, #1900
 2094              		.loc 1 537 18 view .LVU476
 2095 0044 0590     		str	r0, [sp, #20]
 538:timer64/time64.c ****     copy_TM64_to_tm(&date, &safe_date);
 2096              		.loc 1 538 5 is_stmt 1 view .LVU477
 2097 0046 09A9     		add	r1, sp, #36
 2098 0048 6846     		mov	r0, sp
 2099 004a FFF7FEFF 		bl	copy_TM64_to_tm
 2100              	.LVL245:
 539:timer64/time64.c **** 
 540:timer64/time64.c ****     time = (Time64_T)mktime(&safe_date);
 2101              		.loc 1 540 5 view .LVU478
 2102              		.loc 1 540 22 is_stmt 0 view .LVU479
 2103 004e 09A8     		add	r0, sp, #36
 2104 0050 FFF7FEFF 		bl	mktime
 2105              	.LVL246:
 2106 0054 0446     		mov	r4, r0
 2107 0056 0E46     		mov	r6, r1
 2108              	.LVL247:
 541:timer64/time64.c **** 
 542:timer64/time64.c ****     /* Correct the user's possibly out of bound input date */
ARM GAS  /tmp/cc4CMdmh.s 			page 55


 543:timer64/time64.c ****     copy_tm_to_TM64(&safe_date, input_date);
 2109              		.loc 1 543 5 is_stmt 1 view .LVU480
 2110 0058 2946     		mov	r1, r5
 2111              	.LVL248:
 2112              		.loc 1 543 5 is_stmt 0 view .LVU481
 2113 005a 09A8     		add	r0, sp, #36
 2114              	.LVL249:
 2115              		.loc 1 543 5 view .LVU482
 2116 005c FFF7FEFF 		bl	copy_tm_to_TM64
 2117              	.LVL250:
 544:timer64/time64.c **** 
 545:timer64/time64.c ****     time += seconds_between_years(year, (Year)(safe_date.tm_year + 1900));
 2118              		.loc 1 545 5 is_stmt 1 view .LVU483
 2119              		.loc 1 545 57 is_stmt 0 view .LVU484
 2120 0060 0E9A     		ldr	r2, [sp, #56]
 2121              		.loc 1 545 66 view .LVU485
 2122 0062 02F26C72 		addw	r2, r2, #1900
 2123              		.loc 1 545 13 view .LVU486
 2124 0066 D317     		asrs	r3, r2, #31
 2125 0068 3846     		mov	r0, r7
 2126 006a 4146     		mov	r1, r8
 2127 006c FFF7FEFF 		bl	seconds_between_years
 2128              	.LVL251:
 2129              		.loc 1 545 10 view .LVU487
 2130 0070 2418     		adds	r4, r4, r0
 2131              	.LVL252:
 2132              		.loc 1 545 10 view .LVU488
 2133 0072 46EB0106 		adc	r6, r6, r1
 2134              	.LVL253:
 546:timer64/time64.c **** 
 547:timer64/time64.c ****     return time;
 2135              		.loc 1 547 5 is_stmt 1 view .LVU489
 2136              	.L165:
 548:timer64/time64.c **** }
 2137              		.loc 1 548 1 is_stmt 0 view .LVU490
 2138 0076 2046     		mov	r0, r4
 2139 0078 3146     		mov	r1, r6
 2140 007a 12B0     		add	sp, sp, #72
 2141              	.LCFI16:
 2142              		.cfi_remember_state
 2143              		.cfi_def_cfa_offset 24
 2144              		@ sp needed
 2145 007c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2146              	.LVL254:
 2147              	.L169:
 2148              	.LCFI17:
 2149              		.cfi_restore_state
 527:timer64/time64.c ****         time = (Time64_T)mktime(&safe_date);
 2150              		.loc 1 527 9 is_stmt 1 view .LVU491
 2151 0080 09A9     		add	r1, sp, #36
 2152 0082 2846     		mov	r0, r5
 2153 0084 FFF7FEFF 		bl	copy_TM64_to_tm
 2154              	.LVL255:
 528:timer64/time64.c **** 
 2155              		.loc 1 528 9 view .LVU492
 528:timer64/time64.c **** 
 2156              		.loc 1 528 26 is_stmt 0 view .LVU493
ARM GAS  /tmp/cc4CMdmh.s 			page 56


 2157 0088 09A8     		add	r0, sp, #36
 2158 008a FFF7FEFF 		bl	mktime
 2159              	.LVL256:
 2160 008e 0446     		mov	r4, r0
 2161 0090 0E46     		mov	r6, r1
 2162              	.LVL257:
 531:timer64/time64.c ****         return time;
 2163              		.loc 1 531 9 is_stmt 1 view .LVU494
 2164 0092 2946     		mov	r1, r5
 2165              	.LVL258:
 531:timer64/time64.c ****         return time;
 2166              		.loc 1 531 9 is_stmt 0 view .LVU495
 2167 0094 09A8     		add	r0, sp, #36
 2168              	.LVL259:
 531:timer64/time64.c ****         return time;
 2169              		.loc 1 531 9 view .LVU496
 2170 0096 FFF7FEFF 		bl	copy_tm_to_TM64
 2171              	.LVL260:
 532:timer64/time64.c ****     }
 2172              		.loc 1 532 9 is_stmt 1 view .LVU497
 532:timer64/time64.c ****     }
 2173              		.loc 1 532 16 is_stmt 0 view .LVU498
 2174 009a ECE7     		b	.L165
 2175              	.L171:
 2176              		.align	2
 2177              	.L170:
 2178 009c 00000000 		.word	.LANCHOR9
 2179 00a0 00000000 		.word	.LANCHOR10
 2180              		.cfi_endproc
 2181              	.LFE15:
 2183              		.section	.text.timelocal64,"ax",%progbits
 2184              		.align	1
 2185              		.global	timelocal64
 2186              		.syntax unified
 2187              		.thumb
 2188              		.thumb_func
 2190              	timelocal64:
 2191              	.LVL261:
 2192              	.LFB16:
 549:timer64/time64.c **** 
 550:timer64/time64.c **** 
 551:timer64/time64.c **** /* Because I think mktime() is a crappy name */
 552:timer64/time64.c **** Time64_T timelocal64(struct TM *date) {
 2193              		.loc 1 552 39 is_stmt 1 view -0
 2194              		.cfi_startproc
 2195              		@ args = 0, pretend = 0, frame = 0
 2196              		@ frame_needed = 0, uses_anonymous_args = 0
 2197              		.loc 1 552 39 is_stmt 0 view .LVU500
 2198 0000 08B5     		push	{r3, lr}
 2199              	.LCFI18:
 2200              		.cfi_def_cfa_offset 8
 2201              		.cfi_offset 3, -8
 2202              		.cfi_offset 14, -4
 553:timer64/time64.c ****     return mktime64(date);
 2203              		.loc 1 553 5 is_stmt 1 view .LVU501
 2204              		.loc 1 553 12 is_stmt 0 view .LVU502
 2205 0002 FFF7FEFF 		bl	mktime64
ARM GAS  /tmp/cc4CMdmh.s 			page 57


 2206              	.LVL262:
 554:timer64/time64.c **** }
 2207              		.loc 1 554 1 view .LVU503
 2208 0006 08BD     		pop	{r3, pc}
 2209              		.cfi_endproc
 2210              	.LFE16:
 2212              		.section	.rodata.gmtime64_r.str1.4,"aMS",%progbits,1
 2213              		.align	2
 2214              	.LC20:
 2215 0000 7020213D 		.ascii	"p != NULL\000"
 2215      204E554C 
 2215      4C00
 2216 000a 0000     		.align	2
 2217              	.LC21:
 2218 000c 63686563 		.ascii	"check_tm(p)\000"
 2218      6B5F746D 
 2218      28702900 
 2219              		.section	.text.gmtime64_r,"ax",%progbits
 2220              		.align	1
 2221              		.global	gmtime64_r
 2222              		.syntax unified
 2223              		.thumb
 2224              		.thumb_func
 2226              	gmtime64_r:
 2227              	.LVL263:
 2228              	.LFB17:
 555:timer64/time64.c **** 
 556:timer64/time64.c **** 
 557:timer64/time64.c **** struct TM *gmtime64_r (const Time64_T *in_time, struct TM *p)
 558:timer64/time64.c **** {
 2229              		.loc 1 558 1 is_stmt 1 view -0
 2230              		.cfi_startproc
 2231              		@ args = 0, pretend = 0, frame = 16
 2232              		@ frame_needed = 0, uses_anonymous_args = 0
 2233              		.loc 1 558 1 is_stmt 0 view .LVU505
 2234 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 2235              	.LCFI19:
 2236              		.cfi_def_cfa_offset 36
 2237              		.cfi_offset 4, -36
 2238              		.cfi_offset 5, -32
 2239              		.cfi_offset 6, -28
 2240              		.cfi_offset 7, -24
 2241              		.cfi_offset 8, -20
 2242              		.cfi_offset 9, -16
 2243              		.cfi_offset 10, -12
 2244              		.cfi_offset 11, -8
 2245              		.cfi_offset 14, -4
 2246 0004 85B0     		sub	sp, sp, #20
 2247              	.LCFI20:
 2248              		.cfi_def_cfa_offset 56
 559:timer64/time64.c ****     int v_tm_sec, v_tm_min, v_tm_hour, v_tm_mon, v_tm_wday;
 2249              		.loc 1 559 5 is_stmt 1 view .LVU506
 560:timer64/time64.c ****     Time64_T v_tm_tday;
 2250              		.loc 1 560 5 view .LVU507
 561:timer64/time64.c ****     int leap;
 2251              		.loc 1 561 5 view .LVU508
 562:timer64/time64.c ****     Time64_T m;
ARM GAS  /tmp/cc4CMdmh.s 			page 58


 2252              		.loc 1 562 5 view .LVU509
 563:timer64/time64.c ****     Time64_T time = *in_time;
 2253              		.loc 1 563 5 view .LVU510
 2254              		.loc 1 563 14 is_stmt 0 view .LVU511
 2255 0006 D0E90067 		ldrd	r6, [r0]
 2256              	.LVL264:
 564:timer64/time64.c ****     Year year = 70;
 2257              		.loc 1 564 5 is_stmt 1 view .LVU512
 565:timer64/time64.c ****     int cycles = 0;
 2258              		.loc 1 565 5 view .LVU513
 566:timer64/time64.c **** 
 567:timer64/time64.c ****     assert(p != NULL);
 2259              		.loc 1 567 5 view .LVU514
 2260 000a 0029     		cmp	r1, #0
 2261 000c 00F09680 		beq	.L213
 2262 0010 8846     		mov	r8, r1
 568:timer64/time64.c **** 
 569:timer64/time64.c ****     /* Use the system gmtime() if time_t is small enough */
 570:timer64/time64.c ****     if( SHOULD_USE_SYSTEM_GMTIME(*in_time) ) {
 2263              		.loc 1 570 5 view .LVU515
 571:timer64/time64.c ****         time_t safe_time = (time_t)*in_time;
 572:timer64/time64.c ****         struct tm safe_date;
 573:timer64/time64.c ****         GMTIME_R(&safe_time, &safe_date);
 574:timer64/time64.c **** 
 575:timer64/time64.c ****         copy_tm_to_TM64(&safe_date, p);
 576:timer64/time64.c ****         assert(check_tm(p));
 577:timer64/time64.c **** 
 578:timer64/time64.c ****         return p;
 579:timer64/time64.c ****     }
 580:timer64/time64.c **** 
 581:timer64/time64.c **** #ifdef HAS_TM_TM_GMTOFF
 582:timer64/time64.c ****     p->tm_gmtoff = 0;
 583:timer64/time64.c **** #endif
 584:timer64/time64.c ****     p->tm_isdst  = 0;
 2264              		.loc 1 584 5 view .LVU516
 2265              		.loc 1 584 18 is_stmt 0 view .LVU517
 2266 0012 0023     		movs	r3, #0
 2267 0014 0B62     		str	r3, [r1, #32]
 585:timer64/time64.c **** 
 586:timer64/time64.c **** #ifdef HAS_TM_TM_ZONE
 587:timer64/time64.c ****     p->tm_zone   = "UTC";
 588:timer64/time64.c **** #endif
 589:timer64/time64.c **** 
 590:timer64/time64.c ****     v_tm_sec =  (int)(time % 60);
 2268              		.loc 1 590 5 is_stmt 1 view .LVU518
 2269              		.loc 1 590 28 is_stmt 0 view .LVU519
 2270 0016 3C22     		movs	r2, #60
 2271 0018 0023     		movs	r3, #0
 2272 001a 3046     		mov	r0, r6
 2273              	.LVL265:
 2274              		.loc 1 590 28 view .LVU520
 2275 001c 3946     		mov	r1, r7
 2276              	.LVL266:
 2277              		.loc 1 590 28 view .LVU521
 2278 001e FFF7FEFF 		bl	__aeabi_ldivmod
 2279              	.LVL267:
 2280 0022 1546     		mov	r5, r2
ARM GAS  /tmp/cc4CMdmh.s 			page 59


 2281              		.loc 1 590 14 view .LVU522
 2282 0024 0392     		str	r2, [sp, #12]
 2283              	.LVL268:
 591:timer64/time64.c ****     time /= 60;
 2284              		.loc 1 591 5 is_stmt 1 view .LVU523
 2285              		.loc 1 591 10 is_stmt 0 view .LVU524
 2286 0026 3C22     		movs	r2, #60
 2287              	.LVL269:
 2288              		.loc 1 591 10 view .LVU525
 2289 0028 0023     		movs	r3, #0
 2290 002a 3046     		mov	r0, r6
 2291 002c 3946     		mov	r1, r7
 2292 002e FFF7FEFF 		bl	__aeabi_ldivmod
 2293              	.LVL270:
 2294 0032 0646     		mov	r6, r0
 2295              	.LVL271:
 2296              		.loc 1 591 10 view .LVU526
 2297 0034 0C46     		mov	r4, r1
 2298              	.LVL272:
 592:timer64/time64.c ****     v_tm_min =  (int)(time % 60);
 2299              		.loc 1 592 5 is_stmt 1 view .LVU527
 2300              		.loc 1 592 28 is_stmt 0 view .LVU528
 2301 0036 3C22     		movs	r2, #60
 2302 0038 0023     		movs	r3, #0
 2303 003a FFF7FEFF 		bl	__aeabi_ldivmod
 2304              	.LVL273:
 2305              		.loc 1 592 28 view .LVU529
 2306 003e 9146     		mov	r9, r2
 2307              		.loc 1 592 14 view .LVU530
 2308 0040 9346     		mov	fp, r2
 2309              	.LVL274:
 593:timer64/time64.c ****     time /= 60;
 2310              		.loc 1 593 5 is_stmt 1 view .LVU531
 2311              		.loc 1 593 10 is_stmt 0 view .LVU532
 2312 0042 3C22     		movs	r2, #60
 2313              	.LVL275:
 2314              		.loc 1 593 10 view .LVU533
 2315 0044 0023     		movs	r3, #0
 2316 0046 3046     		mov	r0, r6
 2317 0048 2146     		mov	r1, r4
 2318 004a FFF7FEFF 		bl	__aeabi_ldivmod
 2319              	.LVL276:
 2320 004e 0646     		mov	r6, r0
 2321              	.LVL277:
 2322              		.loc 1 593 10 view .LVU534
 2323 0050 0C46     		mov	r4, r1
 2324              	.LVL278:
 594:timer64/time64.c ****     v_tm_hour = (int)(time % 24);
 2325              		.loc 1 594 5 is_stmt 1 view .LVU535
 2326              		.loc 1 594 28 is_stmt 0 view .LVU536
 2327 0052 1822     		movs	r2, #24
 2328 0054 0023     		movs	r3, #0
 2329 0056 FFF7FEFF 		bl	__aeabi_ldivmod
 2330              	.LVL279:
 2331              		.loc 1 594 28 view .LVU537
 2332 005a 1746     		mov	r7, r2
 2333              		.loc 1 594 15 view .LVU538
ARM GAS  /tmp/cc4CMdmh.s 			page 60


 2334 005c 0192     		str	r2, [sp, #4]
 2335              	.LVL280:
 595:timer64/time64.c ****     time /= 24;
 2336              		.loc 1 595 5 is_stmt 1 view .LVU539
 2337              		.loc 1 595 10 is_stmt 0 view .LVU540
 2338 005e 1822     		movs	r2, #24
 2339              	.LVL281:
 2340              		.loc 1 595 10 view .LVU541
 2341 0060 0023     		movs	r3, #0
 2342 0062 3046     		mov	r0, r6
 2343 0064 2146     		mov	r1, r4
 2344 0066 FFF7FEFF 		bl	__aeabi_ldivmod
 2345              	.LVL282:
 2346 006a 0446     		mov	r4, r0
 2347              	.LVL283:
 2348              		.loc 1 595 10 view .LVU542
 2349 006c 0E46     		mov	r6, r1
 2350              	.LVL284:
 596:timer64/time64.c ****     v_tm_tday = time;
 2351              		.loc 1 596 5 is_stmt 1 view .LVU543
 597:timer64/time64.c **** 
 598:timer64/time64.c ****     WRAP (v_tm_sec, v_tm_min, 60);
 2352              		.loc 1 598 5 view .LVU544
 2353 006e 002D     		cmp	r5, #0
 2354 0070 6BDB     		blt	.L214
 2355              	.LVL285:
 2356              	.L176:
 599:timer64/time64.c ****     WRAP (v_tm_min, v_tm_hour, 60);
 2357              		.loc 1 599 5 discriminator 4 view .LVU545
 2358 0072 BBF1000F 		cmp	fp, #0
 2359 0076 6EDB     		blt	.L215
 2360              	.LVL286:
 2361              	.L177:
 600:timer64/time64.c ****     WRAP (v_tm_hour, v_tm_tday, 24);
 2362              		.loc 1 600 5 discriminator 4 view .LVU546
 2363 0078 019B     		ldr	r3, [sp, #4]
 2364 007a 002B     		cmp	r3, #0
 2365 007c 70DB     		blt	.L216
 2366              	.LVL287:
 2367              	.L178:
 601:timer64/time64.c **** 
 602:timer64/time64.c ****     v_tm_wday = (int)((v_tm_tday + 4) % 7);
 2368              		.loc 1 602 5 discriminator 4 view .LVU547
 2369              		.loc 1 602 34 is_stmt 0 discriminator 4 view .LVU548
 2370 007e 201D     		adds	r0, r4, #4
 2371              		.loc 1 602 39 discriminator 4 view .LVU549
 2372 0080 4FF00702 		mov	r2, #7
 2373 0084 4FF00003 		mov	r3, #0
 2374 0088 46F10001 		adc	r1, r6, #0
 2375 008c FFF7FEFF 		bl	__aeabi_ldivmod
 2376              	.LVL288:
 2377              		.loc 1 602 15 discriminator 4 view .LVU550
 2378 0090 0292     		str	r2, [sp, #8]
 2379              	.LVL289:
 603:timer64/time64.c ****     if (v_tm_wday < 0)
 2380              		.loc 1 603 5 is_stmt 1 discriminator 4 view .LVU551
 2381              		.loc 1 603 8 is_stmt 0 discriminator 4 view .LVU552
ARM GAS  /tmp/cc4CMdmh.s 			page 61


 2382 0092 002A     		cmp	r2, #0
 2383 0094 6ADB     		blt	.L217
 2384              	.LVL290:
 2385              	.L179:
 604:timer64/time64.c ****         v_tm_wday += 7;
 605:timer64/time64.c ****     m = v_tm_tday;
 2386              		.loc 1 605 5 is_stmt 1 view .LVU553
 606:timer64/time64.c **** 
 607:timer64/time64.c ****     if (m >= CHEAT_DAYS) {
 2387              		.loc 1 607 5 view .LVU554
 2388              		.loc 1 607 8 is_stmt 0 view .LVU555
 2389 0096 43F23763 		movw	r3, #13879
 2390 009a 9C42     		cmp	r4, r3
 2391 009c 76F10003 		sbcs	r3, r6, #0
 2392 00a0 67DB     		blt	.L199
 608:timer64/time64.c ****         year = CHEAT_YEARS;
 2393              		.loc 1 608 9 is_stmt 1 view .LVU556
 2394              	.LVL291:
 609:timer64/time64.c ****         m -= CHEAT_DAYS;
 2395              		.loc 1 609 9 view .LVU557
 2396              		.loc 1 609 11 is_stmt 0 view .LVU558
 2397 00a2 C04B     		ldr	r3, .L223
 2398 00a4 E418     		adds	r4, r4, r3
 2399              	.LVL292:
 2400              		.loc 1 609 11 view .LVU559
 2401 00a6 66F10006 		sbc	r6, r6, #0
 2402              	.LVL293:
 608:timer64/time64.c ****         year = CHEAT_YEARS;
 2403              		.loc 1 608 14 view .LVU560
 2404 00aa 6C25     		movs	r5, #108
 2405 00ac 0027     		movs	r7, #0
 2406              	.LVL294:
 2407              	.L180:
 610:timer64/time64.c ****     }
 611:timer64/time64.c **** 
 612:timer64/time64.c ****     if (m >= 0) {
 2408              		.loc 1 612 5 is_stmt 1 view .LVU561
 2409              		.loc 1 612 8 is_stmt 0 view .LVU562
 2410 00ae 002E     		cmp	r6, #0
 2411 00b0 C0F2D580 		blt	.L181
 613:timer64/time64.c ****         /* Gregorian cycles, this is huge optimization for distant times */
 614:timer64/time64.c ****         cycles = (int)(m / (Time64_T) days_in_gregorian_cycle);
 2412              		.loc 1 614 9 is_stmt 1 view .LVU563
 2413              		.loc 1 614 26 is_stmt 0 view .LVU564
 2414 00b4 BC4A     		ldr	r2, .L223+4
 2415 00b6 0023     		movs	r3, #0
 2416 00b8 2046     		mov	r0, r4
 2417 00ba 3146     		mov	r1, r6
 2418 00bc FFF7FEFF 		bl	__aeabi_ldivmod
 2419              	.LVL295:
 2420              		.loc 1 614 16 view .LVU565
 2421 00c0 0146     		mov	r1, r0
 2422              	.LVL296:
 615:timer64/time64.c ****         if( cycles ) {
 2423              		.loc 1 615 9 is_stmt 1 view .LVU566
 2424              		.loc 1 615 11 is_stmt 0 view .LVU567
 2425 00c2 F8B1     		cbz	r0, .L182
ARM GAS  /tmp/cc4CMdmh.s 			page 62


 616:timer64/time64.c ****             m -= (cycles * (Time64_T) days_in_gregorian_cycle);
 2426              		.loc 1 616 13 is_stmt 1 view .LVU568
 2427              		.loc 1 616 26 is_stmt 0 view .LVU569
 2428 00c4 C217     		asrs	r2, r0, #31
 2429 00c6 DFF8E4C2 		ldr	ip, .L223+8
 2430 00ca 4342     		rsbs	r3, r0, #0
 2431 00cc 0CFB0233 		mla	r3, ip, r2, r3
 2432 00d0 A0FB0C0C 		umull	r0, ip, r0, ip
 2433              	.LVL297:
 2434              		.loc 1 616 26 view .LVU570
 2435 00d4 6344     		add	r3, r3, ip
 2436              		.loc 1 616 15 view .LVU571
 2437 00d6 0419     		adds	r4, r0, r4
 2438              		.loc 1 616 15 view .LVU572
 2439 00d8 43EB0606 		adc	r6, r3, r6
 2440              	.LVL298:
 617:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 2441              		.loc 1 617 13 is_stmt 1 view .LVU573
 2442              		.loc 1 617 29 is_stmt 0 view .LVU574
 2443 00dc 4B18     		adds	r3, r1, r1
 2444 00de 42EB0200 		adc	r0, r2, r2
 2445 00e2 5B18     		adds	r3, r3, r1
 2446 00e4 42EB0000 		adc	r0, r2, r0
 2447 00e8 C000     		lsls	r0, r0, #3
 2448 00ea 40EA5370 		orr	r0, r0, r3, lsr #29
 2449 00ee DB00     		lsls	r3, r3, #3
 2450 00f0 5B18     		adds	r3, r3, r1
 2451 00f2 42EB0002 		adc	r2, r2, r0
 2452 00f6 1201     		lsls	r2, r2, #4
 2453 00f8 42EA1372 		orr	r2, r2, r3, lsr #28
 2454 00fc 1B01     		lsls	r3, r3, #4
 2455              		.loc 1 617 18 view .LVU575
 2456 00fe 5D19     		adds	r5, r3, r5
 2457              	.LVL299:
 2458              		.loc 1 617 18 view .LVU576
 2459 0100 47EB0207 		adc	r7, r7, r2
 2460              	.LVL300:
 2461              	.L182:
 618:timer64/time64.c ****         }
 619:timer64/time64.c **** 
 620:timer64/time64.c ****         /* Years */
 621:timer64/time64.c ****         leap = IS_LEAP (year);
 2462              		.loc 1 621 9 is_stmt 1 view .LVU577
 2463              		.loc 1 621 16 is_stmt 0 view .LVU578
 2464 0104 40F26C79 		movw	r9, #1900
 2465 0108 15EB0909 		adds	r9, r5, r9
 2466 010c 47F1000A 		adc	r10, r7, #0
 2467 0110 4FF4C872 		mov	r2, #400
 2468 0114 0023     		movs	r3, #0
 2469 0116 4846     		mov	r0, r9
 2470 0118 5146     		mov	r1, r10
 2471              	.LVL301:
 2472              		.loc 1 621 16 view .LVU579
 2473 011a FFF7FEFF 		bl	__aeabi_ldivmod
 2474              	.LVL302:
 2475 011e 1343     		orrs	r3, r3, r2
 2476 0120 2AD0     		beq	.L200
ARM GAS  /tmp/cc4CMdmh.s 			page 63


 2477              		.loc 1 621 16 discriminator 2 view .LVU580
 2478 0122 19F0030F 		tst	r9, #3
 2479 0126 29D1     		bne	.L201
 2480              		.loc 1 621 16 discriminator 3 view .LVU581
 2481 0128 6422     		movs	r2, #100
 2482 012a 0023     		movs	r3, #0
 2483 012c 4846     		mov	r0, r9
 2484 012e 5146     		mov	r1, r10
 2485 0130 FFF7FEFF 		bl	__aeabi_ldivmod
 2486              	.LVL303:
 2487 0134 1343     		orrs	r3, r3, r2
 2488 0136 23D1     		bne	.L202
 2489              		.loc 1 621 16 view .LVU582
 2490 0138 0023     		movs	r3, #0
 2491 013a 26E0     		b	.L184
 2492              	.LVL304:
 2493              	.L213:
 567:timer64/time64.c **** 
 2494              		.loc 1 567 5 discriminator 1 view .LVU583
 2495 013c 9C4B     		ldr	r3, .L223+12
 2496 013e 9D4A     		ldr	r2, .L223+16
 2497 0140 40F23721 		movw	r1, #567
 2498              	.LVL305:
 567:timer64/time64.c **** 
 2499              		.loc 1 567 5 discriminator 1 view .LVU584
 2500 0144 9C48     		ldr	r0, .L223+20
 2501              	.LVL306:
 567:timer64/time64.c **** 
 2502              		.loc 1 567 5 discriminator 1 view .LVU585
 2503 0146 FFF7FEFF 		bl	__assert_func
 2504              	.LVL307:
 2505              	.L214:
 598:timer64/time64.c ****     WRAP (v_tm_min, v_tm_hour, 60);
 2506              		.loc 1 598 5 discriminator 1 view .LVU586
 2507 014a 09F1FF3B 		add	fp, r9, #-1
 2508              	.LVL308:
 598:timer64/time64.c ****     WRAP (v_tm_min, v_tm_hour, 60);
 2509              		.loc 1 598 5 discriminator 1 view .LVU587
 2510 014e 05F13C03 		add	r3, r5, #60
 2511 0152 0393     		str	r3, [sp, #12]
 2512 0154 8DE7     		b	.L176
 2513              	.LVL309:
 2514              	.L215:
 599:timer64/time64.c ****     WRAP (v_tm_hour, v_tm_tday, 24);
 2515              		.loc 1 599 5 discriminator 1 view .LVU588
 2516 0156 7B1E     		subs	r3, r7, #1
 2517 0158 0193     		str	r3, [sp, #4]
 2518              	.LVL310:
 599:timer64/time64.c ****     WRAP (v_tm_hour, v_tm_tday, 24);
 2519              		.loc 1 599 5 discriminator 1 view .LVU589
 2520 015a 0BF13C0B 		add	fp, fp, #60
 2521              	.LVL311:
 599:timer64/time64.c ****     WRAP (v_tm_hour, v_tm_tday, 24);
 2522              		.loc 1 599 5 discriminator 1 view .LVU590
 2523 015e 8BE7     		b	.L177
 2524              	.LVL312:
 2525              	.L216:
ARM GAS  /tmp/cc4CMdmh.s 			page 64


 600:timer64/time64.c **** 
 2526              		.loc 1 600 5 discriminator 1 view .LVU591
 2527 0160 013C     		subs	r4, r4, #1
 2528              	.LVL313:
 600:timer64/time64.c **** 
 2529              		.loc 1 600 5 discriminator 1 view .LVU592
 2530 0162 61F10006 		sbc	r6, r1, #0
 2531              	.LVL314:
 600:timer64/time64.c **** 
 2532              		.loc 1 600 5 discriminator 1 view .LVU593
 2533 0166 1833     		adds	r3, r3, #24
 2534              	.LVL315:
 600:timer64/time64.c **** 
 2535              		.loc 1 600 5 discriminator 1 view .LVU594
 2536 0168 0193     		str	r3, [sp, #4]
 2537              	.LVL316:
 600:timer64/time64.c **** 
 2538              		.loc 1 600 5 discriminator 1 view .LVU595
 2539 016a 88E7     		b	.L178
 2540              	.LVL317:
 2541              	.L217:
 604:timer64/time64.c ****     m = v_tm_tday;
 2542              		.loc 1 604 9 is_stmt 1 view .LVU596
 604:timer64/time64.c ****     m = v_tm_tday;
 2543              		.loc 1 604 19 is_stmt 0 view .LVU597
 2544 016c D31D     		adds	r3, r2, #7
 2545 016e 0293     		str	r3, [sp, #8]
 2546              	.LVL318:
 604:timer64/time64.c ****     m = v_tm_tday;
 2547              		.loc 1 604 19 view .LVU598
 2548 0170 91E7     		b	.L179
 2549              	.LVL319:
 2550              	.L199:
 564:timer64/time64.c ****     int cycles = 0;
 2551              		.loc 1 564 10 view .LVU599
 2552 0172 4625     		movs	r5, #70
 2553 0174 0027     		movs	r7, #0
 2554 0176 9AE7     		b	.L180
 2555              	.LVL320:
 2556              	.L200:
 2557              		.loc 1 621 16 view .LVU600
 2558 0178 0123     		movs	r3, #1
 2559 017a 06E0     		b	.L184
 2560              	.L201:
 2561 017c 0023     		movs	r3, #0
 2562 017e 04E0     		b	.L184
 2563              	.L202:
 2564 0180 0123     		movs	r3, #1
 2565              	.LVL321:
 622:timer64/time64.c ****         while (m >= (Time64_T) length_of_year[leap]) {
 2566              		.loc 1 622 9 is_stmt 1 view .LVU601
 2567              		.loc 1 622 15 is_stmt 0 view .LVU602
 2568 0182 02E0     		b	.L184
 2569              	.LVL322:
 2570              	.L203:
 623:timer64/time64.c ****             m -= (Time64_T) length_of_year[leap];
 624:timer64/time64.c ****             year++;
ARM GAS  /tmp/cc4CMdmh.s 			page 65


 625:timer64/time64.c ****             leap = IS_LEAP (year);
 2571              		.loc 1 625 20 view .LVU603
 2572 0184 0123     		movs	r3, #1
 2573              	.L185:
 2574              	.LVL323:
 624:timer64/time64.c ****             leap = IS_LEAP (year);
 2575              		.loc 1 624 17 discriminator 8 view .LVU604
 2576 0186 5546     		mov	r5, r10
 2577 0188 4F46     		mov	r7, r9
 2578              	.LVL324:
 2579              	.L184:
 622:timer64/time64.c ****         while (m >= (Time64_T) length_of_year[leap]) {
 2580              		.loc 1 622 15 is_stmt 1 view .LVU605
 622:timer64/time64.c ****         while (m >= (Time64_T) length_of_year[leap]) {
 2581              		.loc 1 622 46 is_stmt 0 view .LVU606
 2582 018a 8C4A     		ldr	r2, .L223+24
 2583 018c 32F91310 		ldrsh	r1, [r2, r3, lsl #1]
 622:timer64/time64.c ****         while (m >= (Time64_T) length_of_year[leap]) {
 2584              		.loc 1 622 21 view .LVU607
 2585 0190 C817     		asrs	r0, r1, #31
 2586 0192 0A46     		mov	r2, r1
 622:timer64/time64.c ****         while (m >= (Time64_T) length_of_year[leap]) {
 2587              		.loc 1 622 15 view .LVU608
 2588 0194 8C42     		cmp	r4, r1
 2589 0196 76EB0001 		sbcs	r1, r6, r0
 2590 019a 25DB     		blt	.L218
 623:timer64/time64.c ****             m -= (Time64_T) length_of_year[leap];
 2591              		.loc 1 623 13 is_stmt 1 view .LVU609
 623:timer64/time64.c ****             m -= (Time64_T) length_of_year[leap];
 2592              		.loc 1 623 15 is_stmt 0 view .LVU610
 2593 019c A41A     		subs	r4, r4, r2
 623:timer64/time64.c ****             m -= (Time64_T) length_of_year[leap];
 2594              		.loc 1 623 15 view .LVU611
 2595 019e 66EB0006 		sbc	r6, r6, r0
 2596              	.LVL325:
 624:timer64/time64.c ****             leap = IS_LEAP (year);
 2597              		.loc 1 624 13 is_stmt 1 view .LVU612
 624:timer64/time64.c ****             leap = IS_LEAP (year);
 2598              		.loc 1 624 17 is_stmt 0 view .LVU613
 2599 01a2 15F1010A 		adds	r10, r5, #1
 2600 01a6 47F10009 		adc	r9, r7, #0
 2601              	.LVL326:
 2602              		.loc 1 625 13 is_stmt 1 view .LVU614
 2603              		.loc 1 625 20 is_stmt 0 view .LVU615
 2604 01aa 40F26D73 		movw	r3, #1901
 2605              	.LVL327:
 2606              		.loc 1 625 20 view .LVU616
 2607 01ae ED18     		adds	r5, r5, r3
 2608 01b0 47F10007 		adc	r7, r7, #0
 2609 01b4 4FF4C872 		mov	r2, #400
 2610 01b8 0023     		movs	r3, #0
 2611 01ba 2846     		mov	r0, r5
 2612 01bc 3946     		mov	r1, r7
 2613 01be FFF7FEFF 		bl	__aeabi_ldivmod
 2614              	.LVL328:
 2615 01c2 1343     		orrs	r3, r3, r2
 2616 01c4 DED0     		beq	.L203
ARM GAS  /tmp/cc4CMdmh.s 			page 66


 2617              		.loc 1 625 20 discriminator 2 view .LVU617
 2618 01c6 15F0030F 		tst	r5, #3
 2619 01ca 09D1     		bne	.L204
 2620              		.loc 1 625 20 discriminator 3 view .LVU618
 2621 01cc 6422     		movs	r2, #100
 2622 01ce 0023     		movs	r3, #0
 2623 01d0 2846     		mov	r0, r5
 2624 01d2 3946     		mov	r1, r7
 2625 01d4 FFF7FEFF 		bl	__aeabi_ldivmod
 2626              	.LVL329:
 2627 01d8 1343     		orrs	r3, r3, r2
 2628 01da 03D1     		bne	.L205
 2629              		.loc 1 625 20 view .LVU619
 2630 01dc 0023     		movs	r3, #0
 2631 01de D2E7     		b	.L185
 2632              	.L204:
 2633 01e0 0023     		movs	r3, #0
 2634 01e2 D0E7     		b	.L185
 2635              	.L205:
 2636 01e4 0123     		movs	r3, #1
 2637 01e6 CEE7     		b	.L185
 2638              	.LVL330:
 2639              	.L218:
 626:timer64/time64.c ****         }
 627:timer64/time64.c **** 
 628:timer64/time64.c ****         /* Months */
 629:timer64/time64.c ****         v_tm_mon = 0;
 2640              		.loc 1 629 18 view .LVU620
 2641 01e8 0022     		movs	r2, #0
 2642 01ea 03E0     		b	.L187
 2643              	.LVL331:
 2644              	.L188:
 630:timer64/time64.c ****         while (m >= (Time64_T) days_in_month[leap][v_tm_mon]) {
 631:timer64/time64.c ****             m -= (Time64_T) days_in_month[leap][v_tm_mon];
 2645              		.loc 1 631 13 is_stmt 1 view .LVU621
 2646              		.loc 1 631 15 is_stmt 0 view .LVU622
 2647 01ec 241A     		subs	r4, r4, r0
 2648              		.loc 1 631 15 view .LVU623
 2649 01ee 66F10006 		sbc	r6, r6, #0
 2650              	.LVL332:
 632:timer64/time64.c ****             v_tm_mon++;
 2651              		.loc 1 632 13 is_stmt 1 view .LVU624
 2652              		.loc 1 632 21 is_stmt 0 view .LVU625
 2653 01f2 0132     		adds	r2, r2, #1
 2654              	.LVL333:
 2655              	.L187:
 630:timer64/time64.c ****         while (m >= (Time64_T) days_in_month[leap][v_tm_mon]) {
 2656              		.loc 1 630 15 is_stmt 1 view .LVU626
 630:timer64/time64.c ****         while (m >= (Time64_T) days_in_month[leap][v_tm_mon]) {
 2657              		.loc 1 630 51 is_stmt 0 view .LVU627
 2658 01f4 03EB4301 		add	r1, r3, r3, lsl #1
 2659 01f8 7148     		ldr	r0, .L223+28
 2660 01fa 00EB8101 		add	r1, r0, r1, lsl #2
 2661 01fe 895C     		ldrb	r1, [r1, r2]	@ zero_extendqisi2
 630:timer64/time64.c ****         while (m >= (Time64_T) days_in_month[leap][v_tm_mon]) {
 2662              		.loc 1 630 21 view .LVU628
 2663 0200 0846     		mov	r0, r1
ARM GAS  /tmp/cc4CMdmh.s 			page 67


 630:timer64/time64.c ****         while (m >= (Time64_T) days_in_month[leap][v_tm_mon]) {
 2664              		.loc 1 630 15 view .LVU629
 2665 0202 8C42     		cmp	r4, r1
 2666 0204 76F10001 		sbcs	r1, r6, #0
 2667 0208 F0DA     		bge	.L188
 2668              	.LVL334:
 2669              	.L189:
 633:timer64/time64.c ****         }
 634:timer64/time64.c ****     } else {
 635:timer64/time64.c ****         year--;
 636:timer64/time64.c **** 
 637:timer64/time64.c ****         /* Gregorian cycles */
 638:timer64/time64.c ****         cycles = (int)((m / (Time64_T) days_in_gregorian_cycle) + 1);
 639:timer64/time64.c ****         if( cycles ) {
 640:timer64/time64.c ****             m -= (cycles * (Time64_T) days_in_gregorian_cycle);
 641:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 642:timer64/time64.c ****         }
 643:timer64/time64.c **** 
 644:timer64/time64.c ****         /* Years */
 645:timer64/time64.c ****         leap = IS_LEAP (year);
 646:timer64/time64.c ****         while (m < (Time64_T) -length_of_year[leap]) {
 647:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 648:timer64/time64.c ****             year--;
 649:timer64/time64.c ****             leap = IS_LEAP (year);
 650:timer64/time64.c ****         }
 651:timer64/time64.c **** 
 652:timer64/time64.c ****         /* Months */
 653:timer64/time64.c ****         v_tm_mon = 11;
 654:timer64/time64.c ****         while (m < (Time64_T) -days_in_month[leap][v_tm_mon]) {
 655:timer64/time64.c ****             m += (Time64_T) days_in_month[leap][v_tm_mon];
 656:timer64/time64.c ****             v_tm_mon--;
 657:timer64/time64.c ****         }
 658:timer64/time64.c ****         m += (Time64_T) days_in_month[leap][v_tm_mon];
 659:timer64/time64.c ****     }
 660:timer64/time64.c **** 
 661:timer64/time64.c ****     p->tm_year = year;
 2670              		.loc 1 661 5 is_stmt 1 view .LVU630
 2671              		.loc 1 661 16 is_stmt 0 view .LVU631
 2672 020a C8F81450 		str	r5, [r8, #20]
 662:timer64/time64.c ****     if( p->tm_year != year ) {
 2673              		.loc 1 662 5 is_stmt 1 view .LVU632
 2674              		.loc 1 662 7 is_stmt 0 view .LVU633
 2675 020e B7EBE57F 		cmp	r7, r5, asr #31
 2676 0212 40F0B980 		bne	.L219
 663:timer64/time64.c **** #ifdef EOVERFLOW
 664:timer64/time64.c ****         errno = EOVERFLOW;
 665:timer64/time64.c **** #endif
 666:timer64/time64.c ****         return NULL;
 667:timer64/time64.c ****     }
 668:timer64/time64.c **** 
 669:timer64/time64.c ****     /* At this point m is less than a year so casting to an int is safe */
 670:timer64/time64.c ****     p->tm_mday = (int) m + 1;
 2677              		.loc 1 670 5 is_stmt 1 view .LVU634
 2678              		.loc 1 670 26 is_stmt 0 view .LVU635
 2679 0216 611C     		adds	r1, r4, #1
 2680              		.loc 1 670 16 view .LVU636
 2681 0218 C8F80C10 		str	r1, [r8, #12]
ARM GAS  /tmp/cc4CMdmh.s 			page 68


 671:timer64/time64.c ****     p->tm_yday = julian_days_by_month[leap][v_tm_mon] + (int)m;
 2682              		.loc 1 671 5 is_stmt 1 view .LVU637
 2683              		.loc 1 671 44 is_stmt 0 view .LVU638
 2684 021c 03EB4303 		add	r3, r3, r3, lsl #1
 2685              	.LVL335:
 2686              		.loc 1 671 44 view .LVU639
 2687 0220 02EB8303 		add	r3, r2, r3, lsl #2
 2688 0224 6749     		ldr	r1, .L223+32
 2689 0226 31F91330 		ldrsh	r3, [r1, r3, lsl #1]
 2690              		.loc 1 671 55 view .LVU640
 2691 022a 1C44     		add	r4, r4, r3
 2692              		.loc 1 671 16 view .LVU641
 2693 022c C8F81C40 		str	r4, [r8, #28]
 672:timer64/time64.c ****     p->tm_sec  = v_tm_sec;
 2694              		.loc 1 672 5 is_stmt 1 view .LVU642
 2695              		.loc 1 672 16 is_stmt 0 view .LVU643
 2696 0230 039B     		ldr	r3, [sp, #12]
 2697 0232 C8F80030 		str	r3, [r8]
 673:timer64/time64.c ****     p->tm_min  = v_tm_min;
 2698              		.loc 1 673 5 is_stmt 1 view .LVU644
 2699              		.loc 1 673 16 is_stmt 0 view .LVU645
 2700 0236 C8F804B0 		str	fp, [r8, #4]
 674:timer64/time64.c ****     p->tm_hour = v_tm_hour;
 2701              		.loc 1 674 5 is_stmt 1 view .LVU646
 2702              		.loc 1 674 16 is_stmt 0 view .LVU647
 2703 023a 019B     		ldr	r3, [sp, #4]
 2704 023c C8F80830 		str	r3, [r8, #8]
 675:timer64/time64.c ****     p->tm_mon  = v_tm_mon;
 2705              		.loc 1 675 5 is_stmt 1 view .LVU648
 2706              		.loc 1 675 16 is_stmt 0 view .LVU649
 2707 0240 C8F81020 		str	r2, [r8, #16]
 676:timer64/time64.c ****     p->tm_wday = v_tm_wday;
 2708              		.loc 1 676 5 is_stmt 1 view .LVU650
 2709              		.loc 1 676 16 is_stmt 0 view .LVU651
 2710 0244 029B     		ldr	r3, [sp, #8]
 2711 0246 C8F81830 		str	r3, [r8, #24]
 677:timer64/time64.c ****     
 678:timer64/time64.c ****     assert(check_tm(p));
 2712              		.loc 1 678 5 is_stmt 1 view .LVU652
 2713 024a 4046     		mov	r0, r8
 2714 024c FFF7FEFF 		bl	check_tm
 2715              	.LVL336:
 2716              		.loc 1 678 5 is_stmt 0 view .LVU653
 2717 0250 0028     		cmp	r0, #0
 2718 0252 00F0A080 		beq	.L220
 2719              	.LVL337:
 2720              	.L198:
 679:timer64/time64.c **** 
 680:timer64/time64.c ****     return p;
 681:timer64/time64.c **** }
 2721              		.loc 1 681 1 discriminator 1 view .LVU654
 2722 0256 4046     		mov	r0, r8
 2723 0258 05B0     		add	sp, sp, #20
 2724              	.LCFI21:
 2725              		.cfi_remember_state
 2726              		.cfi_def_cfa_offset 36
 2727              		@ sp needed
ARM GAS  /tmp/cc4CMdmh.s 			page 69


 2728 025a BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 2729              	.LVL338:
 2730              	.L181:
 2731              	.LCFI22:
 2732              		.cfi_restore_state
 635:timer64/time64.c **** 
 2733              		.loc 1 635 9 is_stmt 1 view .LVU655
 635:timer64/time64.c **** 
 2734              		.loc 1 635 13 is_stmt 0 view .LVU656
 2735 025e 013D     		subs	r5, r5, #1
 2736              	.LVL339:
 635:timer64/time64.c **** 
 2737              		.loc 1 635 13 view .LVU657
 2738 0260 47F1FF39 		adc	r9, r7, #-1
 2739 0264 4F46     		mov	r7, r9
 2740              	.LVL340:
 638:timer64/time64.c ****         if( cycles ) {
 2741              		.loc 1 638 9 is_stmt 1 view .LVU658
 638:timer64/time64.c ****         if( cycles ) {
 2742              		.loc 1 638 27 is_stmt 0 view .LVU659
 2743 0266 504A     		ldr	r2, .L223+4
 2744 0268 0023     		movs	r3, #0
 2745 026a 2046     		mov	r0, r4
 2746 026c 3146     		mov	r1, r6
 2747 026e FFF7FEFF 		bl	__aeabi_ldivmod
 2748              	.LVL341:
 639:timer64/time64.c ****             m -= (cycles * (Time64_T) days_in_gregorian_cycle);
 2749              		.loc 1 639 9 is_stmt 1 view .LVU660
 639:timer64/time64.c ****             m -= (cycles * (Time64_T) days_in_gregorian_cycle);
 2750              		.loc 1 639 11 is_stmt 0 view .LVU661
 2751 0272 0130     		adds	r0, r0, #1
 2752              	.LVL342:
 639:timer64/time64.c ****             m -= (cycles * (Time64_T) days_in_gregorian_cycle);
 2753              		.loc 1 639 11 view .LVU662
 2754 0274 1ED0     		beq	.L190
 640:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 2755              		.loc 1 640 13 is_stmt 1 view .LVU663
 640:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 2756              		.loc 1 640 26 is_stmt 0 view .LVU664
 2757 0276 C217     		asrs	r2, r0, #31
 2758 0278 4C4B     		ldr	r3, .L223+8
 2759 027a 4142     		rsbs	r1, r0, #0
 2760 027c 03FB0211 		mla	r1, r3, r2, r1
 2761 0280 A0FB0337 		umull	r3, r7, r0, r3
 2762              	.LVL343:
 640:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 2763              		.loc 1 640 26 view .LVU665
 2764 0284 3944     		add	r1, r1, r7
 640:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 2765              		.loc 1 640 15 view .LVU666
 2766 0286 1C19     		adds	r4, r3, r4
 640:timer64/time64.c ****             year += (cycles * years_in_gregorian_cycle);
 2767              		.loc 1 640 15 view .LVU667
 2768 0288 41EB0606 		adc	r6, r1, r6
 2769              	.LVL344:
 641:timer64/time64.c ****         }
 2770              		.loc 1 641 13 is_stmt 1 view .LVU668
ARM GAS  /tmp/cc4CMdmh.s 			page 70


 641:timer64/time64.c ****         }
 2771              		.loc 1 641 29 is_stmt 0 view .LVU669
 2772 028c 0318     		adds	r3, r0, r0
 2773 028e 42EB0207 		adc	r7, r2, r2
 2774 0292 1B18     		adds	r3, r3, r0
 2775 0294 42EB0707 		adc	r7, r2, r7
 2776 0298 FF00     		lsls	r7, r7, #3
 2777 029a 47EA5377 		orr	r7, r7, r3, lsr #29
 2778 029e DB00     		lsls	r3, r3, #3
 2779 02a0 1818     		adds	r0, r3, r0
 2780              	.LVL345:
 641:timer64/time64.c ****         }
 2781              		.loc 1 641 29 view .LVU670
 2782 02a2 42EB0707 		adc	r7, r2, r7
 2783 02a6 3F01     		lsls	r7, r7, #4
 2784 02a8 47EA1077 		orr	r7, r7, r0, lsr #28
 2785 02ac 0001     		lsls	r0, r0, #4
 641:timer64/time64.c ****         }
 2786              		.loc 1 641 18 view .LVU671
 2787 02ae 4519     		adds	r5, r0, r5
 2788              	.LVL346:
 641:timer64/time64.c ****         }
 2789              		.loc 1 641 18 view .LVU672
 2790 02b0 49EB0707 		adc	r7, r9, r7
 2791              	.LVL347:
 2792              	.L190:
 645:timer64/time64.c ****         while (m < (Time64_T) -length_of_year[leap]) {
 2793              		.loc 1 645 9 is_stmt 1 view .LVU673
 645:timer64/time64.c ****         while (m < (Time64_T) -length_of_year[leap]) {
 2794              		.loc 1 645 16 is_stmt 0 view .LVU674
 2795 02b4 40F26C79 		movw	r9, #1900
 2796 02b8 15EB0909 		adds	r9, r5, r9
 2797 02bc 47F1000A 		adc	r10, r7, #0
 2798 02c0 4FF4C872 		mov	r2, #400
 2799 02c4 0023     		movs	r3, #0
 2800 02c6 4846     		mov	r0, r9
 2801 02c8 5146     		mov	r1, r10
 2802 02ca FFF7FEFF 		bl	__aeabi_ldivmod
 2803              	.LVL348:
 2804 02ce 1343     		orrs	r3, r3, r2
 2805 02d0 0CD0     		beq	.L206
 645:timer64/time64.c ****         while (m < (Time64_T) -length_of_year[leap]) {
 2806              		.loc 1 645 16 discriminator 2 view .LVU675
 2807 02d2 19F0030F 		tst	r9, #3
 2808 02d6 0BD1     		bne	.L207
 645:timer64/time64.c ****         while (m < (Time64_T) -length_of_year[leap]) {
 2809              		.loc 1 645 16 discriminator 3 view .LVU676
 2810 02d8 6422     		movs	r2, #100
 2811 02da 0023     		movs	r3, #0
 2812 02dc 4846     		mov	r0, r9
 2813 02de 5146     		mov	r1, r10
 2814 02e0 FFF7FEFF 		bl	__aeabi_ldivmod
 2815              	.LVL349:
 2816 02e4 1343     		orrs	r3, r3, r2
 2817 02e6 05D1     		bne	.L208
 645:timer64/time64.c ****         while (m < (Time64_T) -length_of_year[leap]) {
 2818              		.loc 1 645 16 view .LVU677
ARM GAS  /tmp/cc4CMdmh.s 			page 71


 2819 02e8 0023     		movs	r3, #0
 2820 02ea 08E0     		b	.L192
 2821              	.L206:
 2822 02ec 0123     		movs	r3, #1
 2823 02ee 06E0     		b	.L192
 2824              	.L207:
 2825 02f0 0023     		movs	r3, #0
 2826 02f2 04E0     		b	.L192
 2827              	.L208:
 2828 02f4 0123     		movs	r3, #1
 2829              	.LVL350:
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2830              		.loc 1 646 9 is_stmt 1 view .LVU678
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2831              		.loc 1 646 15 is_stmt 0 view .LVU679
 2832 02f6 02E0     		b	.L192
 2833              	.LVL351:
 2834              	.L209:
 649:timer64/time64.c ****         }
 2835              		.loc 1 649 20 view .LVU680
 2836 02f8 0123     		movs	r3, #1
 2837              	.L193:
 2838              	.LVL352:
 648:timer64/time64.c ****             leap = IS_LEAP (year);
 2839              		.loc 1 648 17 discriminator 8 view .LVU681
 2840 02fa 5546     		mov	r5, r10
 2841 02fc 4F46     		mov	r7, r9
 2842              	.LVL353:
 2843              	.L192:
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2844              		.loc 1 646 15 is_stmt 1 view .LVU682
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2845              		.loc 1 646 46 is_stmt 0 view .LVU683
 2846 02fe 2F4A     		ldr	r2, .L223+24
 2847 0300 32F91320 		ldrsh	r2, [r2, r3, lsl #1]
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2848              		.loc 1 646 31 view .LVU684
 2849 0304 5142     		rsbs	r1, r2, #0
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2850              		.loc 1 646 20 view .LVU685
 2851 0306 C817     		asrs	r0, r1, #31
 646:timer64/time64.c ****             m += (Time64_T) length_of_year[leap];
 2852              		.loc 1 646 15 view .LVU686
 2853 0308 8C42     		cmp	r4, r1
 2854 030a 76EB0001 		sbcs	r1, r6, r0
 2855 030e 25DA     		bge	.L221
 647:timer64/time64.c ****             year--;
 2856              		.loc 1 647 13 is_stmt 1 view .LVU687
 647:timer64/time64.c ****             year--;
 2857              		.loc 1 647 15 is_stmt 0 view .LVU688
 2858 0310 1419     		adds	r4, r2, r4
 647:timer64/time64.c ****             year--;
 2859              		.loc 1 647 15 view .LVU689
 2860 0312 46EBE276 		adc	r6, r6, r2, asr #31
 2861              	.LVL354:
 648:timer64/time64.c ****             leap = IS_LEAP (year);
 2862              		.loc 1 648 13 is_stmt 1 view .LVU690
ARM GAS  /tmp/cc4CMdmh.s 			page 72


 648:timer64/time64.c ****             leap = IS_LEAP (year);
 2863              		.loc 1 648 17 is_stmt 0 view .LVU691
 2864 0316 15F1FF3A 		adds	r10, r5, #-1
 2865 031a 47F1FF39 		adc	r9, r7, #-1
 2866              	.LVL355:
 649:timer64/time64.c ****         }
 2867              		.loc 1 649 13 is_stmt 1 view .LVU692
 649:timer64/time64.c ****         }
 2868              		.loc 1 649 20 is_stmt 0 view .LVU693
 2869 031e 40F26B73 		movw	r3, #1899
 2870              	.LVL356:
 649:timer64/time64.c ****         }
 2871              		.loc 1 649 20 view .LVU694
 2872 0322 ED18     		adds	r5, r5, r3
 2873 0324 47F10007 		adc	r7, r7, #0
 2874 0328 4FF4C872 		mov	r2, #400
 2875 032c 0023     		movs	r3, #0
 2876 032e 2846     		mov	r0, r5
 2877 0330 3946     		mov	r1, r7
 2878 0332 FFF7FEFF 		bl	__aeabi_ldivmod
 2879              	.LVL357:
 2880 0336 1343     		orrs	r3, r3, r2
 2881 0338 DED0     		beq	.L209
 649:timer64/time64.c ****         }
 2882              		.loc 1 649 20 discriminator 2 view .LVU695
 2883 033a 15F0030F 		tst	r5, #3
 2884 033e 09D1     		bne	.L210
 649:timer64/time64.c ****         }
 2885              		.loc 1 649 20 discriminator 3 view .LVU696
 2886 0340 6422     		movs	r2, #100
 2887 0342 0023     		movs	r3, #0
 2888 0344 2846     		mov	r0, r5
 2889 0346 3946     		mov	r1, r7
 2890 0348 FFF7FEFF 		bl	__aeabi_ldivmod
 2891              	.LVL358:
 2892 034c 1343     		orrs	r3, r3, r2
 2893 034e 03D1     		bne	.L211
 649:timer64/time64.c ****         }
 2894              		.loc 1 649 20 view .LVU697
 2895 0350 0023     		movs	r3, #0
 2896 0352 D2E7     		b	.L193
 2897              	.L210:
 2898 0354 0023     		movs	r3, #0
 2899 0356 D0E7     		b	.L193
 2900              	.L211:
 2901 0358 0123     		movs	r3, #1
 2902 035a CEE7     		b	.L193
 2903              	.LVL359:
 2904              	.L221:
 653:timer64/time64.c ****         while (m < (Time64_T) -days_in_month[leap][v_tm_mon]) {
 2905              		.loc 1 653 18 view .LVU698
 2906 035c 0B22     		movs	r2, #11
 2907 035e B446     		mov	ip, r6
 2908              	.L195:
 2909              	.LVL360:
 654:timer64/time64.c ****             m += (Time64_T) days_in_month[leap][v_tm_mon];
 2910              		.loc 1 654 15 is_stmt 1 view .LVU699
ARM GAS  /tmp/cc4CMdmh.s 			page 73


 654:timer64/time64.c ****             m += (Time64_T) days_in_month[leap][v_tm_mon];
 2911              		.loc 1 654 51 is_stmt 0 view .LVU700
 2912 0360 03EB4300 		add	r0, r3, r3, lsl #1
 2913 0364 164E     		ldr	r6, .L223+28
 2914 0366 06EB8000 		add	r0, r6, r0, lsl #2
 2915 036a 815C     		ldrb	r1, [r0, r2]	@ zero_extendqisi2
 654:timer64/time64.c ****             m += (Time64_T) days_in_month[leap][v_tm_mon];
 2916              		.loc 1 654 31 view .LVU701
 2917 036c 4842     		rsbs	r0, r1, #0
 654:timer64/time64.c ****             m += (Time64_T) days_in_month[leap][v_tm_mon];
 2918              		.loc 1 654 20 view .LVU702
 2919 036e C617     		asrs	r6, r0, #31
 654:timer64/time64.c ****             m += (Time64_T) days_in_month[leap][v_tm_mon];
 2920              		.loc 1 654 15 view .LVU703
 2921 0370 8442     		cmp	r4, r0
 2922 0372 7CEB0600 		sbcs	r0, ip, r6
 2923 0376 05DA     		bge	.L222
 655:timer64/time64.c ****             v_tm_mon--;
 2924              		.loc 1 655 13 is_stmt 1 view .LVU704
 655:timer64/time64.c ****             v_tm_mon--;
 2925              		.loc 1 655 15 is_stmt 0 view .LVU705
 2926 0378 0919     		adds	r1, r1, r4
 2927 037a 0C46     		mov	r4, r1
 655:timer64/time64.c ****             v_tm_mon--;
 2928              		.loc 1 655 15 view .LVU706
 2929 037c 4CF1000C 		adc	ip, ip, #0
 2930              	.LVL361:
 656:timer64/time64.c ****         }
 2931              		.loc 1 656 13 is_stmt 1 view .LVU707
 656:timer64/time64.c ****         }
 2932              		.loc 1 656 21 is_stmt 0 view .LVU708
 2933 0380 013A     		subs	r2, r2, #1
 2934              	.LVL362:
 656:timer64/time64.c ****         }
 2935              		.loc 1 656 21 view .LVU709
 2936 0382 EDE7     		b	.L195
 2937              	.LVL363:
 2938              	.L222:
 658:timer64/time64.c ****     }
 2939              		.loc 1 658 9 is_stmt 1 view .LVU710
 658:timer64/time64.c ****     }
 2940              		.loc 1 658 11 is_stmt 0 view .LVU711
 2941 0384 0C19     		adds	r4, r1, r4
 658:timer64/time64.c ****     }
 2942              		.loc 1 658 11 view .LVU712
 2943 0386 40E7     		b	.L189
 2944              	.L219:
 664:timer64/time64.c **** #endif
 2945              		.loc 1 664 9 is_stmt 1 view .LVU713
 2946 0388 FFF7FEFF 		bl	__errno
 2947              	.LVL364:
 664:timer64/time64.c **** #endif
 2948              		.loc 1 664 15 is_stmt 0 view .LVU714
 2949 038c 8B23     		movs	r3, #139
 2950 038e 0360     		str	r3, [r0]
 666:timer64/time64.c ****     }
 2951              		.loc 1 666 9 is_stmt 1 view .LVU715
ARM GAS  /tmp/cc4CMdmh.s 			page 74


 666:timer64/time64.c ****     }
 2952              		.loc 1 666 16 is_stmt 0 view .LVU716
 2953 0390 4FF00008 		mov	r8, #0
 2954              	.LVL365:
 666:timer64/time64.c ****     }
 2955              		.loc 1 666 16 view .LVU717
 2956 0394 5FE7     		b	.L198
 2957              	.LVL366:
 2958              	.L220:
 678:timer64/time64.c **** 
 2959              		.loc 1 678 5 discriminator 1 view .LVU718
 2960 0396 0C4B     		ldr	r3, .L223+36
 2961 0398 064A     		ldr	r2, .L223+16
 2962 039a 40F2A621 		movw	r1, #678
 2963 039e 0648     		ldr	r0, .L223+20
 2964 03a0 FFF7FEFF 		bl	__assert_func
 2965              	.LVL367:
 2966              	.L224:
 2967              		.align	2
 2968              	.L223:
 2969 03a4 C9C9FFFF 		.word	-13879
 2970 03a8 B13A0200 		.word	146097
 2971 03ac 4FC5FDFF 		.word	-146097
 2972 03b0 00000000 		.word	.LC20
 2973 03b4 00000000 		.word	.LANCHOR11
 2974 03b8 10000000 		.word	.LC1
 2975 03bc 00000000 		.word	.LANCHOR0
 2976 03c0 00000000 		.word	.LANCHOR5
 2977 03c4 00000000 		.word	.LANCHOR6
 2978 03c8 0C000000 		.word	.LC21
 2979              		.cfi_endproc
 2980              	.LFE17:
 2982              		.section	.rodata.localtime64_r.str1.4,"aMS",%progbits,1
 2983              		.align	2
 2984              	.LC22:
 2985 0000 6C6F6361 		.ascii	"local_tm != NULL\000"
 2985      6C5F746D 
 2985      20213D20 
 2985      4E554C4C 
 2985      00
 2986 0011 000000   		.align	2
 2987              	.LC23:
 2988 0014 63686563 		.ascii	"check_tm(local_tm)\000"
 2988      6B5F746D 
 2988      286C6F63 
 2988      616C5F74 
 2988      6D2900
 2989              		.section	.text.localtime64_r,"ax",%progbits
 2990              		.align	1
 2991              		.global	localtime64_r
 2992              		.syntax unified
 2993              		.thumb
 2994              		.thumb_func
 2996              	localtime64_r:
 2997              	.LVL368:
 2998              	.LFB18:
 682:timer64/time64.c **** 
ARM GAS  /tmp/cc4CMdmh.s 			page 75


 683:timer64/time64.c **** 
 684:timer64/time64.c **** struct TM *localtime64_r (const Time64_T *time, struct TM *local_tm)
 685:timer64/time64.c **** {
 2999              		.loc 1 685 1 is_stmt 1 view -0
 3000              		.cfi_startproc
 3001              		@ args = 0, pretend = 0, frame = 80
 3002              		@ frame_needed = 0, uses_anonymous_args = 0
 3003              		.loc 1 685 1 is_stmt 0 view .LVU720
 3004 0000 30B5     		push	{r4, r5, lr}
 3005              	.LCFI23:
 3006              		.cfi_def_cfa_offset 12
 3007              		.cfi_offset 4, -12
 3008              		.cfi_offset 5, -8
 3009              		.cfi_offset 14, -4
 3010 0002 95B0     		sub	sp, sp, #84
 3011              	.LCFI24:
 3012              		.cfi_def_cfa_offset 96
 686:timer64/time64.c ****     time_t safe_time;
 3013              		.loc 1 686 5 is_stmt 1 view .LVU721
 687:timer64/time64.c ****     struct tm safe_date;
 3014              		.loc 1 687 5 view .LVU722
 688:timer64/time64.c ****     struct TM gm_tm;
 3015              		.loc 1 688 5 view .LVU723
 689:timer64/time64.c ****     Year orig_year;
 3016              		.loc 1 689 5 view .LVU724
 690:timer64/time64.c ****     int month_diff;
 3017              		.loc 1 690 5 view .LVU725
 691:timer64/time64.c **** 
 692:timer64/time64.c ****     assert(local_tm != NULL);
 3018              		.loc 1 692 5 view .LVU726
 3019 0004 F9B1     		cbz	r1, .L237
 3020 0006 0C46     		mov	r4, r1
 693:timer64/time64.c **** 
 694:timer64/time64.c ****     /* Use the system localtime() if time_t is small enough */
 695:timer64/time64.c ****     if( SHOULD_USE_SYSTEM_LOCALTIME(*time) ) {
 3021              		.loc 1 695 5 view .LVU727
 3022              		.loc 1 695 9 is_stmt 0 view .LVU728
 3023 0008 0368     		ldr	r3, [r0]
 3024 000a 4268     		ldr	r2, [r0, #4]
 3025 000c 13F1004C 		adds	ip, r3, #-2147483648
 3026 0010 42F10001 		adc	r1, r2, #0
 3027              	.LVL369:
 3028              		.loc 1 695 7 view .LVU729
 3029 0014 4FF0FF3E 		mov	lr, #-1
 3030 0018 E645     		cmp	lr, ip
 3031 001a 4FF0000C 		mov	ip, #0
 3032 001e 7CEB0101 		sbcs	r1, ip, r1
 3033 0022 1ED3     		bcc	.L227
 696:timer64/time64.c ****         safe_time = (time_t)*time;
 3034              		.loc 1 696 9 is_stmt 1 view .LVU730
 3035              		.loc 1 696 19 is_stmt 0 view .LVU731
 3036 0024 1293     		str	r3, [sp, #72]
 3037 0026 1392     		str	r2, [sp, #76]
 697:timer64/time64.c **** 
 698:timer64/time64.c ****         TIME64_TRACE1("Using system localtime for %lld\n", *time);
 3038              		.loc 1 698 9 is_stmt 1 view .LVU732
 699:timer64/time64.c **** 
ARM GAS  /tmp/cc4CMdmh.s 			page 76


 700:timer64/time64.c ****         LOCALTIME_R(&safe_time, &safe_date);
 3039              		.loc 1 700 9 view .LVU733
 3040 0028 09A9     		add	r1, sp, #36
 3041 002a 12A8     		add	r0, sp, #72
 3042              	.LVL370:
 3043              		.loc 1 700 9 is_stmt 0 view .LVU734
 3044 002c FFF7FEFF 		bl	localtime_r
 3045              	.LVL371:
 701:timer64/time64.c **** 
 702:timer64/time64.c ****         copy_tm_to_TM64(&safe_date, local_tm);
 3046              		.loc 1 702 9 is_stmt 1 view .LVU735
 3047 0030 2146     		mov	r1, r4
 3048 0032 09A8     		add	r0, sp, #36
 3049 0034 FFF7FEFF 		bl	copy_tm_to_TM64
 3050              	.LVL372:
 703:timer64/time64.c ****         assert(check_tm(local_tm));
 3051              		.loc 1 703 9 view .LVU736
 3052 0038 2046     		mov	r0, r4
 3053 003a FFF7FEFF 		bl	check_tm
 3054              	.LVL373:
 3055 003e 48B1     		cbz	r0, .L238
 3056              	.LVL374:
 3057              	.L228:
 704:timer64/time64.c **** 
 705:timer64/time64.c ****         return local_tm;
 706:timer64/time64.c ****     }
 707:timer64/time64.c **** 
 708:timer64/time64.c ****     if( gmtime64_r(time, &gm_tm) == NULL ) {
 709:timer64/time64.c ****         TIME64_TRACE1("gmtime64_r returned null for %lld\n", *time);
 710:timer64/time64.c ****         return NULL;
 711:timer64/time64.c ****     }
 712:timer64/time64.c **** 
 713:timer64/time64.c ****     orig_year = gm_tm.tm_year;
 714:timer64/time64.c **** 
 715:timer64/time64.c ****     if (gm_tm.tm_year > (2037 - 1900) ||
 716:timer64/time64.c ****         gm_tm.tm_year < (1970 - 1900)
 717:timer64/time64.c ****        )
 718:timer64/time64.c ****     {
 719:timer64/time64.c ****         TIME64_TRACE1("Mapping tm_year %lld to safe_year\n", (Year)gm_tm.tm_year);
 720:timer64/time64.c ****         gm_tm.tm_year = safe_year((Year)(gm_tm.tm_year + 1900)) - 1900;
 721:timer64/time64.c ****     }
 722:timer64/time64.c **** 
 723:timer64/time64.c ****     safe_time = (time_t)timegm64(&gm_tm);
 724:timer64/time64.c ****     if( LOCALTIME_R(&safe_time, &safe_date) == NULL ) {
 725:timer64/time64.c ****         TIME64_TRACE1("localtime_r(%d) returned NULL\n", (int)safe_time);
 726:timer64/time64.c ****         return NULL;
 727:timer64/time64.c ****     }
 728:timer64/time64.c **** 
 729:timer64/time64.c ****     copy_tm_to_TM64(&safe_date, local_tm);
 730:timer64/time64.c **** 
 731:timer64/time64.c ****     local_tm->tm_year = orig_year;
 732:timer64/time64.c ****     if( local_tm->tm_year != orig_year ) {
 733:timer64/time64.c ****         TIME64_TRACE2("tm_year overflow: tm_year %lld, orig_year %lld\n",
 734:timer64/time64.c ****               (Year)local_tm->tm_year, (Year)orig_year);
 735:timer64/time64.c **** 
 736:timer64/time64.c **** #ifdef EOVERFLOW
 737:timer64/time64.c ****         errno = EOVERFLOW;
ARM GAS  /tmp/cc4CMdmh.s 			page 77


 738:timer64/time64.c **** #endif
 739:timer64/time64.c ****         return NULL;
 740:timer64/time64.c ****     }
 741:timer64/time64.c **** 
 742:timer64/time64.c **** 
 743:timer64/time64.c ****     month_diff = local_tm->tm_mon - gm_tm.tm_mon;
 744:timer64/time64.c **** 
 745:timer64/time64.c ****     /*  When localtime is Dec 31st previous year and
 746:timer64/time64.c ****         gmtime is Jan 1st next year.
 747:timer64/time64.c ****     */
 748:timer64/time64.c ****     if( month_diff == 11 ) {
 749:timer64/time64.c ****         local_tm->tm_year--;
 750:timer64/time64.c ****     }
 751:timer64/time64.c **** 
 752:timer64/time64.c ****     /*  When localtime is Jan 1st, next year and
 753:timer64/time64.c ****         gmtime is Dec 31st, previous year.
 754:timer64/time64.c ****     */
 755:timer64/time64.c ****     if( month_diff == -11 ) {
 756:timer64/time64.c ****         local_tm->tm_year++;
 757:timer64/time64.c ****     }
 758:timer64/time64.c **** 
 759:timer64/time64.c ****     /* GMT is Jan 1st, xx01 year, but localtime is still Dec 31st 
 760:timer64/time64.c ****        in a non-leap xx00.  There is one point in the cycle
 761:timer64/time64.c ****        we can't account for which the safe xx00 year is a leap
 762:timer64/time64.c ****        year.  So we need to correct for Dec 31st comming out as
 763:timer64/time64.c ****        the 366th day of the year.
 764:timer64/time64.c ****     */
 765:timer64/time64.c ****     if( !IS_LEAP(local_tm->tm_year) && local_tm->tm_yday == 365 )
 766:timer64/time64.c ****         local_tm->tm_yday--;
 767:timer64/time64.c **** 
 768:timer64/time64.c ****     assert(check_tm(local_tm));
 769:timer64/time64.c ****     
 770:timer64/time64.c ****     return local_tm;
 771:timer64/time64.c **** }
 3058              		.loc 1 771 1 is_stmt 0 view .LVU737
 3059 0040 2046     		mov	r0, r4
 3060 0042 15B0     		add	sp, sp, #84
 3061              	.LCFI25:
 3062              		.cfi_remember_state
 3063              		.cfi_def_cfa_offset 12
 3064              		@ sp needed
 3065 0044 30BD     		pop	{r4, r5, pc}
 3066              	.LVL375:
 3067              	.L237:
 3068              	.LCFI26:
 3069              		.cfi_restore_state
 692:timer64/time64.c **** 
 3070              		.loc 1 692 5 discriminator 1 view .LVU738
 3071 0046 394B     		ldr	r3, .L243
 3072 0048 394A     		ldr	r2, .L243+4
 3073 004a 4FF42D71 		mov	r1, #692
 3074              	.LVL376:
 692:timer64/time64.c **** 
 3075              		.loc 1 692 5 discriminator 1 view .LVU739
 3076 004e 3948     		ldr	r0, .L243+8
 3077              	.LVL377:
 692:timer64/time64.c **** 
ARM GAS  /tmp/cc4CMdmh.s 			page 78


 3078              		.loc 1 692 5 discriminator 1 view .LVU740
 3079 0050 FFF7FEFF 		bl	__assert_func
 3080              	.LVL378:
 3081              	.L238:
 703:timer64/time64.c ****         assert(check_tm(local_tm));
 3082              		.loc 1 703 9 discriminator 1 view .LVU741
 3083 0054 384B     		ldr	r3, .L243+12
 3084 0056 364A     		ldr	r2, .L243+4
 3085 0058 40F2BF21 		movw	r1, #703
 3086 005c 3548     		ldr	r0, .L243+8
 3087 005e FFF7FEFF 		bl	__assert_func
 3088              	.LVL379:
 3089              	.L227:
 708:timer64/time64.c ****         TIME64_TRACE1("gmtime64_r returned null for %lld\n", *time);
 3090              		.loc 1 708 5 is_stmt 1 view .LVU742
 708:timer64/time64.c ****         TIME64_TRACE1("gmtime64_r returned null for %lld\n", *time);
 3091              		.loc 1 708 9 is_stmt 0 view .LVU743
 3092 0062 6946     		mov	r1, sp
 3093 0064 FFF7FEFF 		bl	gmtime64_r
 3094              	.LVL380:
 708:timer64/time64.c ****         TIME64_TRACE1("gmtime64_r returned null for %lld\n", *time);
 3095              		.loc 1 708 7 view .LVU744
 3096 0068 0028     		cmp	r0, #0
 3097 006a 5BD0     		beq	.L234
 713:timer64/time64.c **** 
 3098              		.loc 1 713 5 is_stmt 1 view .LVU745
 713:timer64/time64.c **** 
 3099              		.loc 1 713 22 is_stmt 0 view .LVU746
 3100 006c 059D     		ldr	r5, [sp, #20]
 3101              	.LVL381:
 715:timer64/time64.c ****         gm_tm.tm_year < (1970 - 1900)
 3102              		.loc 1 715 5 is_stmt 1 view .LVU747
 715:timer64/time64.c ****         gm_tm.tm_year < (1970 - 1900)
 3103              		.loc 1 715 39 is_stmt 0 view .LVU748
 3104 006e A5F14603 		sub	r3, r5, #70
 715:timer64/time64.c ****         gm_tm.tm_year < (1970 - 1900)
 3105              		.loc 1 715 8 view .LVU749
 3106 0072 432B     		cmp	r3, #67
 3107 0074 43D8     		bhi	.L239
 3108              	.L229:
 723:timer64/time64.c ****     if( LOCALTIME_R(&safe_time, &safe_date) == NULL ) {
 3109              		.loc 1 723 5 is_stmt 1 view .LVU750
 723:timer64/time64.c ****     if( LOCALTIME_R(&safe_time, &safe_date) == NULL ) {
 3110              		.loc 1 723 25 is_stmt 0 view .LVU751
 3111 0076 6846     		mov	r0, sp
 3112 0078 FFF7FEFF 		bl	timegm64
 3113              	.LVL382:
 723:timer64/time64.c ****     if( LOCALTIME_R(&safe_time, &safe_date) == NULL ) {
 3114              		.loc 1 723 15 view .LVU752
 3115 007c CDE91201 		strd	r0, [sp, #72]
 724:timer64/time64.c ****         TIME64_TRACE1("localtime_r(%d) returned NULL\n", (int)safe_time);
 3116              		.loc 1 724 5 is_stmt 1 view .LVU753
 724:timer64/time64.c ****         TIME64_TRACE1("localtime_r(%d) returned NULL\n", (int)safe_time);
 3117              		.loc 1 724 9 is_stmt 0 view .LVU754
 3118 0080 09A9     		add	r1, sp, #36
 3119 0082 12A8     		add	r0, sp, #72
 3120 0084 FFF7FEFF 		bl	localtime_r
ARM GAS  /tmp/cc4CMdmh.s 			page 79


 3121              	.LVL383:
 724:timer64/time64.c ****         TIME64_TRACE1("localtime_r(%d) returned NULL\n", (int)safe_time);
 3122              		.loc 1 724 7 view .LVU755
 3123 0088 0028     		cmp	r0, #0
 3124 008a 4DD0     		beq	.L235
 729:timer64/time64.c **** 
 3125              		.loc 1 729 5 is_stmt 1 view .LVU756
 3126 008c 2146     		mov	r1, r4
 3127 008e 09A8     		add	r0, sp, #36
 3128 0090 FFF7FEFF 		bl	copy_tm_to_TM64
 3129              	.LVL384:
 731:timer64/time64.c ****     if( local_tm->tm_year != orig_year ) {
 3130              		.loc 1 731 5 view .LVU757
 731:timer64/time64.c ****     if( local_tm->tm_year != orig_year ) {
 3131              		.loc 1 731 23 is_stmt 0 view .LVU758
 3132 0094 6561     		str	r5, [r4, #20]
 732:timer64/time64.c ****         TIME64_TRACE2("tm_year overflow: tm_year %lld, orig_year %lld\n",
 3133              		.loc 1 732 5 is_stmt 1 view .LVU759
 743:timer64/time64.c **** 
 3134              		.loc 1 743 5 view .LVU760
 743:timer64/time64.c **** 
 3135              		.loc 1 743 26 is_stmt 0 view .LVU761
 3136 0096 2369     		ldr	r3, [r4, #16]
 743:timer64/time64.c **** 
 3137              		.loc 1 743 42 view .LVU762
 3138 0098 049A     		ldr	r2, [sp, #16]
 743:timer64/time64.c **** 
 3139              		.loc 1 743 16 view .LVU763
 3140 009a 9B1A     		subs	r3, r3, r2
 3141              	.LVL385:
 748:timer64/time64.c ****         local_tm->tm_year--;
 3142              		.loc 1 748 5 is_stmt 1 view .LVU764
 748:timer64/time64.c ****         local_tm->tm_year--;
 3143              		.loc 1 748 7 is_stmt 0 view .LVU765
 3144 009c 0B2B     		cmp	r3, #11
 3145 009e 37D0     		beq	.L240
 3146              	.LVL386:
 3147              	.L230:
 755:timer64/time64.c ****         local_tm->tm_year++;
 3148              		.loc 1 755 5 is_stmt 1 view .LVU766
 755:timer64/time64.c ****         local_tm->tm_year++;
 3149              		.loc 1 755 7 is_stmt 0 view .LVU767
 3150 00a0 13F10B0F 		cmn	r3, #11
 3151 00a4 37D0     		beq	.L241
 3152              	.LVL387:
 3153              	.L231:
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3154              		.loc 1 765 5 is_stmt 1 view .LVU768
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3155              		.loc 1 765 10 is_stmt 0 view .LVU769
 3156 00a6 6369     		ldr	r3, [r4, #20]
 3157 00a8 03F26C73 		addw	r3, r3, #1900
 3158 00ac 2349     		ldr	r1, .L243+16
 3159 00ae 81FB0321 		smull	r2, r1, r1, r3
 3160              	.LVL388:
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3161              		.loc 1 765 10 view .LVU770
ARM GAS  /tmp/cc4CMdmh.s 			page 80


 3162 00b2 DA17     		asrs	r2, r3, #31
 3163 00b4 C2EBE112 		rsb	r2, r2, r1, asr #7
 3164 00b8 4FF4C871 		mov	r1, #400
 3165 00bc 01FB1232 		mls	r2, r1, r2, r3
 3166 00c0 8AB1     		cbz	r2, .L232
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3167              		.loc 1 765 10 discriminator 2 view .LVU771
 3168 00c2 13F0030F 		tst	r3, #3
 3169 00c6 09D1     		bne	.L233
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3170              		.loc 1 765 10 discriminator 3 view .LVU772
 3171 00c8 1C49     		ldr	r1, .L243+16
 3172 00ca 81FB0321 		smull	r2, r1, r1, r3
 3173 00ce DA17     		asrs	r2, r3, #31
 3174 00d0 C2EB6112 		rsb	r2, r2, r1, asr #5
 3175 00d4 6421     		movs	r1, #100
 3176 00d6 01FB1232 		mls	r2, r1, r2, r3
 3177 00da 22B9     		cbnz	r2, .L232
 3178              	.L233:
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3179              		.loc 1 765 48 view .LVU773
 3180 00dc E369     		ldr	r3, [r4, #28]
 765:timer64/time64.c ****         local_tm->tm_yday--;
 3181              		.loc 1 765 37 view .LVU774
 3182 00de 40F26D12 		movw	r2, #365
 3183 00e2 9342     		cmp	r3, r2
 3184 00e4 1BD0     		beq	.L242
 3185              	.L232:
 768:timer64/time64.c ****     
 3186              		.loc 1 768 5 is_stmt 1 view .LVU775
 3187 00e6 2046     		mov	r0, r4
 3188 00e8 FFF7FEFF 		bl	check_tm
 3189              	.LVL389:
 768:timer64/time64.c ****     
 3190              		.loc 1 768 5 is_stmt 0 view .LVU776
 3191 00ec 0028     		cmp	r0, #0
 3192 00ee A7D1     		bne	.L228
 768:timer64/time64.c ****     
 3193              		.loc 1 768 5 discriminator 1 view .LVU777
 3194 00f0 114B     		ldr	r3, .L243+12
 3195 00f2 0F4A     		ldr	r2, .L243+4
 3196 00f4 4FF44071 		mov	r1, #768
 3197 00f8 0E48     		ldr	r0, .L243+8
 3198 00fa FFF7FEFF 		bl	__assert_func
 3199              	.LVL390:
 3200              	.L239:
 719:timer64/time64.c ****         gm_tm.tm_year = safe_year((Year)(gm_tm.tm_year + 1900)) - 1900;
 3201              		.loc 1 719 9 is_stmt 1 view .LVU778
 720:timer64/time64.c ****     }
 3202              		.loc 1 720 9 view .LVU779
 720:timer64/time64.c ****     }
 3203              		.loc 1 720 56 is_stmt 0 view .LVU780
 3204 00fe 05F26C70 		addw	r0, r5, #1900
 720:timer64/time64.c ****     }
 3205              		.loc 1 720 25 view .LVU781
 3206 0102 C117     		asrs	r1, r0, #31
 3207 0104 FFF7FEFF 		bl	safe_year
ARM GAS  /tmp/cc4CMdmh.s 			page 81


 3208              	.LVL391:
 720:timer64/time64.c ****     }
 3209              		.loc 1 720 65 view .LVU782
 3210 0108 A0F26C70 		subw	r0, r0, #1900
 720:timer64/time64.c ****     }
 3211              		.loc 1 720 23 view .LVU783
 3212 010c 0590     		str	r0, [sp, #20]
 3213 010e B2E7     		b	.L229
 3214              	.LVL392:
 3215              	.L240:
 749:timer64/time64.c ****     }
 3216              		.loc 1 749 9 is_stmt 1 view .LVU784
 749:timer64/time64.c ****     }
 3217              		.loc 1 749 26 is_stmt 0 view .LVU785
 3218 0110 013D     		subs	r5, r5, #1
 3219              	.LVL393:
 749:timer64/time64.c ****     }
 3220              		.loc 1 749 26 view .LVU786
 3221 0112 6561     		str	r5, [r4, #20]
 3222              	.LVL394:
 749:timer64/time64.c ****     }
 3223              		.loc 1 749 26 view .LVU787
 3224 0114 C4E7     		b	.L230
 3225              	.LVL395:
 3226              	.L241:
 756:timer64/time64.c ****     }
 3227              		.loc 1 756 9 is_stmt 1 view .LVU788
 756:timer64/time64.c ****     }
 3228              		.loc 1 756 17 is_stmt 0 view .LVU789
 3229 0116 6369     		ldr	r3, [r4, #20]
 3230              	.LVL396:
 756:timer64/time64.c ****     }
 3231              		.loc 1 756 26 view .LVU790
 3232 0118 0133     		adds	r3, r3, #1
 3233 011a 6361     		str	r3, [r4, #20]
 3234 011c C3E7     		b	.L231
 3235              	.LVL397:
 3236              	.L242:
 766:timer64/time64.c **** 
 3237              		.loc 1 766 9 is_stmt 1 view .LVU791
 766:timer64/time64.c **** 
 3238              		.loc 1 766 26 is_stmt 0 view .LVU792
 3239 011e 013B     		subs	r3, r3, #1
 3240 0120 E361     		str	r3, [r4, #28]
 3241 0122 E0E7     		b	.L232
 3242              	.LVL398:
 3243              	.L234:
 710:timer64/time64.c ****     }
 3244              		.loc 1 710 16 view .LVU793
 3245 0124 0446     		mov	r4, r0
 3246              	.LVL399:
 710:timer64/time64.c ****     }
 3247              		.loc 1 710 16 view .LVU794
 3248 0126 8BE7     		b	.L228
 3249              	.LVL400:
 3250              	.L235:
 726:timer64/time64.c ****     }
ARM GAS  /tmp/cc4CMdmh.s 			page 82


 3251              		.loc 1 726 16 view .LVU795
 3252 0128 0446     		mov	r4, r0
 3253              	.LVL401:
 726:timer64/time64.c ****     }
 3254              		.loc 1 726 16 view .LVU796
 3255 012a 89E7     		b	.L228
 3256              	.L244:
 3257              		.align	2
 3258              	.L243:
 3259 012c 00000000 		.word	.LC22
 3260 0130 00000000 		.word	.LANCHOR12
 3261 0134 10000000 		.word	.LC1
 3262 0138 14000000 		.word	.LC23
 3263 013c 1F85EB51 		.word	1374389535
 3264              		.cfi_endproc
 3265              	.LFE18:
 3267              		.section	.text.valid_tm_wday,"ax",%progbits
 3268              		.align	1
 3269              		.global	valid_tm_wday
 3270              		.syntax unified
 3271              		.thumb
 3272              		.thumb_func
 3274              	valid_tm_wday:
 3275              	.LVL402:
 3276              	.LFB19:
 772:timer64/time64.c **** 
 773:timer64/time64.c **** 
 774:timer64/time64.c **** int valid_tm_wday( const struct TM* date ) {
 3277              		.loc 1 774 44 is_stmt 1 view -0
 3278              		.cfi_startproc
 3279              		@ args = 0, pretend = 0, frame = 0
 3280              		@ frame_needed = 0, uses_anonymous_args = 0
 3281              		@ link register save eliminated.
 775:timer64/time64.c ****     if( 0 <= date->tm_wday && date->tm_wday <= 6 )
 3282              		.loc 1 775 5 view .LVU798
 3283              		.loc 1 775 18 is_stmt 0 view .LVU799
 3284 0000 8369     		ldr	r3, [r0, #24]
 3285              		.loc 1 775 7 view .LVU800
 3286 0002 062B     		cmp	r3, #6
 3287 0004 01D8     		bhi	.L247
 776:timer64/time64.c ****         return 1;
 3288              		.loc 1 776 16 view .LVU801
 3289 0006 0120     		movs	r0, #1
 3290              	.LVL403:
 3291              		.loc 1 776 16 view .LVU802
 3292 0008 7047     		bx	lr
 3293              	.LVL404:
 3294              	.L247:
 777:timer64/time64.c ****     else
 778:timer64/time64.c ****         return 0;
 3295              		.loc 1 778 16 view .LVU803
 3296 000a 0020     		movs	r0, #0
 3297              	.LVL405:
 779:timer64/time64.c **** }
 3298              		.loc 1 779 1 view .LVU804
 3299 000c 7047     		bx	lr
 3300              		.cfi_endproc
ARM GAS  /tmp/cc4CMdmh.s 			page 83


 3301              	.LFE19:
 3303              		.section	.text.valid_tm_mon,"ax",%progbits
 3304              		.align	1
 3305              		.global	valid_tm_mon
 3306              		.syntax unified
 3307              		.thumb
 3308              		.thumb_func
 3310              	valid_tm_mon:
 3311              	.LVL406:
 3312              	.LFB20:
 780:timer64/time64.c **** 
 781:timer64/time64.c **** int valid_tm_mon( const struct TM* date ) {
 3313              		.loc 1 781 43 is_stmt 1 view -0
 3314              		.cfi_startproc
 3315              		@ args = 0, pretend = 0, frame = 0
 3316              		@ frame_needed = 0, uses_anonymous_args = 0
 3317              		@ link register save eliminated.
 782:timer64/time64.c ****     if( 0 <= date->tm_mon && date->tm_mon <= 11 )
 3318              		.loc 1 782 5 view .LVU806
 3319              		.loc 1 782 18 is_stmt 0 view .LVU807
 3320 0000 0369     		ldr	r3, [r0, #16]
 3321              		.loc 1 782 7 view .LVU808
 3322 0002 0B2B     		cmp	r3, #11
 3323 0004 01D8     		bhi	.L250
 783:timer64/time64.c ****         return 1;
 3324              		.loc 1 783 16 view .LVU809
 3325 0006 0120     		movs	r0, #1
 3326              	.LVL407:
 3327              		.loc 1 783 16 view .LVU810
 3328 0008 7047     		bx	lr
 3329              	.LVL408:
 3330              	.L250:
 784:timer64/time64.c ****     else
 785:timer64/time64.c ****         return 0;
 3331              		.loc 1 785 16 view .LVU811
 3332 000a 0020     		movs	r0, #0
 3333              	.LVL409:
 786:timer64/time64.c **** }
 3334              		.loc 1 786 1 view .LVU812
 3335 000c 7047     		bx	lr
 3336              		.cfi_endproc
 3337              	.LFE20:
 3339              		.section	.rodata.asctime64_r.str1.4,"aMS",%progbits,1
 3340              		.align	2
 3341              	.LC24:
 3342 0000 252E3373 		.ascii	"%.3s %.3s%3d %.2d:%.2d:%.2d %d\012\000"
 3342      20252E33 
 3342      73253364 
 3342      20252E32 
 3342      643A252E 
 3343              		.section	.text.asctime64_r,"ax",%progbits
 3344              		.align	1
 3345              		.global	asctime64_r
 3346              		.syntax unified
 3347              		.thumb
 3348              		.thumb_func
 3350              	asctime64_r:
ARM GAS  /tmp/cc4CMdmh.s 			page 84


 3351              	.LVL410:
 3352              	.LFB21:
 787:timer64/time64.c **** 
 788:timer64/time64.c **** 
 789:timer64/time64.c **** char *asctime64_r( const struct TM* date, char *result ) {
 3353              		.loc 1 789 58 is_stmt 1 view -0
 3354              		.cfi_startproc
 3355              		@ args = 0, pretend = 0, frame = 0
 3356              		@ frame_needed = 0, uses_anonymous_args = 0
 3357              		.loc 1 789 58 is_stmt 0 view .LVU814
 3358 0000 70B5     		push	{r4, r5, r6, lr}
 3359              	.LCFI27:
 3360              		.cfi_def_cfa_offset 16
 3361              		.cfi_offset 4, -16
 3362              		.cfi_offset 5, -12
 3363              		.cfi_offset 6, -8
 3364              		.cfi_offset 14, -4
 3365 0002 86B0     		sub	sp, sp, #24
 3366              	.LCFI28:
 3367              		.cfi_def_cfa_offset 40
 3368 0004 0446     		mov	r4, r0
 3369 0006 0E46     		mov	r6, r1
 790:timer64/time64.c ****     /* I figure everything else can be displayed, even hour 25, but if
 791:timer64/time64.c ****        these are out of range we walk off the name arrays */
 792:timer64/time64.c ****     if( !valid_tm_wday(date) || !valid_tm_mon(date) )
 3370              		.loc 1 792 5 is_stmt 1 view .LVU815
 3371              		.loc 1 792 10 is_stmt 0 view .LVU816
 3372 0008 FFF7FEFF 		bl	valid_tm_wday
 3373              	.LVL411:
 3374              		.loc 1 792 7 view .LVU817
 3375 000c F0B1     		cbz	r0, .L253
 3376              		.loc 1 792 34 discriminator 1 view .LVU818
 3377 000e 2046     		mov	r0, r4
 3378 0010 FFF7FEFF 		bl	valid_tm_mon
 3379              	.LVL412:
 3380              		.loc 1 792 30 discriminator 1 view .LVU819
 3381 0014 E0B1     		cbz	r0, .L254
 793:timer64/time64.c ****         return NULL;
 794:timer64/time64.c **** 
 795:timer64/time64.c ****     sprintf(result, TM64_ASCTIME_FORMAT,
 3382              		.loc 1 795 5 is_stmt 1 view .LVU820
 796:timer64/time64.c ****         wday_name[date->tm_wday],
 3383              		.loc 1 796 23 is_stmt 0 view .LVU821
 3384 0016 A169     		ldr	r1, [r4, #24]
 797:timer64/time64.c ****         mon_name[date->tm_mon],
 3385              		.loc 1 797 22 view .LVU822
 3386 0018 2269     		ldr	r2, [r4, #16]
 798:timer64/time64.c ****         date->tm_mday, date->tm_hour,
 799:timer64/time64.c ****         date->tm_min, date->tm_sec,
 800:timer64/time64.c ****         1900 + date->tm_year);
 3387              		.loc 1 800 20 view .LVU823
 3388 001a 6569     		ldr	r5, [r4, #20]
 795:timer64/time64.c ****         wday_name[date->tm_wday],
 3389              		.loc 1 795 5 view .LVU824
 3390 001c 05F26C75 		addw	r5, r5, #1900
 3391 0020 0495     		str	r5, [sp, #16]
 3392 0022 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc4CMdmh.s 			page 85


 3393 0024 0393     		str	r3, [sp, #12]
 3394 0026 6368     		ldr	r3, [r4, #4]
 3395 0028 0293     		str	r3, [sp, #8]
 3396 002a A368     		ldr	r3, [r4, #8]
 3397 002c 0193     		str	r3, [sp, #4]
 3398 002e E368     		ldr	r3, [r4, #12]
 3399 0030 0093     		str	r3, [sp]
 3400 0032 084B     		ldr	r3, .L256
 3401 0034 03EB8203 		add	r3, r3, r2, lsl #2
 3402 0038 074A     		ldr	r2, .L256+4
 3403 003a 02EB8102 		add	r2, r2, r1, lsl #2
 3404 003e 0749     		ldr	r1, .L256+8
 3405 0040 3046     		mov	r0, r6
 3406 0042 FFF7FEFF 		bl	sprintf
 3407              	.LVL413:
 801:timer64/time64.c **** 
 802:timer64/time64.c ****     return result;
 3408              		.loc 1 802 5 is_stmt 1 view .LVU825
 3409              		.loc 1 802 12 is_stmt 0 view .LVU826
 3410 0046 3046     		mov	r0, r6
 3411              	.L251:
 803:timer64/time64.c **** }
 3412              		.loc 1 803 1 view .LVU827
 3413 0048 06B0     		add	sp, sp, #24
 3414              	.LCFI29:
 3415              		.cfi_remember_state
 3416              		.cfi_def_cfa_offset 16
 3417              		@ sp needed
 3418 004a 70BD     		pop	{r4, r5, r6, pc}
 3419              	.LVL414:
 3420              	.L253:
 3421              	.LCFI30:
 3422              		.cfi_restore_state
 793:timer64/time64.c **** 
 3423              		.loc 1 793 16 view .LVU828
 3424 004c 0020     		movs	r0, #0
 3425 004e FBE7     		b	.L251
 3426              	.L254:
 3427 0050 0020     		movs	r0, #0
 3428 0052 F9E7     		b	.L251
 3429              	.L257:
 3430              		.align	2
 3431              	.L256:
 3432 0054 00000000 		.word	.LANCHOR14
 3433 0058 00000000 		.word	.LANCHOR13
 3434 005c 00000000 		.word	.LC24
 3435              		.cfi_endproc
 3436              	.LFE21:
 3438              		.section	.text.ctime64_r,"ax",%progbits
 3439              		.align	1
 3440              		.global	ctime64_r
 3441              		.syntax unified
 3442              		.thumb
 3443              		.thumb_func
 3445              	ctime64_r:
 3446              	.LVL415:
 3447              	.LFB22:
ARM GAS  /tmp/cc4CMdmh.s 			page 86


 804:timer64/time64.c **** 
 805:timer64/time64.c **** 
 806:timer64/time64.c **** char *ctime64_r( const Time64_T* time, char* result ) {
 3448              		.loc 1 806 55 is_stmt 1 view -0
 3449              		.cfi_startproc
 3450              		@ args = 0, pretend = 0, frame = 40
 3451              		@ frame_needed = 0, uses_anonymous_args = 0
 3452              		.loc 1 806 55 is_stmt 0 view .LVU830
 3453 0000 10B5     		push	{r4, lr}
 3454              	.LCFI31:
 3455              		.cfi_def_cfa_offset 8
 3456              		.cfi_offset 4, -8
 3457              		.cfi_offset 14, -4
 3458 0002 8AB0     		sub	sp, sp, #40
 3459              	.LCFI32:
 3460              		.cfi_def_cfa_offset 48
 3461 0004 0C46     		mov	r4, r1
 807:timer64/time64.c ****     struct TM date;
 3462              		.loc 1 807 5 is_stmt 1 view .LVU831
 808:timer64/time64.c **** 
 809:timer64/time64.c ****     localtime64_r( time, &date );
 3463              		.loc 1 809 5 view .LVU832
 3464 0006 01A9     		add	r1, sp, #4
 3465              	.LVL416:
 3466              		.loc 1 809 5 is_stmt 0 view .LVU833
 3467 0008 FFF7FEFF 		bl	localtime64_r
 3468              	.LVL417:
 810:timer64/time64.c ****     return asctime64_r( &date, result );
 3469              		.loc 1 810 5 is_stmt 1 view .LVU834
 3470              		.loc 1 810 12 is_stmt 0 view .LVU835
 3471 000c 2146     		mov	r1, r4
 3472 000e 01A8     		add	r0, sp, #4
 3473 0010 FFF7FEFF 		bl	asctime64_r
 3474              	.LVL418:
 811:timer64/time64.c **** }
 3475              		.loc 1 811 1 view .LVU836
 3476 0014 0AB0     		add	sp, sp, #40
 3477              	.LCFI33:
 3478              		.cfi_def_cfa_offset 8
 3479              		@ sp needed
 3480 0016 10BD     		pop	{r4, pc}
 3481              		.loc 1 811 1 view .LVU837
 3482              		.cfi_endproc
 3483              	.LFE22:
 3485              		.section	.text.localtime64,"ax",%progbits
 3486              		.align	1
 3487              		.global	localtime64
 3488              		.syntax unified
 3489              		.thumb
 3490              		.thumb_func
 3492              	localtime64:
 3493              	.LVL419:
 3494              	.LFB23:
 812:timer64/time64.c **** 
 813:timer64/time64.c **** 
 814:timer64/time64.c **** /* Non-thread safe versions of the above */
 815:timer64/time64.c **** struct TM *localtime64(const Time64_T *time) {
ARM GAS  /tmp/cc4CMdmh.s 			page 87


 3495              		.loc 1 815 46 is_stmt 1 view -0
 3496              		.cfi_startproc
 3497              		@ args = 0, pretend = 0, frame = 0
 3498              		@ frame_needed = 0, uses_anonymous_args = 0
 3499              		.loc 1 815 46 is_stmt 0 view .LVU839
 3500 0000 08B5     		push	{r3, lr}
 3501              	.LCFI34:
 3502              		.cfi_def_cfa_offset 8
 3503              		.cfi_offset 3, -8
 3504              		.cfi_offset 14, -4
 816:timer64/time64.c ****     //tzset();
 817:timer64/time64.c ****     return localtime64_r(time, &Static_Return_Date);
 3505              		.loc 1 817 5 is_stmt 1 view .LVU840
 3506              		.loc 1 817 12 is_stmt 0 view .LVU841
 3507 0002 0249     		ldr	r1, .L262
 3508 0004 FFF7FEFF 		bl	localtime64_r
 3509              	.LVL420:
 818:timer64/time64.c **** }
 3510              		.loc 1 818 1 view .LVU842
 3511 0008 08BD     		pop	{r3, pc}
 3512              	.L263:
 3513 000a 00BF     		.align	2
 3514              	.L262:
 3515 000c 00000000 		.word	.LANCHOR15
 3516              		.cfi_endproc
 3517              	.LFE23:
 3519              		.section	.text.gmtime64,"ax",%progbits
 3520              		.align	1
 3521              		.global	gmtime64
 3522              		.syntax unified
 3523              		.thumb
 3524              		.thumb_func
 3526              	gmtime64:
 3527              	.LVL421:
 3528              	.LFB24:
 819:timer64/time64.c **** 
 820:timer64/time64.c **** struct TM *gmtime64(const Time64_T *time) {
 3529              		.loc 1 820 43 is_stmt 1 view -0
 3530              		.cfi_startproc
 3531              		@ args = 0, pretend = 0, frame = 0
 3532              		@ frame_needed = 0, uses_anonymous_args = 0
 3533              		.loc 1 820 43 is_stmt 0 view .LVU844
 3534 0000 08B5     		push	{r3, lr}
 3535              	.LCFI35:
 3536              		.cfi_def_cfa_offset 8
 3537              		.cfi_offset 3, -8
 3538              		.cfi_offset 14, -4
 821:timer64/time64.c ****     return gmtime64_r(time, &Static_Return_Date);
 3539              		.loc 1 821 5 is_stmt 1 view .LVU845
 3540              		.loc 1 821 12 is_stmt 0 view .LVU846
 3541 0002 0249     		ldr	r1, .L266
 3542 0004 FFF7FEFF 		bl	gmtime64_r
 3543              	.LVL422:
 822:timer64/time64.c **** }
 3544              		.loc 1 822 1 view .LVU847
 3545 0008 08BD     		pop	{r3, pc}
 3546              	.L267:
ARM GAS  /tmp/cc4CMdmh.s 			page 88


 3547 000a 00BF     		.align	2
 3548              	.L266:
 3549 000c 00000000 		.word	.LANCHOR15
 3550              		.cfi_endproc
 3551              	.LFE24:
 3553              		.section	.text.asctime64,"ax",%progbits
 3554              		.align	1
 3555              		.global	asctime64
 3556              		.syntax unified
 3557              		.thumb
 3558              		.thumb_func
 3560              	asctime64:
 3561              	.LVL423:
 3562              	.LFB25:
 823:timer64/time64.c **** 
 824:timer64/time64.c **** char *asctime64( const struct TM* date ) {
 3563              		.loc 1 824 42 is_stmt 1 view -0
 3564              		.cfi_startproc
 3565              		@ args = 0, pretend = 0, frame = 0
 3566              		@ frame_needed = 0, uses_anonymous_args = 0
 3567              		.loc 1 824 42 is_stmt 0 view .LVU849
 3568 0000 08B5     		push	{r3, lr}
 3569              	.LCFI36:
 3570              		.cfi_def_cfa_offset 8
 3571              		.cfi_offset 3, -8
 3572              		.cfi_offset 14, -4
 825:timer64/time64.c ****     return asctime64_r( date, Static_Return_String );
 3573              		.loc 1 825 5 is_stmt 1 view .LVU850
 3574              		.loc 1 825 12 is_stmt 0 view .LVU851
 3575 0002 0249     		ldr	r1, .L270
 3576 0004 FFF7FEFF 		bl	asctime64_r
 3577              	.LVL424:
 826:timer64/time64.c **** }
 3578              		.loc 1 826 1 view .LVU852
 3579 0008 08BD     		pop	{r3, pc}
 3580              	.L271:
 3581 000a 00BF     		.align	2
 3582              	.L270:
 3583 000c 00000000 		.word	.LANCHOR16
 3584              		.cfi_endproc
 3585              	.LFE25:
 3587              		.section	.text.ctime64,"ax",%progbits
 3588              		.align	1
 3589              		.global	ctime64
 3590              		.syntax unified
 3591              		.thumb
 3592              		.thumb_func
 3594              	ctime64:
 3595              	.LVL425:
 3596              	.LFB26:
 827:timer64/time64.c **** 
 828:timer64/time64.c **** char *ctime64( const Time64_T* time ) {
 3597              		.loc 1 828 39 is_stmt 1 view -0
 3598              		.cfi_startproc
 3599              		@ args = 0, pretend = 0, frame = 0
 3600              		@ frame_needed = 0, uses_anonymous_args = 0
 3601              		.loc 1 828 39 is_stmt 0 view .LVU854
ARM GAS  /tmp/cc4CMdmh.s 			page 89


 3602 0000 08B5     		push	{r3, lr}
 3603              	.LCFI37:
 3604              		.cfi_def_cfa_offset 8
 3605              		.cfi_offset 3, -8
 3606              		.cfi_offset 14, -4
 829:timer64/time64.c ****     //tzset();
 830:timer64/time64.c ****     return asctime64(localtime64(time));
 3607              		.loc 1 830 5 is_stmt 1 view .LVU855
 3608              		.loc 1 830 22 is_stmt 0 view .LVU856
 3609 0002 FFF7FEFF 		bl	localtime64
 3610              	.LVL426:
 3611              		.loc 1 830 12 view .LVU857
 3612 0006 FFF7FEFF 		bl	asctime64
 3613              	.LVL427:
 831:timer64/time64.c **** }
 3614              		.loc 1 831 1 view .LVU858
 3615 000a 08BD     		pop	{r3, pc}
 3616              		.cfi_endproc
 3617              	.LFE26:
 3619              		.section	.bss.Static_Return_Date,"aw",%nobits
 3620              		.align	2
 3621              		.set	.LANCHOR15,. + 0
 3624              	Static_Return_Date:
 3625 0000 00000000 		.space	36
 3625      00000000 
 3625      00000000 
 3625      00000000 
 3625      00000000 
 3626              		.section	.bss.Static_Return_String,"aw",%nobits
 3627              		.align	2
 3628              		.set	.LANCHOR16,. + 0
 3631              	Static_Return_String:
 3632 0000 00000000 		.space	35
 3632      00000000 
 3632      00000000 
 3632      00000000 
 3632      00000000 
 3633              		.section	.data.mon_name,"aw"
 3634              		.align	2
 3635              		.set	.LANCHOR14,. + 0
 3638              	mon_name:
 3639 0000 4A616E00 		.ascii	"Jan\000"
 3640 0004 46656200 		.ascii	"Feb\000"
 3641 0008 4D617200 		.ascii	"Mar\000"
 3642 000c 41707200 		.ascii	"Apr\000"
 3643 0010 4D617900 		.ascii	"May\000"
 3644 0014 4A756E00 		.ascii	"Jun\000"
 3645 0018 4A756C00 		.ascii	"Jul\000"
 3646 001c 41756700 		.ascii	"Aug\000"
 3647 0020 53657000 		.ascii	"Sep\000"
 3648 0024 4F637400 		.ascii	"Oct\000"
 3649 0028 4E6F7600 		.ascii	"Nov\000"
 3650 002c 44656300 		.ascii	"Dec\000"
 3651              		.section	.data.wday_name,"aw"
 3652              		.align	2
 3653              		.set	.LANCHOR13,. + 0
 3656              	wday_name:
ARM GAS  /tmp/cc4CMdmh.s 			page 90


 3657 0000 53756E00 		.ascii	"Sun\000"
 3658 0004 4D6F6E00 		.ascii	"Mon\000"
 3659 0008 54756500 		.ascii	"Tue\000"
 3660 000c 57656400 		.ascii	"Wed\000"
 3661 0010 54687500 		.ascii	"Thu\000"
 3662 0014 46726900 		.ascii	"Fri\000"
 3663 0018 53617400 		.ascii	"Sat\000"
 3664              		.section	.rodata.SYSTEM_MKTIME_MAX,"a"
 3665              		.align	2
 3666              		.set	.LANCHOR9,. + 0
 3669              	SYSTEM_MKTIME_MAX:
 3670 0000 07000000 		.word	7
 3671 0004 0E000000 		.word	14
 3672 0008 13000000 		.word	19
 3673 000c 12000000 		.word	18
 3674 0010 00000000 		.word	0
 3675 0014 8A000000 		.word	138
 3676 0018 01000000 		.word	1
 3677 001c 11000000 		.word	17
 3678 0020 00000000 		.word	0
 3679              		.section	.rodata.SYSTEM_MKTIME_MIN,"a"
 3680              		.align	2
 3681              		.set	.LANCHOR10,. + 0
 3684              	SYSTEM_MKTIME_MIN:
 3685 0000 34000000 		.word	52
 3686 0004 2D000000 		.word	45
 3687 0008 0C000000 		.word	12
 3688 000c 0D000000 		.word	13
 3689 0010 0B000000 		.word	11
 3690 0014 01000000 		.word	1
 3691 0018 05000000 		.word	5
 3692 001c 5A010000 		.word	346
 3693 0020 00000000 		.word	0
 3694              		.section	.rodata.__func__.0,"a"
 3695              		.align	2
 3696              		.set	.LANCHOR12,. + 0
 3699              	__func__.0:
 3700 0000 6C6F6361 		.ascii	"localtime64_r\000"
 3700      6C74696D 
 3700      6536345F 
 3700      7200
 3701              		.section	.rodata.__func__.1,"a"
 3702              		.align	2
 3703              		.set	.LANCHOR4,. + 0
 3706              	__func__.1:
 3707 0000 63686563 		.ascii	"check_tm\000"
 3707      6B5F746D 
 3707      00
 3708              		.section	.rodata.__func__.2,"a"
 3709              		.align	2
 3710              		.set	.LANCHOR11,. + 0
 3713              	__func__.2:
 3714 0000 676D7469 		.ascii	"gmtime64_r\000"
 3714      6D653634 
 3714      5F7200
 3715              		.section	.rodata.__func__.3,"a"
 3716              		.align	2
ARM GAS  /tmp/cc4CMdmh.s 			page 91


 3717              		.set	.LANCHOR1,. + 0
 3720              	__func__.3:
 3721 0000 73616665 		.ascii	"safe_year\000"
 3721      5F796561 
 3721      7200
 3722              		.section	.rodata.__func__.4,"a"
 3723              		.align	2
 3724              		.set	.LANCHOR8,. + 0
 3727              	__func__.4:
 3728 0000 66616B65 		.ascii	"fake_gmtime_r\000"
 3728      5F676D74 
 3728      696D655F 
 3728      7200
 3729              		.section	.rodata.__func__.5,"a"
 3730              		.align	2
 3731              		.set	.LANCHOR7,. + 0
 3734              	__func__.5:
 3735 0000 66616B65 		.ascii	"fake_localtime_r\000"
 3735      5F6C6F63 
 3735      616C7469 
 3735      6D655F72 
 3735      00
 3736              		.section	.rodata.days_in_month,"a"
 3737              		.align	2
 3738              		.set	.LANCHOR5,. + 0
 3741              	days_in_month:
 3742 0000 1F1C1F1E 		.ascii	"\037\034\037\036\037\036\037\037\036\037\036\037"
 3742      1F1E1F1F 
 3742      1E1F1E1F 
 3743 000c 1F1D1F1E 		.ascii	"\037\035\037\036\037\036\037\037\036\037\036\037"
 3743      1F1E1F1F 
 3743      1E1F1E1F 
 3744              		.section	.rodata.julian_days_by_month,"a"
 3745              		.align	2
 3746              		.set	.LANCHOR6,. + 0
 3749              	julian_days_by_month:
 3750 0000 0000     		.short	0
 3751 0002 1F00     		.short	31
 3752 0004 3B00     		.short	59
 3753 0006 5A00     		.short	90
 3754 0008 7800     		.short	120
 3755 000a 9700     		.short	151
 3756 000c B500     		.short	181
 3757 000e D400     		.short	212
 3758 0010 F300     		.short	243
 3759 0012 1101     		.short	273
 3760 0014 3001     		.short	304
 3761 0016 4E01     		.short	334
 3762 0018 0000     		.short	0
 3763 001a 1F00     		.short	31
 3764 001c 3C00     		.short	60
 3765 001e 5B00     		.short	91
 3766 0020 7900     		.short	121
 3767 0022 9800     		.short	152
 3768 0024 B600     		.short	182
 3769 0026 D500     		.short	213
 3770 0028 F400     		.short	244
ARM GAS  /tmp/cc4CMdmh.s 			page 92


 3771 002a 1201     		.short	274
 3772 002c 3101     		.short	305
 3773 002e 4F01     		.short	335
 3774              		.section	.rodata.length_of_year,"a"
 3775              		.align	2
 3776              		.set	.LANCHOR0,. + 0
 3779              	length_of_year:
 3780 0000 6D01     		.short	365
 3781 0002 6E01     		.short	366
 3782              		.section	.rodata.safe_years_high,"a"
 3783              		.align	2
 3784              		.set	.LANCHOR3,. + 0
 3787              	safe_years_high:
 3788 0000 E007     		.short	2016
 3789 0002 E107     		.short	2017
 3790 0004 E207     		.short	2018
 3791 0006 E307     		.short	2019
 3792 0008 E407     		.short	2020
 3793 000a E507     		.short	2021
 3794 000c E607     		.short	2022
 3795 000e E707     		.short	2023
 3796 0010 E807     		.short	2024
 3797 0012 E907     		.short	2025
 3798 0014 EA07     		.short	2026
 3799 0016 EB07     		.short	2027
 3800 0018 EC07     		.short	2028
 3801 001a ED07     		.short	2029
 3802 001c EE07     		.short	2030
 3803 001e EF07     		.short	2031
 3804 0020 F007     		.short	2032
 3805 0022 F107     		.short	2033
 3806 0024 F207     		.short	2034
 3807 0026 F307     		.short	2035
 3808 0028 F407     		.short	2036
 3809 002a F507     		.short	2037
 3810 002c DA07     		.short	2010
 3811 002e DB07     		.short	2011
 3812 0030 DC07     		.short	2012
 3813 0032 DD07     		.short	2013
 3814 0034 DE07     		.short	2014
 3815 0036 DF07     		.short	2015
 3816              		.section	.rodata.safe_years_low,"a"
 3817              		.align	2
 3818              		.set	.LANCHOR2,. + 0
 3821              	safe_years_low:
 3822 0000 CC070000 		.word	1996
 3823 0004 CD070000 		.word	1997
 3824 0008 CE070000 		.word	1998
 3825 000c B3070000 		.word	1971
 3826 0010 B4070000 		.word	1972
 3827 0014 B5070000 		.word	1973
 3828 0018 B6070000 		.word	1974
 3829 001c B7070000 		.word	1975
 3830 0020 B8070000 		.word	1976
 3831 0024 B9070000 		.word	1977
 3832 0028 BA070000 		.word	1978
 3833 002c BB070000 		.word	1979
ARM GAS  /tmp/cc4CMdmh.s 			page 93


 3834 0030 BC070000 		.word	1980
 3835 0034 BD070000 		.word	1981
 3836 0038 BE070000 		.word	1982
 3837 003c BF070000 		.word	1983
 3838 0040 C0070000 		.word	1984
 3839 0044 C1070000 		.word	1985
 3840 0048 C2070000 		.word	1986
 3841 004c C3070000 		.word	1987
 3842 0050 C4070000 		.word	1988
 3843 0054 C5070000 		.word	1989
 3844 0058 C6070000 		.word	1990
 3845 005c C7070000 		.word	1991
 3846 0060 C8070000 		.word	1992
 3847 0064 C9070000 		.word	1993
 3848 0068 CA070000 		.word	1994
 3849 006c CB070000 		.word	1995
 3850              		.text
 3851              	.Letext0:
 3852              		.file 2 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/m
 3853              		.file 3 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/s
 3854              		.file 4 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/t
 3855              		.file 5 "timer64/time64.h"
 3856              		.file 6 "timer64/time64_limits.h"
 3857              		.file 7 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/s
 3858              		.file 8 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/a
 3859              		.file 9 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/s
 3860              		.file 10 "<built-in>"
ARM GAS  /tmp/cc4CMdmh.s 			page 94


DEFINED SYMBOLS
                            *ABS*:0000000000000000 time64.c
     /tmp/cc4CMdmh.s:19     .text.is_exception_century:0000000000000000 $t
     /tmp/cc4CMdmh.s:24     .text.is_exception_century:0000000000000000 is_exception_century
     /tmp/cc4CMdmh.s:81     .text.cycle_offset:0000000000000000 $t
     /tmp/cc4CMdmh.s:86     .text.cycle_offset:0000000000000000 cycle_offset
     /tmp/cc4CMdmh.s:171    .text.cycle_offset:0000000000000050 $d
     /tmp/cc4CMdmh.s:176    .text.seconds_between_years:0000000000000000 $t
     /tmp/cc4CMdmh.s:181    .text.seconds_between_years:0000000000000000 seconds_between_years
     /tmp/cc4CMdmh.s:391    .text.seconds_between_years:0000000000000114 $d
     /tmp/cc4CMdmh.s:398    .rodata.safe_year.str1.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:415    .text.safe_year:0000000000000000 $t
     /tmp/cc4CMdmh.s:420    .text.safe_year:0000000000000000 safe_year
     /tmp/cc4CMdmh.s:619    .text.safe_year:00000000000000e4 $d
     /tmp/cc4CMdmh.s:632    .rodata.check_tm.str1.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:677    .text.check_tm:0000000000000000 $t
     /tmp/cc4CMdmh.s:682    .text.check_tm:0000000000000000 check_tm
     /tmp/cc4CMdmh.s:963    .text.check_tm:0000000000000190 $d
     /tmp/cc4CMdmh.s:986    .text.cmp_date:0000000000000000 $t
     /tmp/cc4CMdmh.s:992    .text.cmp_date:0000000000000000 cmp_date
     /tmp/cc4CMdmh.s:1159   .text.date_in_safe_range:0000000000000000 $t
     /tmp/cc4CMdmh.s:1165   .text.date_in_safe_range:0000000000000000 date_in_safe_range
     /tmp/cc4CMdmh.s:1216   .text.timegm64:0000000000000000 $t
     /tmp/cc4CMdmh.s:1222   .text.timegm64:0000000000000000 timegm64
     /tmp/cc4CMdmh.s:1692   .text.timegm64:00000000000002b0 $d
     /tmp/cc4CMdmh.s:1698   .text.copy_tm_to_TM64:0000000000000000 $t
     /tmp/cc4CMdmh.s:1704   .text.copy_tm_to_TM64:0000000000000000 copy_tm_to_TM64
     /tmp/cc4CMdmh.s:1768   .text.copy_TM64_to_tm:0000000000000000 $t
     /tmp/cc4CMdmh.s:1774   .text.copy_TM64_to_tm:0000000000000000 copy_TM64_to_tm
     /tmp/cc4CMdmh.s:1838   .rodata.fake_localtime_r.str1.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:1842   .text.fake_localtime_r:0000000000000000 $t
     /tmp/cc4CMdmh.s:1848   .text.fake_localtime_r:0000000000000000 fake_localtime_r
     /tmp/cc4CMdmh.s:1929   .text.fake_localtime_r:0000000000000058 $d
     /tmp/cc4CMdmh.s:1936   .text.fake_gmtime_r:0000000000000000 $t
     /tmp/cc4CMdmh.s:1942   .text.fake_gmtime_r:0000000000000000 fake_gmtime_r
     /tmp/cc4CMdmh.s:2023   .text.fake_gmtime_r:0000000000000058 $d
     /tmp/cc4CMdmh.s:2030   .text.mktime64:0000000000000000 $t
     /tmp/cc4CMdmh.s:2036   .text.mktime64:0000000000000000 mktime64
     /tmp/cc4CMdmh.s:2178   .text.mktime64:000000000000009c $d
     /tmp/cc4CMdmh.s:2184   .text.timelocal64:0000000000000000 $t
     /tmp/cc4CMdmh.s:2190   .text.timelocal64:0000000000000000 timelocal64
     /tmp/cc4CMdmh.s:2213   .rodata.gmtime64_r.str1.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:2220   .text.gmtime64_r:0000000000000000 $t
     /tmp/cc4CMdmh.s:2226   .text.gmtime64_r:0000000000000000 gmtime64_r
     /tmp/cc4CMdmh.s:2969   .text.gmtime64_r:00000000000003a4 $d
     /tmp/cc4CMdmh.s:2983   .rodata.localtime64_r.str1.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:2990   .text.localtime64_r:0000000000000000 $t
     /tmp/cc4CMdmh.s:2996   .text.localtime64_r:0000000000000000 localtime64_r
     /tmp/cc4CMdmh.s:3259   .text.localtime64_r:000000000000012c $d
     /tmp/cc4CMdmh.s:3268   .text.valid_tm_wday:0000000000000000 $t
     /tmp/cc4CMdmh.s:3274   .text.valid_tm_wday:0000000000000000 valid_tm_wday
     /tmp/cc4CMdmh.s:3304   .text.valid_tm_mon:0000000000000000 $t
     /tmp/cc4CMdmh.s:3310   .text.valid_tm_mon:0000000000000000 valid_tm_mon
     /tmp/cc4CMdmh.s:3340   .rodata.asctime64_r.str1.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:3344   .text.asctime64_r:0000000000000000 $t
     /tmp/cc4CMdmh.s:3350   .text.asctime64_r:0000000000000000 asctime64_r
     /tmp/cc4CMdmh.s:3432   .text.asctime64_r:0000000000000054 $d
ARM GAS  /tmp/cc4CMdmh.s 			page 95


     /tmp/cc4CMdmh.s:3439   .text.ctime64_r:0000000000000000 $t
     /tmp/cc4CMdmh.s:3445   .text.ctime64_r:0000000000000000 ctime64_r
     /tmp/cc4CMdmh.s:3486   .text.localtime64:0000000000000000 $t
     /tmp/cc4CMdmh.s:3492   .text.localtime64:0000000000000000 localtime64
     /tmp/cc4CMdmh.s:3515   .text.localtime64:000000000000000c $d
     /tmp/cc4CMdmh.s:3520   .text.gmtime64:0000000000000000 $t
     /tmp/cc4CMdmh.s:3526   .text.gmtime64:0000000000000000 gmtime64
     /tmp/cc4CMdmh.s:3549   .text.gmtime64:000000000000000c $d
     /tmp/cc4CMdmh.s:3554   .text.asctime64:0000000000000000 $t
     /tmp/cc4CMdmh.s:3560   .text.asctime64:0000000000000000 asctime64
     /tmp/cc4CMdmh.s:3583   .text.asctime64:000000000000000c $d
     /tmp/cc4CMdmh.s:3588   .text.ctime64:0000000000000000 $t
     /tmp/cc4CMdmh.s:3594   .text.ctime64:0000000000000000 ctime64
     /tmp/cc4CMdmh.s:3620   .bss.Static_Return_Date:0000000000000000 $d
     /tmp/cc4CMdmh.s:3624   .bss.Static_Return_Date:0000000000000000 Static_Return_Date
     /tmp/cc4CMdmh.s:3627   .bss.Static_Return_String:0000000000000000 $d
     /tmp/cc4CMdmh.s:3631   .bss.Static_Return_String:0000000000000000 Static_Return_String
     /tmp/cc4CMdmh.s:3634   .data.mon_name:0000000000000000 $d
     /tmp/cc4CMdmh.s:3638   .data.mon_name:0000000000000000 mon_name
     /tmp/cc4CMdmh.s:3652   .data.wday_name:0000000000000000 $d
     /tmp/cc4CMdmh.s:3656   .data.wday_name:0000000000000000 wday_name
     /tmp/cc4CMdmh.s:3665   .rodata.SYSTEM_MKTIME_MAX:0000000000000000 $d
     /tmp/cc4CMdmh.s:3669   .rodata.SYSTEM_MKTIME_MAX:0000000000000000 SYSTEM_MKTIME_MAX
     /tmp/cc4CMdmh.s:3680   .rodata.SYSTEM_MKTIME_MIN:0000000000000000 $d
     /tmp/cc4CMdmh.s:3684   .rodata.SYSTEM_MKTIME_MIN:0000000000000000 SYSTEM_MKTIME_MIN
     /tmp/cc4CMdmh.s:3695   .rodata.__func__.0:0000000000000000 $d
     /tmp/cc4CMdmh.s:3699   .rodata.__func__.0:0000000000000000 __func__.0
     /tmp/cc4CMdmh.s:3702   .rodata.__func__.1:0000000000000000 $d
     /tmp/cc4CMdmh.s:3706   .rodata.__func__.1:0000000000000000 __func__.1
     /tmp/cc4CMdmh.s:3709   .rodata.__func__.2:0000000000000000 $d
     /tmp/cc4CMdmh.s:3713   .rodata.__func__.2:0000000000000000 __func__.2
     /tmp/cc4CMdmh.s:3716   .rodata.__func__.3:0000000000000000 $d
     /tmp/cc4CMdmh.s:3720   .rodata.__func__.3:0000000000000000 __func__.3
     /tmp/cc4CMdmh.s:3723   .rodata.__func__.4:0000000000000000 $d
     /tmp/cc4CMdmh.s:3727   .rodata.__func__.4:0000000000000000 __func__.4
     /tmp/cc4CMdmh.s:3730   .rodata.__func__.5:0000000000000000 $d
     /tmp/cc4CMdmh.s:3734   .rodata.__func__.5:0000000000000000 __func__.5
     /tmp/cc4CMdmh.s:3737   .rodata.days_in_month:0000000000000000 $d
     /tmp/cc4CMdmh.s:3741   .rodata.days_in_month:0000000000000000 days_in_month
     /tmp/cc4CMdmh.s:3745   .rodata.julian_days_by_month:0000000000000000 $d
     /tmp/cc4CMdmh.s:3749   .rodata.julian_days_by_month:0000000000000000 julian_days_by_month
     /tmp/cc4CMdmh.s:3775   .rodata.length_of_year:0000000000000000 $d
     /tmp/cc4CMdmh.s:3779   .rodata.length_of_year:0000000000000000 length_of_year
     /tmp/cc4CMdmh.s:3783   .rodata.safe_years_high:0000000000000000 $d
     /tmp/cc4CMdmh.s:3787   .rodata.safe_years_high:0000000000000000 safe_years_high
     /tmp/cc4CMdmh.s:3817   .rodata.safe_years_low:0000000000000000 $d
     /tmp/cc4CMdmh.s:3821   .rodata.safe_years_low:0000000000000000 safe_years_low

UNDEFINED SYMBOLS
__aeabi_ldivmod
__assert_func
memset
localtime
gmtime
mktime
__errno
localtime_r
ARM GAS  /tmp/cc4CMdmh.s 			page 96


sprintf
