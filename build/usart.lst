ARM GAS  /tmp/cc8CxLcc.s 			page 1


   1              		.cpu cortex-m3
   2              		.arch armv7-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"usart.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.MX_USART1_UART_Init,"ax",%progbits
  18              		.align	1
  19              		.global	MX_USART1_UART_Init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  24              	MX_USART1_UART_Init:
  25              	.LFB711:
  26              		.file 1 "Core/Src/usart.c"
   1:Core/Src/usart.c **** /* USER CODE BEGIN Header */
   2:Core/Src/usart.c **** /**
   3:Core/Src/usart.c ****   ******************************************************************************
   4:Core/Src/usart.c ****   * @file    usart.c
   5:Core/Src/usart.c ****   * @brief   This file provides code for the configuration
   6:Core/Src/usart.c ****   *          of the USART instances.
   7:Core/Src/usart.c ****   ******************************************************************************
   8:Core/Src/usart.c ****   * @attention
   9:Core/Src/usart.c ****   *
  10:Core/Src/usart.c ****   * Copyright (c) 2025 STMicroelectronics.
  11:Core/Src/usart.c ****   * All rights reserved.
  12:Core/Src/usart.c ****   *
  13:Core/Src/usart.c ****   * This software is licensed under terms that can be found in the LICENSE file
  14:Core/Src/usart.c ****   * in the root directory of this software component.
  15:Core/Src/usart.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  16:Core/Src/usart.c ****   *
  17:Core/Src/usart.c ****   ******************************************************************************
  18:Core/Src/usart.c ****   */
  19:Core/Src/usart.c **** /* USER CODE END Header */
  20:Core/Src/usart.c **** /* Includes ------------------------------------------------------------------*/
  21:Core/Src/usart.c **** #include "usart.h"
  22:Core/Src/usart.c **** 
  23:Core/Src/usart.c **** /* USER CODE BEGIN 0 */
  24:Core/Src/usart.c **** #define 	DBG_UART 			USART1
  25:Core/Src/usart.c **** 
  26:Core/Src/usart.c **** #ifdef __USE_DBG
  27:Core/Src/usart.c ****   char DBG_buffer[BUFFER_SIZE];
  28:Core/Src/usart.c **** #endif
  29:Core/Src/usart.c **** /* USER CODE END 0 */
  30:Core/Src/usart.c **** 
  31:Core/Src/usart.c **** /* USART1 init function */
  32:Core/Src/usart.c **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 2


  33:Core/Src/usart.c **** void MX_USART1_UART_Init(void)
  34:Core/Src/usart.c **** {
  27              		.loc 1 34 1 view -0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 64
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 24
  34              		.cfi_offset 4, -24
  35              		.cfi_offset 5, -20
  36              		.cfi_offset 6, -16
  37              		.cfi_offset 7, -12
  38              		.cfi_offset 8, -8
  39              		.cfi_offset 14, -4
  40 0004 90B0     		sub	sp, sp, #64
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 88
  35:Core/Src/usart.c **** 
  36:Core/Src/usart.c ****   /* USER CODE BEGIN USART1_Init 0 */
  37:Core/Src/usart.c **** 
  38:Core/Src/usart.c ****   /* USER CODE END USART1_Init 0 */
  39:Core/Src/usart.c **** 
  40:Core/Src/usart.c ****   LL_USART_InitTypeDef USART_InitStruct = {0};
  43              		.loc 1 40 3 view .LVU1
  44              		.loc 1 40 24 is_stmt 0 view .LVU2
  45 0006 0024     		movs	r4, #0
  46 0008 0994     		str	r4, [sp, #36]
  47 000a 0A94     		str	r4, [sp, #40]
  48 000c 0B94     		str	r4, [sp, #44]
  49 000e 0C94     		str	r4, [sp, #48]
  50 0010 0D94     		str	r4, [sp, #52]
  51 0012 0E94     		str	r4, [sp, #56]
  52 0014 0F94     		str	r4, [sp, #60]
  41:Core/Src/usart.c **** 
  42:Core/Src/usart.c ****   LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
  53              		.loc 1 42 3 is_stmt 1 view .LVU3
  54              		.loc 1 42 23 is_stmt 0 view .LVU4
  55 0016 0394     		str	r4, [sp, #12]
  56 0018 0494     		str	r4, [sp, #16]
  57 001a 0594     		str	r4, [sp, #20]
  58 001c 0694     		str	r4, [sp, #24]
  59 001e 0794     		str	r4, [sp, #28]
  60 0020 0894     		str	r4, [sp, #32]
  43:Core/Src/usart.c **** 
  44:Core/Src/usart.c ****   /* Peripheral clock enable */
  45:Core/Src/usart.c ****   LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
  61              		.loc 1 45 3 is_stmt 1 view .LVU5
  62              	.LVL0:
  63              	.LBB26:
  64              	.LBI26:
  65              		.file 2 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h"
   1:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @file    stm32l1xx_ll_bus.h
   4:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief   Header file of BUS LL module.
ARM GAS  /tmp/cc8CxLcc.s 			page 3


   6:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
   7:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   @verbatim
   8:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****                       ##### RCC Limitations #####
   9:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   ==============================================================================
  10:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****     [..]
  11:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****       A delay between an RCC peripheral clock enable and the effective peripheral
  12:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****       enabling should be taken into account in order to manage the peripheral read/write
  13:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****       from/to registers.
  14:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****       (+) This delay depends on the peripheral mapping.
  15:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****         (++) AHB & APB peripherals, 1 dummy read is necessary
  16:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  17:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****     [..]
  18:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****       Workarounds:
  19:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****       (#) For AHB & APB peripherals, a dummy read to the peripheral register has been
  20:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****           inserted in each LL_{BUS}_GRP{x}_EnableClock() function.
  21:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  22:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   @endverbatim
  23:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   ******************************************************************************
  24:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @attention
  25:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
  26:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * Copyright (c) 2017 STMicroelectronics.
  27:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * All rights reserved.
  28:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
  29:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * This software is licensed under terms that can be found in the LICENSE file in
  30:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * the root directory of this software component.
  31:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  32:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   ******************************************************************************
  33:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
  34:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  35:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  36:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #ifndef __STM32L1xx_LL_BUS_H
  37:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define __STM32L1xx_LL_BUS_H
  38:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  39:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #ifdef __cplusplus
  40:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** extern "C" {
  41:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif
  42:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  43:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Includes ------------------------------------------------------------------*/
  44:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #include "stm32l1xx.h"
  45:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  46:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @addtogroup STM32L1xx_LL_Driver
  47:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
  48:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
  49:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  50:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(RCC)
  51:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  52:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL BUS
  53:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
  54:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
  55:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  56:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Private types -------------------------------------------------------------*/
  57:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Private variables ---------------------------------------------------------*/
  58:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  59:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Private constants ---------------------------------------------------------*/
  60:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  61:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Private macros ------------------------------------------------------------*/
  62:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 4


  63:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Exported types ------------------------------------------------------------*/
  64:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Exported constants --------------------------------------------------------*/
  65:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Constants BUS Exported Constants
  66:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
  67:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
  68:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
  69:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_EC_AHB1_GRP1_PERIPH  AHB1 GRP1 PERIPH
  70:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
  71:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
  72:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
  73:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOA          RCC_AHBENR_GPIOAEN
  74:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOB          RCC_AHBENR_GPIOBEN
  75:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOC          RCC_AHBENR_GPIOCEN
  76:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOD          RCC_AHBENR_GPIODEN
  77:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(GPIOE)
  78:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOE          RCC_AHBENR_GPIOEEN
  79:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif/*GPIOE*/
  80:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOH          RCC_AHBENR_GPIOHEN
  81:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(GPIOF)
  82:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOF          RCC_AHBENR_GPIOFEN
  83:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif/*GPIOF*/
  84:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(GPIOG)
  85:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_GPIOG          RCC_AHBENR_GPIOGEN
  86:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif/*GPIOG*/
  87:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_SRAM           RCC_AHBLPENR_SRAMLPEN
  88:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRC            RCC_AHBENR_CRCEN
  89:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FLASH          RCC_AHBENR_FLITFEN
  90:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA1           RCC_AHBENR_DMA1EN
  91:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(DMA2)
  92:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_DMA2           RCC_AHBENR_DMA2EN
  93:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif/*DMA2*/
  94:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(AES)
  95:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_CRYP           RCC_AHBENR_AESEN
  96:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif/*AES*/
  97:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(FSMC_Bank1)
  98:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_AHB1_GRP1_PERIPH_FSMC           RCC_AHBENR_FSMCEN
  99:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif/*FSMC_Bank1*/
 100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @}
 102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB1_GRP1_PERIPH  APB1 GRP1 PERIPH
 105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
 106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_ALL            0xFFFFFFFFU
 108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM2           RCC_APB1ENR_TIM2EN
 109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM3           RCC_APB1ENR_TIM3EN
 110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM4           RCC_APB1ENR_TIM4EN
 111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(TIM5)
 112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM5           RCC_APB1ENR_TIM5EN
 113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif /*TIM5*/
 114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM6           RCC_APB1ENR_TIM6EN
 115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_TIM7           RCC_APB1ENR_TIM7EN
 116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(LCD)
 117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_LCD            RCC_APB1ENR_LCDEN
 118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif /*LCD*/
 119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_WWDG           RCC_APB1ENR_WWDGEN
ARM GAS  /tmp/cc8CxLcc.s 			page 5


 120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI2           RCC_APB1ENR_SPI2EN
 121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(SPI3)
 122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_SPI3           RCC_APB1ENR_SPI3EN
 123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif /*SPI3*/
 124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART2         RCC_APB1ENR_USART2EN
 125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USART3         RCC_APB1ENR_USART3EN
 126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(UART4)
 127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UART4          RCC_APB1ENR_UART4EN
 128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif /*UART4*/
 129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(UART5)
 130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_UART5          RCC_APB1ENR_UART5EN
 131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif /*UART5*/
 132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C1           RCC_APB1ENR_I2C1EN
 133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_I2C2           RCC_APB1ENR_I2C2EN
 134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_USB            RCC_APB1ENR_USBEN
 135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_PWR            RCC_APB1ENR_PWREN
 136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_DAC1           RCC_APB1ENR_DACEN
 137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_COMP           RCC_APB1ENR_COMPEN
 138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(OPAMP)
 139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Note: Peripherals COMP and OPAMP share the same clock domain */
 140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB1_GRP1_PERIPH_OPAMP          LL_APB1_GRP1_PERIPH_COMP
 141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif
 142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @}
 144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_EC_APB2_GRP1_PERIPH  APB2 GRP1 PERIPH
 147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
 148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ALL            0xFFFFFFFFU
 150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SYSCFG         RCC_APB2ENR_SYSCFGEN
 151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM9           RCC_APB2ENR_TIM9EN
 152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM10          RCC_APB2ENR_TIM10EN
 153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_TIM11          RCC_APB2ENR_TIM11EN
 154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_ADC1           RCC_APB2ENR_ADC1EN
 155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #if defined(SDIO)
 156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SDIO           RCC_APB2ENR_SDIOEN
 157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #endif /*SDIO*/
 158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_SPI1           RCC_APB2ENR_SPI1EN
 159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** #define LL_APB2_GRP1_PERIPH_USART1         RCC_APB2ENR_USART1EN
 160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @}
 162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @}
 166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Exported macro ------------------------------------------------------------*/
 169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /* Exported functions --------------------------------------------------------*/
 171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_Exported_Functions BUS Exported Functions
 172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
 173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_EF_AHB1 AHB1
 176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
ARM GAS  /tmp/cc8CxLcc.s 			page 6


 177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock.
 181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBENR       GPIOAEN       LL_AHB1_GRP1_EnableClock\n
 182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOBEN       LL_AHB1_GRP1_EnableClock\n
 183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOCEN       LL_AHB1_GRP1_EnableClock\n
 184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIODEN       LL_AHB1_GRP1_EnableClock\n
 185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOEEN       LL_AHB1_GRP1_EnableClock\n
 186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOHEN       LL_AHB1_GRP1_EnableClock\n
 187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOFEN       LL_AHB1_GRP1_EnableClock\n
 188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOGEN       LL_AHB1_GRP1_EnableClock\n
 189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_EnableClock\n
 190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_EnableClock\n
 191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       DMA1EN        LL_AHB1_GRP1_EnableClock\n
 192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_EnableClock\n
 193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       AESEN         LL_AHB1_GRP1_EnableClock\n
 194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       FSMCEN        LL_AHB1_GRP1_EnableClock
 195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
 215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
 218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
 221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Check if AHB1 peripheral clock is enabled or not
 225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBENR       GPIOAEN       LL_AHB1_GRP1_IsEnabledClock\n
 226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOBEN       LL_AHB1_GRP1_IsEnabledClock\n
 227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOCEN       LL_AHB1_GRP1_IsEnabledClock\n
 228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIODEN       LL_AHB1_GRP1_IsEnabledClock\n
 229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOEEN       LL_AHB1_GRP1_IsEnabledClock\n
 230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOHEN       LL_AHB1_GRP1_IsEnabledClock\n
 231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOFEN       LL_AHB1_GRP1_IsEnabledClock\n
 232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOGEN       LL_AHB1_GRP1_IsEnabledClock\n
 233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_IsEnabledClock\n
ARM GAS  /tmp/cc8CxLcc.s 			page 7


 234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_IsEnabledClock\n
 235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       DMA1EN        LL_AHB1_GRP1_IsEnabledClock\n
 236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_IsEnabledClock\n
 237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       AESEN         LL_AHB1_GRP1_IsEnabledClock\n
 238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       FSMCEN        LL_AHB1_GRP1_IsEnabledClock
 239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_AHB1_GRP1_IsEnabledClock(uint32_t Periphs)
 259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   return ((READ_BIT(RCC->AHBENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock.
 265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBENR       GPIOAEN       LL_AHB1_GRP1_DisableClock\n
 266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOBEN       LL_AHB1_GRP1_DisableClock\n
 267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOCEN       LL_AHB1_GRP1_DisableClock\n
 268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIODEN       LL_AHB1_GRP1_DisableClock\n
 269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOEEN       LL_AHB1_GRP1_DisableClock\n
 270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOHEN       LL_AHB1_GRP1_DisableClock\n
 271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOFEN       LL_AHB1_GRP1_DisableClock\n
 272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       GPIOGEN       LL_AHB1_GRP1_DisableClock\n
 273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       CRCEN         LL_AHB1_GRP1_DisableClock\n
 274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       FLITFEN       LL_AHB1_GRP1_DisableClock\n
 275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       DMA1EN        LL_AHB1_GRP1_DisableClock\n
 276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       DMA2EN        LL_AHB1_GRP1_DisableClock\n
 277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       AESEN         LL_AHB1_GRP1_DisableClock\n
 278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBENR       FSMCEN        LL_AHB1_GRP1_DisableClock
 279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
ARM GAS  /tmp/cc8CxLcc.s 			page 8


 291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClock(uint32_t Periphs)
 299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBENR, Periphs);
 301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Force AHB1 peripherals reset.
 305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBRSTR      GPIOARST      LL_AHB1_GRP1_ForceReset\n
 306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOBRST      LL_AHB1_GRP1_ForceReset\n
 307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOCRST      LL_AHB1_GRP1_ForceReset\n
 308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIODRST      LL_AHB1_GRP1_ForceReset\n
 309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOERST      LL_AHB1_GRP1_ForceReset\n
 310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOHRST      LL_AHB1_GRP1_ForceReset\n
 311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOFRST      LL_AHB1_GRP1_ForceReset\n
 312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOGRST      LL_AHB1_GRP1_ForceReset\n
 313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ForceReset\n
 314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      FLITFRST      LL_AHB1_GRP1_ForceReset\n
 315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      DMA1RST       LL_AHB1_GRP1_ForceReset\n
 316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      DMA2RST       LL_AHB1_GRP1_ForceReset\n
 317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      AESRST        LL_AHB1_GRP1_ForceReset\n
 318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      FSMCRST       LL_AHB1_GRP1_ForceReset
 319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ForceReset(uint32_t Periphs)
 340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->AHBRSTR, Periphs);
 342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Release AHB1 peripherals reset.
 346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBRSTR      GPIOARST      LL_AHB1_GRP1_ReleaseReset\n
 347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOBRST      LL_AHB1_GRP1_ReleaseReset\n
ARM GAS  /tmp/cc8CxLcc.s 			page 9


 348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOCRST      LL_AHB1_GRP1_ReleaseReset\n
 349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIODRST      LL_AHB1_GRP1_ReleaseReset\n
 350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOERST      LL_AHB1_GRP1_ReleaseReset\n
 351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOHRST      LL_AHB1_GRP1_ReleaseReset\n
 352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOFRST      LL_AHB1_GRP1_ReleaseReset\n
 353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      GPIOGRST      LL_AHB1_GRP1_ReleaseReset\n
 354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      CRCRST        LL_AHB1_GRP1_ReleaseReset\n
 355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      FLITFRST      LL_AHB1_GRP1_ReleaseReset\n
 356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      DMA1RST       LL_AHB1_GRP1_ReleaseReset\n
 357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      DMA2RST       LL_AHB1_GRP1_ReleaseReset\n
 358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      AESRST        LL_AHB1_GRP1_ReleaseReset\n
 359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBRSTR      FSMCRST       LL_AHB1_GRP1_ReleaseReset
 360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_ALL
 362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_ReleaseReset(uint32_t Periphs)
 381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBRSTR, Periphs);
 383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Enable AHB1 peripherals clock during Low Power (Sleep) mode.
 387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBLPENR     GPIOALPEN     LL_AHB1_GRP1_EnableClockSleep\n
 388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOBLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOCLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIODLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOELPEN     LL_AHB1_GRP1_EnableClockSleep\n
 392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOHLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOFLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOGLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     CRCLPEN       LL_AHB1_GRP1_EnableClockSleep\n
 396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     FLITFLPEN     LL_AHB1_GRP1_EnableClockSleep\n
 397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     SRAMLPEN      LL_AHB1_GRP1_EnableClockSleep\n
 398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     DMA1LPEN      LL_AHB1_GRP1_EnableClockSleep\n
 399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     DMA2LPEN      LL_AHB1_GRP1_EnableClockSleep\n
 400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     AESLPEN       LL_AHB1_GRP1_EnableClockSleep\n
 401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     FSMCLPEN      LL_AHB1_GRP1_EnableClockSleep
 402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
ARM GAS  /tmp/cc8CxLcc.s 			page 10


 405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
 416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_EnableClockSleep(uint32_t Periphs)
 423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->AHBLPENR, Periphs);
 426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->AHBLPENR, Periphs);
 428:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
 429:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 430:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 431:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 432:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Disable AHB1 peripherals clock during Low Power (Sleep) mode.
 433:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll AHBLPENR     GPIOALPEN     LL_AHB1_GRP1_DisableClockSleep\n
 434:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOBLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 435:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOCLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 436:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIODLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 437:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOELPEN     LL_AHB1_GRP1_DisableClockSleep\n
 438:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOHLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 439:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOFLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 440:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     GPIOGLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 441:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     CRCLPEN       LL_AHB1_GRP1_DisableClockSleep\n
 442:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     FLITFLPEN     LL_AHB1_GRP1_DisableClockSleep\n
 443:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     SRAMLPEN      LL_AHB1_GRP1_DisableClockSleep\n
 444:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     DMA1LPEN      LL_AHB1_GRP1_DisableClockSleep\n
 445:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     DMA2LPEN      LL_AHB1_GRP1_DisableClockSleep\n
 446:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     AESLPEN       LL_AHB1_GRP1_DisableClockSleep\n
 447:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         AHBLPENR     FSMCLPEN      LL_AHB1_GRP1_DisableClockSleep
 448:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 449:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOA
 450:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOB
 451:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOC
 452:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOD
 453:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOE (*)
 454:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOH
 455:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOF (*)
 456:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_GPIOG (*)
 457:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRC
 458:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FLASH
 459:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_SRAM
 460:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA1
 461:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_DMA2 (*)
ARM GAS  /tmp/cc8CxLcc.s 			page 11


 462:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_CRYP (*)
 463:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_AHB1_GRP1_PERIPH_FSMC (*)
 464:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 465:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 466:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 467:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 468:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_AHB1_GRP1_DisableClockSleep(uint32_t Periphs)
 469:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 470:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   CLEAR_BIT(RCC->AHBLPENR, Periphs);
 471:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 472:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 473:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 474:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @}
 475:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 476:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 477:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB1 APB1
 478:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
 479:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 480:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 481:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 482:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock.
 483:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1ENR      TIM2EN        LL_APB1_GRP1_EnableClock\n
 484:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_EnableClock\n
 485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_EnableClock\n
 486:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_EnableClock\n
 487:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_EnableClock\n
 488:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_EnableClock\n
 489:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      LCDEN         LL_APB1_GRP1_EnableClock\n
 490:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_EnableClock\n
 491:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_EnableClock\n
 492:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_EnableClock\n
 493:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_EnableClock\n
 494:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_EnableClock\n
 495:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_EnableClock\n
 496:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_EnableClock\n
 497:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_EnableClock\n
 498:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_EnableClock\n
 499:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_EnableClock\n
 500:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_EnableClock\n
 501:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      DACEN         LL_APB1_GRP1_EnableClock\n
 502:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      COMPEN        LL_APB1_GRP1_EnableClock
 503:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 504:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 505:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 506:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 507:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 508:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 509:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 510:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 511:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 512:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 513:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 514:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 515:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 516:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 517:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 518:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
ARM GAS  /tmp/cc8CxLcc.s 			page 12


 519:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 520:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 521:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 522:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 523:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 524:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 525:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 526:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 527:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 528:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 529:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 530:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 531:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 532:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->APB1ENR, Periphs);
 533:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 534:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 535:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
 536:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 537:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 538:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 539:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Check if APB1 peripheral clock is enabled or not
 540:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1ENR      TIM2EN        LL_APB1_GRP1_IsEnabledClock\n
 541:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_IsEnabledClock\n
 542:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_IsEnabledClock\n
 543:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_IsEnabledClock\n
 544:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_IsEnabledClock\n
 545:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_IsEnabledClock\n
 546:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      LCDEN         LL_APB1_GRP1_IsEnabledClock\n
 547:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_IsEnabledClock\n
 548:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_IsEnabledClock\n
 549:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_IsEnabledClock\n
 550:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_IsEnabledClock\n
 551:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_IsEnabledClock\n
 552:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_IsEnabledClock\n
 553:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_IsEnabledClock\n
 554:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_IsEnabledClock\n
 555:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_IsEnabledClock\n
 556:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_IsEnabledClock\n
 557:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_IsEnabledClock\n
 558:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      DACEN         LL_APB1_GRP1_IsEnabledClock\n
 559:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      COMPEN        LL_APB1_GRP1_IsEnabledClock
 560:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 561:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 562:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 563:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 564:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 565:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 566:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 567:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 568:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 569:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 570:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 571:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 572:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 573:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 574:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 575:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
ARM GAS  /tmp/cc8CxLcc.s 			page 13


 576:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 577:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 578:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 579:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 580:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 581:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 582:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 583:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 584:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval State of Periphs (1 or 0).
 585:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 586:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
 587:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 588:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   return ((READ_BIT(RCC->APB1ENR, Periphs) == (Periphs)) ? 1UL : 0UL);
 589:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 590:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 591:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 592:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Disable APB1 peripherals clock.
 593:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1ENR      TIM2EN        LL_APB1_GRP1_DisableClock\n
 594:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM3EN        LL_APB1_GRP1_DisableClock\n
 595:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM4EN        LL_APB1_GRP1_DisableClock\n
 596:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM5EN        LL_APB1_GRP1_DisableClock\n
 597:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM6EN        LL_APB1_GRP1_DisableClock\n
 598:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      TIM7EN        LL_APB1_GRP1_DisableClock\n
 599:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      LCDEN         LL_APB1_GRP1_DisableClock\n
 600:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      WWDGEN        LL_APB1_GRP1_DisableClock\n
 601:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      SPI2EN        LL_APB1_GRP1_DisableClock\n
 602:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      SPI3EN        LL_APB1_GRP1_DisableClock\n
 603:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USART2EN      LL_APB1_GRP1_DisableClock\n
 604:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USART3EN      LL_APB1_GRP1_DisableClock\n
 605:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      UART4EN       LL_APB1_GRP1_DisableClock\n
 606:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      UART5EN       LL_APB1_GRP1_DisableClock\n
 607:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      I2C1EN        LL_APB1_GRP1_DisableClock\n
 608:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      I2C2EN        LL_APB1_GRP1_DisableClock\n
 609:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      USBEN         LL_APB1_GRP1_DisableClock\n
 610:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      PWREN         LL_APB1_GRP1_DisableClock\n
 611:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      DACEN         LL_APB1_GRP1_DisableClock\n
 612:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1ENR      COMPEN        LL_APB1_GRP1_DisableClock
 613:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 614:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 615:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 616:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 617:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 618:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 619:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 620:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 621:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 622:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 623:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 624:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 625:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 626:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 627:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 628:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 629:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 630:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 631:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 632:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
ARM GAS  /tmp/cc8CxLcc.s 			page 14


 633:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 634:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 635:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 636:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 637:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 638:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 639:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
 640:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 641:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1ENR, Periphs);
 642:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 643:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 644:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 645:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Force APB1 peripherals reset.
 646:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1RSTR     TIM2RST       LL_APB1_GRP1_ForceReset\n
 647:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ForceReset\n
 648:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ForceReset\n
 649:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ForceReset\n
 650:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ForceReset\n
 651:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ForceReset\n
 652:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     LCDRST        LL_APB1_GRP1_ForceReset\n
 653:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ForceReset\n
 654:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ForceReset\n
 655:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ForceReset\n
 656:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     USART2RST     LL_APB1_GRP1_ForceReset\n
 657:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     USART3RST     LL_APB1_GRP1_ForceReset\n
 658:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     UART4RST      LL_APB1_GRP1_ForceReset\n
 659:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     UART5RST      LL_APB1_GRP1_ForceReset\n
 660:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ForceReset\n
 661:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ForceReset\n
 662:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     USBRST        LL_APB1_GRP1_ForceReset\n
 663:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     PWRRST        LL_APB1_GRP1_ForceReset\n
 664:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     DACRST        LL_APB1_GRP1_ForceReset\n
 665:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     COMPRST       LL_APB1_GRP1_ForceReset
 666:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 667:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
 668:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 669:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 670:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 671:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 672:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 673:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 674:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 675:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 676:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 677:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 678:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 679:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 680:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 681:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 682:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 683:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 684:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 685:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 686:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 687:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 688:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 689:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
ARM GAS  /tmp/cc8CxLcc.s 			page 15


 690:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 691:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 692:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 693:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_ForceReset(uint32_t Periphs)
 694:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 695:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->APB1RSTR, Periphs);
 696:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 697:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 698:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 699:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Release APB1 peripherals reset.
 700:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1RSTR     TIM2RST       LL_APB1_GRP1_ReleaseReset\n
 701:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM3RST       LL_APB1_GRP1_ReleaseReset\n
 702:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM4RST       LL_APB1_GRP1_ReleaseReset\n
 703:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM5RST       LL_APB1_GRP1_ReleaseReset\n
 704:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM6RST       LL_APB1_GRP1_ReleaseReset\n
 705:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     TIM7RST       LL_APB1_GRP1_ReleaseReset\n
 706:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     LCDRST        LL_APB1_GRP1_ReleaseReset\n
 707:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     WWDGRST       LL_APB1_GRP1_ReleaseReset\n
 708:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     SPI2RST       LL_APB1_GRP1_ReleaseReset\n
 709:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     SPI3RST       LL_APB1_GRP1_ReleaseReset\n
 710:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     USART2RST     LL_APB1_GRP1_ReleaseReset\n
 711:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     USART3RST     LL_APB1_GRP1_ReleaseReset\n
 712:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     UART4RST      LL_APB1_GRP1_ReleaseReset\n
 713:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     UART5RST      LL_APB1_GRP1_ReleaseReset\n
 714:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     I2C1RST       LL_APB1_GRP1_ReleaseReset\n
 715:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     I2C2RST       LL_APB1_GRP1_ReleaseReset\n
 716:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     USBRST        LL_APB1_GRP1_ReleaseReset\n
 717:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     PWRRST        LL_APB1_GRP1_ReleaseReset\n
 718:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     DACRST        LL_APB1_GRP1_ReleaseReset\n
 719:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1RSTR     COMPRST       LL_APB1_GRP1_ReleaseReset
 720:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 721:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_ALL
 722:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 723:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 724:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 725:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 726:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 727:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 728:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 729:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 730:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 731:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 732:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 733:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 734:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 735:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 736:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 737:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 738:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 739:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 740:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 741:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 742:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 743:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 744:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 745:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 746:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
ARM GAS  /tmp/cc8CxLcc.s 			page 16


 747:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_ReleaseReset(uint32_t Periphs)
 748:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 749:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1RSTR, Periphs);
 750:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 751:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 752:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 753:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Enable APB1 peripherals clock during Low Power (Sleep) mode.
 754:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1LPENR    TIM2LPEN      LL_APB1_GRP1_EnableClockSleep\n
 755:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM3LPEN      LL_APB1_GRP1_EnableClockSleep\n
 756:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM4LPEN      LL_APB1_GRP1_EnableClockSleep\n
 757:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM5LPEN      LL_APB1_GRP1_EnableClockSleep\n
 758:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM6LPEN      LL_APB1_GRP1_EnableClockSleep\n
 759:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM7LPEN      LL_APB1_GRP1_EnableClockSleep\n
 760:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    LCDLPEN       LL_APB1_GRP1_EnableClockSleep\n
 761:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    WWDGLPEN      LL_APB1_GRP1_EnableClockSleep\n
 762:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    SPI2LPEN      LL_APB1_GRP1_EnableClockSleep\n
 763:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    SPI3LPEN      LL_APB1_GRP1_EnableClockSleep\n
 764:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    USART2LPEN    LL_APB1_GRP1_EnableClockSleep\n
 765:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    USART3LPEN    LL_APB1_GRP1_EnableClockSleep\n
 766:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    UART4LPEN     LL_APB1_GRP1_EnableClockSleep\n
 767:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    UART5LPEN     LL_APB1_GRP1_EnableClockSleep\n
 768:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    I2C1LPEN      LL_APB1_GRP1_EnableClockSleep\n
 769:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    I2C2LPEN      LL_APB1_GRP1_EnableClockSleep\n
 770:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    USBLPEN       LL_APB1_GRP1_EnableClockSleep\n
 771:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    PWRLPEN       LL_APB1_GRP1_EnableClockSleep\n
 772:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    DACLPEN       LL_APB1_GRP1_EnableClockSleep\n
 773:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    COMPLPEN      LL_APB1_GRP1_EnableClockSleep
 774:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 775:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 776:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 777:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 778:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 779:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 780:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 781:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 782:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 783:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 784:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 785:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 786:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 787:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 788:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 789:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 790:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 791:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 792:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 793:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 794:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 795:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 796:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 797:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 798:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 799:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 800:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_EnableClockSleep(uint32_t Periphs)
 801:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 802:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   __IO uint32_t tmpreg;
 803:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->APB1LPENR, Periphs);
ARM GAS  /tmp/cc8CxLcc.s 			page 17


 804:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB1LPENR, Periphs);
 806:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
 807:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 808:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 809:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 810:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Disable APB1 peripherals clock during Low Power (Sleep) mode.
 811:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB1LPENR    TIM2LPEN      LL_APB1_GRP1_DisableClockSleep\n
 812:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM3LPEN      LL_APB1_GRP1_DisableClockSleep\n
 813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM4LPEN      LL_APB1_GRP1_DisableClockSleep\n
 814:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM5LPEN      LL_APB1_GRP1_DisableClockSleep\n
 815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM6LPEN      LL_APB1_GRP1_DisableClockSleep\n
 816:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    TIM7LPEN      LL_APB1_GRP1_DisableClockSleep\n
 817:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    LCDLPEN       LL_APB1_GRP1_DisableClockSleep\n
 818:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    WWDGLPEN      LL_APB1_GRP1_DisableClockSleep\n
 819:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    SPI2LPEN      LL_APB1_GRP1_DisableClockSleep\n
 820:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    SPI3LPEN      LL_APB1_GRP1_DisableClockSleep\n
 821:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    USART2LPEN    LL_APB1_GRP1_DisableClockSleep\n
 822:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    USART3LPEN    LL_APB1_GRP1_DisableClockSleep\n
 823:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    UART4LPEN     LL_APB1_GRP1_DisableClockSleep\n
 824:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    UART5LPEN     LL_APB1_GRP1_DisableClockSleep\n
 825:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    I2C1LPEN      LL_APB1_GRP1_DisableClockSleep\n
 826:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    I2C2LPEN      LL_APB1_GRP1_DisableClockSleep\n
 827:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    USBLPEN       LL_APB1_GRP1_DisableClockSleep\n
 828:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    PWRLPEN       LL_APB1_GRP1_DisableClockSleep\n
 829:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    DACLPEN       LL_APB1_GRP1_DisableClockSleep\n
 830:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB1LPENR    COMPLPEN      LL_APB1_GRP1_DisableClockSleep
 831:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 832:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM2
 833:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM3
 834:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM4
 835:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM5 (*)
 836:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM6
 837:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_TIM7
 838:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_LCD (*)
 839:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_WWDG
 840:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI2
 841:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_SPI3 (*)
 842:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART2
 843:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USART3
 844:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART4 (*)
 845:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_UART5 (*)
 846:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C1
 847:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_I2C2
 848:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_USB
 849:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_PWR
 850:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_DAC1
 851:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_COMP
 852:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB1_GRP1_PERIPH_OPAMP (*)
 853:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 854:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 855:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 856:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 857:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB1_GRP1_DisableClockSleep(uint32_t Periphs)
 858:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 859:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   CLEAR_BIT(RCC->APB1LPENR, Periphs);
 860:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 18


 861:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 862:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 863:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @}
 864:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 865:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 866:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /** @defgroup BUS_LL_EF_APB2 APB2
 867:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @{
 868:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   */
 869:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** 
 870:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** /**
 871:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @brief  Enable APB2 peripherals clock.
 872:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @rmtoll APB2ENR      SYSCFGEN      LL_APB2_GRP1_EnableClock\n
 873:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      TIM9EN        LL_APB2_GRP1_EnableClock\n
 874:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      TIM10EN       LL_APB2_GRP1_EnableClock\n
 875:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      TIM11EN       LL_APB2_GRP1_EnableClock\n
 876:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      ADC1EN        LL_APB2_GRP1_EnableClock\n
 877:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      SDIOEN        LL_APB2_GRP1_EnableClock\n
 878:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      SPI1EN        LL_APB2_GRP1_EnableClock\n
 879:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         APB2ENR      USART1EN      LL_APB2_GRP1_EnableClock
 880:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @param  Periphs This parameter can be a combination of the following values:
 881:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SYSCFG
 882:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM9
 883:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM10
 884:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_TIM11
 885:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_ADC1
 886:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SDIO (*)
 887:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_SPI1
 888:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         @arg @ref LL_APB2_GRP1_PERIPH_USART1
 889:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *
 890:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   *         (*) value not defined in all devices.
 891:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   * @retval None
 892:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** */
 893:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** __STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
  66              		.loc 2 893 22 view .LVU6
  67              	.LBB27:
 894:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
 895:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   __IO uint32_t tmpreg;
  68              		.loc 2 895 3 view .LVU7
 896:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->APB2ENR, Periphs);
  69              		.loc 2 896 3 view .LVU8
  70 0022 2B4B     		ldr	r3, .L4
  71 0024 1A6A     		ldr	r2, [r3, #32]
  72 0026 42F48042 		orr	r2, r2, #16384
  73 002a 1A62     		str	r2, [r3, #32]
 897:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
 898:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
  74              		.loc 2 898 3 view .LVU9
  75              		.loc 2 898 12 is_stmt 0 view .LVU10
  76 002c 1A6A     		ldr	r2, [r3, #32]
  77 002e 02F48042 		and	r2, r2, #16384
  78              		.loc 2 898 10 view .LVU11
  79 0032 0292     		str	r2, [sp, #8]
 899:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
  80              		.loc 2 899 3 is_stmt 1 view .LVU12
  81 0034 029A     		ldr	r2, [sp, #8]
  82              	.LVL1:
  83              		.loc 2 899 3 is_stmt 0 view .LVU13
ARM GAS  /tmp/cc8CxLcc.s 			page 19


  84              	.LBE27:
  85              	.LBE26:
  46:Core/Src/usart.c **** 
  47:Core/Src/usart.c ****   LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
  86              		.loc 1 47 3 is_stmt 1 view .LVU14
  87              	.LBB28:
  88              	.LBI28:
 214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** {
  89              		.loc 2 214 22 view .LVU15
  90              	.LBB29:
 216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   SET_BIT(RCC->AHBENR, Periphs);
  91              		.loc 2 216 3 view .LVU16
 217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   /* Delay after an RCC peripheral clock enabling */
  92              		.loc 2 217 3 view .LVU17
  93 0036 DA69     		ldr	r2, [r3, #28]
  94 0038 42F00102 		orr	r2, r2, #1
  95 003c DA61     		str	r2, [r3, #28]
 219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
  96              		.loc 2 219 3 view .LVU18
 219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
  97              		.loc 2 219 12 is_stmt 0 view .LVU19
  98 003e DB69     		ldr	r3, [r3, #28]
  99 0040 03F00103 		and	r3, r3, #1
 219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h ****   (void)tmpreg;
 100              		.loc 2 219 10 view .LVU20
 101 0044 0193     		str	r3, [sp, #4]
 220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 102              		.loc 2 220 3 is_stmt 1 view .LVU21
 103 0046 019B     		ldr	r3, [sp, #4]
 104              	.LVL2:
 220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_bus.h **** }
 105              		.loc 2 220 3 is_stmt 0 view .LVU22
 106              	.LBE29:
 107              	.LBE28:
  48:Core/Src/usart.c ****   /**USART1 GPIO Configuration
  49:Core/Src/usart.c ****   PA9   ------> USART1_TX
  50:Core/Src/usart.c ****   PA10   ------> USART1_RX
  51:Core/Src/usart.c ****   */
  52:Core/Src/usart.c ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_9;
 108              		.loc 1 52 3 is_stmt 1 view .LVU23
 109              		.loc 1 52 23 is_stmt 0 view .LVU24
 110 0048 4FF40073 		mov	r3, #512
 111 004c 0393     		str	r3, [sp, #12]
  53:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 112              		.loc 1 53 3 is_stmt 1 view .LVU25
 113              		.loc 1 53 24 is_stmt 0 view .LVU26
 114 004e 4FF00208 		mov	r8, #2
 115 0052 CDF81080 		str	r8, [sp, #16]
  54:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 116              		.loc 1 54 3 is_stmt 1 view .LVU27
 117              		.loc 1 54 25 is_stmt 0 view .LVU28
 118 0056 0327     		movs	r7, #3
 119 0058 0597     		str	r7, [sp, #20]
  55:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 120              		.loc 1 55 3 is_stmt 1 view .LVU29
  56:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 121              		.loc 1 56 3 view .LVU30
ARM GAS  /tmp/cc8CxLcc.s 			page 20


  57:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 122              		.loc 1 57 3 view .LVU31
 123              		.loc 1 57 29 is_stmt 0 view .LVU32
 124 005a 0726     		movs	r6, #7
 125 005c 0896     		str	r6, [sp, #32]
  58:Core/Src/usart.c ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 126              		.loc 1 58 3 is_stmt 1 view .LVU33
 127 005e 1D4D     		ldr	r5, .L4+4
 128 0060 03A9     		add	r1, sp, #12
 129 0062 2846     		mov	r0, r5
 130 0064 FFF7FEFF 		bl	LL_GPIO_Init
 131              	.LVL3:
  59:Core/Src/usart.c **** 
  60:Core/Src/usart.c ****   GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 132              		.loc 1 60 3 view .LVU34
 133              		.loc 1 60 23 is_stmt 0 view .LVU35
 134 0068 4FF48063 		mov	r3, #1024
 135 006c 0393     		str	r3, [sp, #12]
  61:Core/Src/usart.c ****   GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 136              		.loc 1 61 3 is_stmt 1 view .LVU36
 137              		.loc 1 61 24 is_stmt 0 view .LVU37
 138 006e CDF81080 		str	r8, [sp, #16]
  62:Core/Src/usart.c ****   GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 139              		.loc 1 62 3 is_stmt 1 view .LVU38
 140              		.loc 1 62 25 is_stmt 0 view .LVU39
 141 0072 0597     		str	r7, [sp, #20]
  63:Core/Src/usart.c ****   GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 142              		.loc 1 63 3 is_stmt 1 view .LVU40
 143              		.loc 1 63 30 is_stmt 0 view .LVU41
 144 0074 0694     		str	r4, [sp, #24]
  64:Core/Src/usart.c ****   GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 145              		.loc 1 64 3 is_stmt 1 view .LVU42
 146              		.loc 1 64 24 is_stmt 0 view .LVU43
 147 0076 0794     		str	r4, [sp, #28]
  65:Core/Src/usart.c ****   GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 148              		.loc 1 65 3 is_stmt 1 view .LVU44
 149              		.loc 1 65 29 is_stmt 0 view .LVU45
 150 0078 0896     		str	r6, [sp, #32]
  66:Core/Src/usart.c ****   LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 151              		.loc 1 66 3 is_stmt 1 view .LVU46
 152 007a 03A9     		add	r1, sp, #12
 153 007c 2846     		mov	r0, r5
 154 007e FFF7FEFF 		bl	LL_GPIO_Init
 155              	.LVL4:
  67:Core/Src/usart.c **** 
  68:Core/Src/usart.c ****   /* USER CODE BEGIN USART1_Init 1 */
  69:Core/Src/usart.c **** 
  70:Core/Src/usart.c ****   /* USER CODE END USART1_Init 1 */
  71:Core/Src/usart.c ****   USART_InitStruct.BaudRate = 115200;
 156              		.loc 1 71 3 view .LVU47
 157              		.loc 1 71 29 is_stmt 0 view .LVU48
 158 0082 4FF4E133 		mov	r3, #115200
 159 0086 0993     		str	r3, [sp, #36]
  72:Core/Src/usart.c ****   USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 160              		.loc 1 72 3 is_stmt 1 view .LVU49
 161              		.loc 1 72 30 is_stmt 0 view .LVU50
 162 0088 0A94     		str	r4, [sp, #40]
ARM GAS  /tmp/cc8CxLcc.s 			page 21


  73:Core/Src/usart.c ****   USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 163              		.loc 1 73 3 is_stmt 1 view .LVU51
 164              		.loc 1 73 29 is_stmt 0 view .LVU52
 165 008a 0B94     		str	r4, [sp, #44]
  74:Core/Src/usart.c ****   USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 166              		.loc 1 74 3 is_stmt 1 view .LVU53
 167              		.loc 1 74 27 is_stmt 0 view .LVU54
 168 008c 0C94     		str	r4, [sp, #48]
  75:Core/Src/usart.c ****   USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 169              		.loc 1 75 3 is_stmt 1 view .LVU55
 170              		.loc 1 75 38 is_stmt 0 view .LVU56
 171 008e 0C23     		movs	r3, #12
 172 0090 0D93     		str	r3, [sp, #52]
  76:Core/Src/usart.c ****   USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 173              		.loc 1 76 3 is_stmt 1 view .LVU57
 174              		.loc 1 76 40 is_stmt 0 view .LVU58
 175 0092 0E94     		str	r4, [sp, #56]
  77:Core/Src/usart.c ****   USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 176              		.loc 1 77 3 is_stmt 1 view .LVU59
 177              		.loc 1 77 33 is_stmt 0 view .LVU60
 178 0094 0F94     		str	r4, [sp, #60]
  78:Core/Src/usart.c ****   LL_USART_Init(USART1, &USART_InitStruct);
 179              		.loc 1 78 3 is_stmt 1 view .LVU61
 180 0096 09A9     		add	r1, sp, #36
 181 0098 0F48     		ldr	r0, .L4+8
 182 009a FFF7FEFF 		bl	LL_USART_Init
 183              	.LVL5:
  79:Core/Src/usart.c ****   LL_USART_DisableIT_CTS(USART1);
 184              		.loc 1 79 3 view .LVU62
 185              	.LBB30:
 186              	.LBI30:
 187              		.file 3 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h"
   1:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
   2:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ******************************************************************************
   3:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @file    stm32l1xx_ll_usart.h
   4:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @author  MCD Application Team
   5:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief   Header file of USART LL module.
   6:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ******************************************************************************
   7:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @attention
   8:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *
   9:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * Copyright (c) 2016 STMicroelectronics.
  10:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * All rights reserved.
  11:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *
  12:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * in the root directory of this software component.
  14:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *
  16:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ******************************************************************************
  17:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  18:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  19:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  20:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #ifndef __STM32L1xx_LL_USART_H
  21:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __STM32L1xx_LL_USART_H
  22:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  23:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #ifdef __cplusplus
  24:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** extern "C" {
  25:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif
ARM GAS  /tmp/cc8CxLcc.s 			page 22


  26:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  27:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Includes ------------------------------------------------------------------*/
  28:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #include "stm32l1xx.h"
  29:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  30:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @addtogroup STM32L1xx_LL_Driver
  31:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  32:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  33:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  34:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined (USART1) || defined (USART2) || defined (USART3) || defined (UART4) || defined (UART5)
  35:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  36:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL USART
  37:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  38:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  39:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  40:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private types -------------------------------------------------------------*/
  41:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private variables ---------------------------------------------------------*/
  42:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  43:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private constants ---------------------------------------------------------*/
  44:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Private_Constants USART Private Constants
  45:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  46:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  47:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  48:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Defines used for the bit position in the register and perform offsets*/
  49:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define USART_POSITION_GTPR_GT                  USART_GTPR_GT_Pos
  50:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
  51:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
  52:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  53:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  54:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Private macros ------------------------------------------------------------*/
  55:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  56:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Private_Macros USART Private Macros
  57:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  58:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  59:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
  60:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
  61:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  62:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
  63:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  64:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported types ------------------------------------------------------------*/
  65:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
  66:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_ES_INIT USART Exported Init structures
  67:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
  68:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  69:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  70:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
  71:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief LL USART Init Structure definition
  72:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
  73:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** typedef struct
  74:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
  75:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t BaudRate;                  /*!< This field defines expected Usart communication baud rat
  76:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  77:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  78:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  79:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t DataWidth;                 /*!< Specifies the number of data bits transmitted or receive
  80:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DATAWI
  81:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  82:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
ARM GAS  /tmp/cc8CxLcc.s 			page 23


  83:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  84:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t StopBits;                  /*!< Specifies the number of stop bits transmitted.
  85:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_STOPBI
  86:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  87:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  88:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  89:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t Parity;                    /*!< Specifies the parity mode.
  90:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PARITY
  91:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  92:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  93:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  94:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t TransferDirection;         /*!< Specifies whether the Receive and/or Transmit mode is en
  95:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_DIRECT
  96:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  97:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
  98:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
  99:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t HardwareFlowControl;       /*!< Specifies whether the hardware flow control mode is enab
 100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_HWCONT
 101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t OverSampling;              /*!< Specifies whether USART oversampling mode is 16 or 8.
 105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_OVERSA
 106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This feature can be modified afterwards using unitary fu
 108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** } LL_USART_InitTypeDef;
 110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief LL USART Clock Init Structure definition
 113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** typedef struct
 115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t ClockOutput;               /*!< Specifies whether the USART clock is enabled or disabled
 117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_CLOCK.
 118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            @ref LL_USART_EnableSCLKOutput() or @ref LL_USART_Disabl
 121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t ClockPolarity;             /*!< Specifies the steady state of the serial clock.
 124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_POLARI
 125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t ClockPhase;                /*!< Specifies the clock transition on which the bit capture 
 130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_PHASE.
 131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
 133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t LastBitClockPulse;         /*!< Specifies whether the clock pulse corresponding to the l
 136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            data bit (MSB) has to be output on the SCLK pin in synch
 137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            This parameter can be a value of @ref USART_LL_EC_LASTCL
 138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            USART HW configuration can be modified afterwards using 
ARM GAS  /tmp/cc8CxLcc.s 			page 24


 140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                            For more details, refer to description of this function.
 141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** } LL_USART_ClockInitTypeDef;
 143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif /* USE_FULL_LL_DRIVER */
 148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported constants --------------------------------------------------------*/
 150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Constants USART Exported Constants
 151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_GET_FLAG Get Flags Defines
 155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief    Flags defines which can be used with LL_USART_ReadReg function
 156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_PE                          USART_SR_PE                   /*!< Parity error fla
 159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_FE                          USART_SR_FE                   /*!< Framing error fl
 160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_NE                          USART_SR_NE                   /*!< Noise detected f
 161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_ORE                         USART_SR_ORE                  /*!< Overrun error fl
 162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_IDLE                        USART_SR_IDLE                 /*!< Idle line detect
 163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_RXNE                        USART_SR_RXNE                 /*!< Read data regist
 164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_TC                          USART_SR_TC                   /*!< Transmission com
 165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_TXE                         USART_SR_TXE                  /*!< Transmit data re
 166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_LBD                         USART_SR_LBD                  /*!< LIN break detect
 167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_SR_CTS                         USART_SR_CTS                  /*!< CTS flag */
 168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_IT IT Defines
 173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief    IT defines which can be used with LL_USART_ReadReg and  LL_USART_WriteReg functions
 174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_IDLEIE                     USART_CR1_IDLEIE              /*!< IDLE interrupt e
 177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_RXNEIE                     USART_CR1_RXNEIE              /*!< Read data regist
 178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_TCIE                       USART_CR1_TCIE                /*!< Transmission com
 179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_TXEIE                      USART_CR1_TXEIE               /*!< Transmit data re
 180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR1_PEIE                       USART_CR1_PEIE                /*!< Parity error */
 181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR2_LBDIE                      USART_CR2_LBDIE               /*!< LIN break detect
 182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR3_EIE                        USART_CR3_EIE                 /*!< Error interrupt 
 183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CR3_CTSIE                      USART_CR3_CTSIE               /*!< CTS interrupt en
 184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_DIRECTION Communication Direction
 189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_NONE                 0x00000000U                        /*!< Transmitter
 192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_RX                   USART_CR1_RE                       /*!< Transmitter
 193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_TX                   USART_CR1_TE                       /*!< Transmitter
 194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DIRECTION_TX_RX                (USART_CR1_TE |USART_CR1_RE)       /*!< Transmitter
 195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
ARM GAS  /tmp/cc8CxLcc.s 			page 25


 197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_PARITY Parity Control
 200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PARITY_NONE                    0x00000000U                          /*!< Parity co
 203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PARITY_EVEN                    USART_CR1_PCE                        /*!< Parity co
 204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PARITY_ODD                     (USART_CR1_PCE | USART_CR1_PS)       /*!< Parity co
 205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_WAKEUP Wakeup
 210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_WAKEUP_IDLELINE                0x00000000U           /*!<  USART wake up from Mute
 213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_WAKEUP_ADDRESSMARK             USART_CR1_WAKE        /*!<  USART wake up from Mute
 214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_DATAWIDTH Datawidth
 219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DATAWIDTH_8B                   0x00000000U             /*!< 8 bits word length : S
 222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_DATAWIDTH_9B                   USART_CR1_M             /*!< 9 bits word length : S
 223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_OVERSAMPLING Oversampling
 228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_16                0x00000000U            /*!< Oversampling by 16 */
 231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_OVERSAMPLING_8                 USART_CR1_OVER8        /*!< Oversampling by 8 */
 232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #if defined(USE_FULL_LL_DRIVER)
 237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_CLOCK Clock Signal
 238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CLOCK_DISABLE                  0x00000000U            /*!< Clock signal not provid
 242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_CLOCK_ENABLE                   USART_CR2_CLKEN        /*!< Clock signal provided *
 243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #endif /*USE_FULL_LL_DRIVER*/
 247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_LASTCLKPULSE Last Clock Pulse
 249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_NO_OUTPUT         0x00000000U           /*!< The clock pulse of the l
 252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LASTCLKPULSE_OUTPUT            USART_CR2_LBCL        /*!< The clock pulse of the l
 253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
ARM GAS  /tmp/cc8CxLcc.s 			page 26


 254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_PHASE Clock Phase
 258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PHASE_1EDGE                    0x00000000U           /*!< The first clock transiti
 261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_PHASE_2EDGE                    USART_CR2_CPHA        /*!< The second clock transit
 262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_POLARITY Clock Polarity
 267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_POLARITY_LOW                   0x00000000U           /*!< Steady low value on SCLK
 270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_POLARITY_HIGH                  USART_CR2_CPOL        /*!< Steady high value on SCL
 271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_STOPBITS Stop Bits
 276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_0_5                   USART_CR2_STOP_0                           /*!< 0.5
 279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_1                     0x00000000U                                /*!< 1 s
 280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_1_5                   (USART_CR2_STOP_0 | USART_CR2_STOP_1)      /*!< 1.5
 281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_STOPBITS_2                     USART_CR2_STOP_1                           /*!< 2 s
 282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_HWCONTROL Hardware Control
 287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_NONE                 0x00000000U                          /*!< CTS and R
 290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS                  USART_CR3_RTSE                       /*!< RTS outpu
 291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_CTS                  USART_CR3_CTSE                       /*!< CTS mode 
 292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_HWCONTROL_RTS_CTS              (USART_CR3_RTSE | USART_CR3_CTSE)    /*!< CTS and R
 293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_IRDA_POWER IrDA Power
 298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_IRDA_POWER_NORMAL              0x00000000U           /*!< IrDA normal power mode *
 301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_IRDA_POWER_LOW                 USART_CR3_IRLP        /*!< IrDA low power mode */
 302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EC_LINBREAK_DETECT LIN Break Detection Length
 307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_10B            0x00000000U           /*!< 10-bit break detection m
 310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_LINBREAK_DETECT_11B            USART_CR2_LBDL        /*!< 11-bit break detection m
ARM GAS  /tmp/cc8CxLcc.s 			page 27


 311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported macro ------------------------------------------------------------*/
 320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Macros USART Exported Macros
 321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EM_WRITE_READ Common Write and read registers Macros
 325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Write a value in USART register
 330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __REG__ Register to be written
 332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __VALUE__ Value to be written in the register
 333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VAL
 336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Read a value in USART register
 339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __INSTANCE__ USART Instance
 340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __REG__ Register to be read
 341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Register value
 342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
 344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EM_Exported_Macros_Helper Exported Macros Helper
 349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         expected Baud Rate in 8 bits sampling mode (32 bits value of USARTDIV is returned)
 355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_8 case
 358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8_100(__PERIPHCLK__, __BAUDRATE__)      (((__PERIPHCLK__)*25)/(2*(__
 360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (__LL_USART_DIV_SAMPLING8_10
 361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)      (((__LL_USART_DIV_SAMPLING8_
 362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                          + 50) / 100)
 363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* UART BRR = mantissa + overflow + fraction
 364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****             = (UART DIVMANT << 4) + ((UART DIVFRAQ & 0xF8) << 1) + (UART DIVFRAQ & 0x07) */
 365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__)             (((__LL_USART_DIVMANT_SAM
 366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                             ((__LL_USART_DIVFRAQ_SA
 367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
ARM GAS  /tmp/cc8CxLcc.s 			page 28


 368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Compute USARTDIV value according to Peripheral Clock and
 371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         expected Baud Rate in 16 bits sampling mode (32 bits value of USARTDIV is returned)
 372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __PERIPHCLK__ Peripheral Clock frequency used for USART instance
 373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  __BAUDRATE__ Baud rate value to achieve
 374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval USARTDIV value to be used for BRR register filling in OverSampling_16 case
 375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16_100(__PERIPHCLK__, __BAUDRATE__)     (((__PERIPHCLK__)*25)/(4*(__
 377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVMANT_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     (__LL_USART_DIV_SAMPLING16_1
 378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIVFRAQ_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)     ((((__LL_USART_DIV_SAMPLING1
 379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                          + 50) / 100)
 380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* USART BRR = mantissa + overflow + fraction
 381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****             = (USART DIVMANT << 4) + (USART DIVFRAQ & 0xF0) + (USART DIVFRAQ & 0x0F) */
 382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** #define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__)            (((__LL_USART_DIVMANT_SAM
 383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                             (__LL_USART_DIVFRAQ_SAM
 384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                                                            (__LL_USART_DIVFRAQ_SAMP
 385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
 392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /* Exported functions --------------------------------------------------------*/
 395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_Exported_Functions USART Exported Functions
 397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration Configuration functions
 401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
 402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  USART Enable
 406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Enable
 407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
 411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR1, USART_CR1_UE);
 413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  USART Disable (all USART prescalers and outputs are disabled)
 417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   When USART is disabled, USART prescalers and outputs are stopped immediately,
 418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         and current operations are discarded. The configuration of the USART is kept, but all t
 419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         flags, in the USARTx_SR are set to their default values.
 420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_Disable
 421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
ARM GAS  /tmp/cc8CxLcc.s 			page 29


 425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 428:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 429:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 430:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if USART is enabled
 431:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          UE            LL_USART_IsEnabled
 432:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 433:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 434:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 435:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabled(const USART_TypeDef *USARTx)
 436:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 437:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 438:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 439:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 440:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 441:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Receiver Enable (Receiver is enabled and begins searching for a start bit)
 442:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_EnableDirectionRx
 443:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 444:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 445:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 446:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionRx(USART_TypeDef *USARTx)
 447:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 448:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RE);
 449:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 450:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 451:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 452:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Receiver Disable
 453:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_DisableDirectionRx
 454:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 455:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 456:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 457:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionRx(USART_TypeDef *USARTx)
 458:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 459:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RE);
 460:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 461:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 462:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 463:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Transmitter Enable
 464:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_EnableDirectionTx
 465:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 466:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 467:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 468:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDirectionTx(USART_TypeDef *USARTx)
 469:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 470:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TE);
 471:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 472:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 473:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 474:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Transmitter Disable
 475:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TE            LL_USART_DisableDirectionTx
 476:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 477:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 478:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 479:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDirectionTx(USART_TypeDef *USARTx)
 480:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 481:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TE);
ARM GAS  /tmp/cc8CxLcc.s 			page 30


 482:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 483:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 484:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure simultaneously enabled/disabled states
 486:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         of Transmitter and Receiver
 487:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_SetTransferDirection\n
 488:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          TE            LL_USART_SetTransferDirection
 489:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 490:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  TransferDirection This parameter can be one of the following values:
 491:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 492:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 493:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 494:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 495:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 496:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 497:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetTransferDirection(USART_TypeDef *USARTx, uint32_t TransferDirectio
 498:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 499:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 500:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 501:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 502:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 503:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return enabled/disabled states of Transmitter and Receiver
 504:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RE            LL_USART_GetTransferDirection\n
 505:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          TE            LL_USART_GetTransferDirection
 506:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 507:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 508:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_NONE
 509:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_RX
 510:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX
 511:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DIRECTION_TX_RX
 512:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 513:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetTransferDirection(const USART_TypeDef *USARTx)
 514:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 515:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_RE | USART_CR1_TE));
 516:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 517:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 518:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 519:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure Parity (enabled/disabled and parity mode if enabled).
 520:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   This function selects if hardware parity control (generation and detection) is enabled 
 521:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         When the parity control is enabled (Odd or Even), computed parity bit is inserted at th
 522:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (9th or 8th bit depending on data width) and parity is checked on the received data.
 523:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_SetParity\n
 524:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_SetParity
 525:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 526:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 527:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 528:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 529:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 530:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 531:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 532:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetParity(USART_TypeDef *USARTx, uint32_t Parity)
 533:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 534:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 535:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 536:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 537:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 538:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Parity configuration (enabled/disabled and parity mode if enabled)
ARM GAS  /tmp/cc8CxLcc.s 			page 31


 539:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_GetParity\n
 540:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_GetParity
 541:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 542:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 543:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 544:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 545:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 546:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 547:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetParity(const USART_TypeDef *USARTx)
 548:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 549:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 550:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 551:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 552:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 553:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Receiver Wake Up method from Mute mode.
 554:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_SetWakeUpMethod
 555:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 556:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Method This parameter can be one of the following values:
 557:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 558:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 559:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 560:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 561:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetWakeUpMethod(USART_TypeDef *USARTx, uint32_t Method)
 562:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 563:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_WAKE, Method);
 564:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 565:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 566:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 567:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Receiver Wake Up method from Mute mode
 568:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          WAKE          LL_USART_GetWakeUpMethod
 569:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 570:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 571:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_IDLELINE
 572:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_WAKEUP_ADDRESSMARK
 573:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 574:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetWakeUpMethod(const USART_TypeDef *USARTx)
 575:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 576:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_WAKE));
 577:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 578:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 579:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 580:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Word length (i.e. nb of data bits, excluding start and stop bits)
 581:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_SetDataWidth
 582:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 583:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 584:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 585:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 586:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 587:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 588:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetDataWidth(USART_TypeDef *USARTx, uint32_t DataWidth)
 589:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 590:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 591:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 592:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 593:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 594:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Word length (i.e. nb of data bits, excluding start and stop bits)
 595:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          M             LL_USART_GetDataWidth
ARM GAS  /tmp/cc8CxLcc.s 			page 32


 596:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 597:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 598:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 599:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 600:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 601:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetDataWidth(const USART_TypeDef *USARTx)
 602:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 603:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 604:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 605:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 606:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 607:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Oversampling to 8-bit or 16-bit mode
 608:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_SetOverSampling
 609:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 610:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
 611:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 612:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 613:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 614:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 615:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetOverSampling(USART_TypeDef *USARTx, uint32_t OverSampling)
 616:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 617:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_OVER8, OverSampling);
 618:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 619:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 620:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 621:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Oversampling mode
 622:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          OVER8         LL_USART_GetOverSampling
 623:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 624:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 625:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
 626:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
 627:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 628:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetOverSampling(const USART_TypeDef *USARTx)
 629:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 630:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_OVER8));
 631:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 632:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 633:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 634:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure if Clock pulse of the last data bit is output to the SCLK pin or not
 635:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 636:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 637:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_SetLastClkPulseOutput
 638:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 639:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  LastBitClockPulse This parameter can be one of the following values:
 640:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 641:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 642:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 643:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 644:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLastClkPulseOutput(USART_TypeDef *USARTx, uint32_t LastBitClockPul
 645:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 646:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBCL, LastBitClockPulse);
 647:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 648:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 649:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 650:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Retrieve Clock pulse of the last data bit output configuration
 651:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (Last bit Clock pulse output to the SCLK pin or not)
 652:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc8CxLcc.s 			page 33


 653:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 654:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBCL          LL_USART_GetLastClkPulseOutput
 655:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 656:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 657:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 658:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 659:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 660:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLastClkPulseOutput(const USART_TypeDef *USARTx)
 661:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 662:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBCL));
 663:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 664:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 665:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 666:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Select the phase of the clock output on the SCLK pin in synchronous mode
 667:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 668:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 669:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_SetClockPhase
 670:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 671:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  ClockPhase This parameter can be one of the following values:
 672:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 673:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 674:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 675:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 676:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPhase(USART_TypeDef *USARTx, uint32_t ClockPhase)
 677:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 678:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA, ClockPhase);
 679:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 680:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 681:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 682:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return phase of the clock output on the SCLK pin in synchronous mode
 683:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 684:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 685:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_GetClockPhase
 686:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 687:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 688:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 689:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 690:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 691:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPhase(const USART_TypeDef *USARTx)
 692:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 693:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPHA));
 694:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 695:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 696:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 697:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Select the polarity of the clock output on the SCLK pin in synchronous mode
 698:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 699:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 700:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_SetClockPolarity
 701:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 702:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  ClockPolarity This parameter can be one of the following values:
 703:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 704:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 705:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 706:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 707:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetClockPolarity(USART_TypeDef *USARTx, uint32_t ClockPolarity)
 708:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 709:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPOL, ClockPolarity);
ARM GAS  /tmp/cc8CxLcc.s 			page 34


 710:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 711:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 712:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 713:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return polarity of the clock output on the SCLK pin in synchronous mode
 714:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 715:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 716:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPOL          LL_USART_GetClockPolarity
 717:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 718:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 719:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 720:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 721:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 722:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetClockPolarity(const USART_TypeDef *USARTx)
 723:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 724:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_CPOL));
 725:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 726:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 727:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 728:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure Clock signal format (Phase Polarity and choice about output of last bit clock
 729:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 730:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 731:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 732:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clock Phase configuration using @ref LL_USART_SetClockPhase() function
 733:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clock Polarity configuration using @ref LL_USART_SetClockPolarity() function
 734:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Output of Last bit Clock pulse configuration using @ref LL_USART_SetLastClkPulseOutpu
 735:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CPHA          LL_USART_ConfigClock\n
 736:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CPOL          LL_USART_ConfigClock\n
 737:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          LBCL          LL_USART_ConfigClock
 738:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 739:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Phase This parameter can be one of the following values:
 740:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_1EDGE
 741:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
 742:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Polarity This parameter can be one of the following values:
 743:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_LOW
 744:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_POLARITY_HIGH
 745:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  LBCPOutput This parameter can be one of the following values:
 746:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_NO_OUTPUT
 747:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LASTCLKPULSE_OUTPUT
 748:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 749:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 750:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigClock(USART_TypeDef *USARTx, uint32_t Phase, uint32_t Polarity,
 751:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 752:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_LBCL, Phase | Polarity | LBCP
 753:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 754:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 755:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 756:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Clock output on SCLK pin
 757:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 758:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 759:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_EnableSCLKOutput
 760:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 761:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 762:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 763:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSCLKOutput(USART_TypeDef *USARTx)
 764:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 765:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
 766:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 35


 767:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 768:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 769:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Clock output on SCLK pin
 770:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 771:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 772:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_DisableSCLKOutput
 773:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 774:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 775:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 776:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSCLKOutput(USART_TypeDef *USARTx)
 777:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 778:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_CLKEN);
 779:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 780:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 781:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 782:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Clock output on SCLK pin is enabled
 783:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
 784:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
 785:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_IsEnabledSCLKOutput
 786:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 787:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 788:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 789:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSCLKOutput(const USART_TypeDef *USARTx)
 790:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 791:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_CLKEN) == (USART_CR2_CLKEN));
 792:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 793:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 794:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 795:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set the length of the stop bits
 796:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_SetStopBitsLength
 797:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 798:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 799:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 800:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 801:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 802:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 803:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 804:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
 806:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 807:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 808:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 809:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 810:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 811:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Retrieve the length of the stop bits
 812:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          STOP          LL_USART_GetStopBitsLength
 813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 814:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 816:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 817:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 818:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 819:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 820:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(const USART_TypeDef *USARTx)
 821:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 822:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 823:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 36


 824:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 825:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 826:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure Character frame format (Datawidth, Parity control, Stop Bits)
 827:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
 828:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Data Width configuration using @ref LL_USART_SetDataWidth() function
 829:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Parity Control and mode configuration using @ref LL_USART_SetParity() function
 830:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Stop bits configuration using @ref LL_USART_SetStopBitsLength() function
 831:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PS            LL_USART_ConfigCharacter\n
 832:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          PCE           LL_USART_ConfigCharacter\n
 833:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR1          M             LL_USART_ConfigCharacter\n
 834:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigCharacter
 835:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 836:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  DataWidth This parameter can be one of the following values:
 837:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_8B
 838:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_DATAWIDTH_9B
 839:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Parity This parameter can be one of the following values:
 840:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_NONE
 841:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_EVEN
 842:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PARITY_ODD
 843:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  StopBits This parameter can be one of the following values:
 844:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_0_5
 845:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1
 846:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_1_5
 847:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_STOPBITS_2
 848:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 849:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 850:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigCharacter(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t P
 851:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                               uint32_t StopBits)
 852:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 853:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 854:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 855:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 856:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 857:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 858:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Address of the USART node.
 859:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   This is used in multiprocessor communication during Mute mode or Stop mode,
 860:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         for wake up with address mark detection.
 861:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_SetNodeAddress
 862:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 863:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  NodeAddress 4 bit Address of the USART node.
 864:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 865:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 866:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetNodeAddress(USART_TypeDef *USARTx, uint32_t NodeAddress)
 867:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 868:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_ADD, (NodeAddress & USART_CR2_ADD));
 869:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 870:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 871:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 872:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return 4 bit Address of the USART node as set in ADD field of CR2.
 873:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   only 4bits (b3-b0) of returned value are relevant (b31-b4 are not relevant)
 874:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          ADD           LL_USART_GetNodeAddress
 875:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 876:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Address of the USART node (Value between Min_Data=0 and Max_Data=255)
 877:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 878:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetNodeAddress(const USART_TypeDef *USARTx)
 879:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 880:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_ADD));
ARM GAS  /tmp/cc8CxLcc.s 			page 37


 881:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 882:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 883:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 884:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable RTS HW Flow Control
 885:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 886:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 887:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_EnableRTSHWFlowCtrl
 888:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 889:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 890:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 891:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 892:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 893:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_RTSE);
 894:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 895:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 896:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 897:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable RTS HW Flow Control
 898:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 899:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 900:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_DisableRTSHWFlowCtrl
 901:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 902:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 903:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 904:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableRTSHWFlowCtrl(USART_TypeDef *USARTx)
 905:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 906:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_RTSE);
 907:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 908:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 909:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 910:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable CTS HW Flow Control
 911:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 912:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 913:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_EnableCTSHWFlowCtrl
 914:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 915:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 916:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 917:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 918:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 919:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_CTSE);
 920:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 921:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 922:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 923:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable CTS HW Flow Control
 924:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 925:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 926:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSE          LL_USART_DisableCTSHWFlowCtrl
 927:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 928:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 929:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 930:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableCTSHWFlowCtrl(USART_TypeDef *USARTx)
 931:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 932:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_CTSE);
 933:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 934:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 935:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 936:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure HW Flow Control mode (both CTS and RTS)
 937:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
ARM GAS  /tmp/cc8CxLcc.s 			page 38


 938:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 939:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_SetHWFlowCtrl\n
 940:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_SetHWFlowCtrl
 941:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 942:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  HardwareFlowControl This parameter can be one of the following values:
 943:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 944:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 945:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 946:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 947:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 948:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 949:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
 950:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 951:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 952:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 953:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 954:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 955:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return HW Flow Control configuration (both CTS and RTS)
 956:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
 957:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
 958:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          RTSE          LL_USART_GetHWFlowCtrl\n
 959:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          CTSE          LL_USART_GetHWFlowCtrl
 960:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 961:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
 962:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_NONE
 963:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS
 964:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_CTS
 965:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
 966:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 967:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(const USART_TypeDef *USARTx)
 968:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 969:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 970:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 971:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 972:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 973:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable One bit sampling method
 974:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_EnableOneBitSamp
 975:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 976:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 977:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 978:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableOneBitSamp(USART_TypeDef *USARTx)
 979:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 980:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 981:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 982:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 983:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
 984:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable One bit sampling method
 985:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_DisableOneBitSamp
 986:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 987:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
 988:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
 989:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableOneBitSamp(USART_TypeDef *USARTx)
 990:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 991:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_ONEBIT);
 992:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 993:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
 994:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
ARM GAS  /tmp/cc8CxLcc.s 			page 39


 995:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if One bit sampling method is enabled
 996:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          ONEBIT        LL_USART_IsEnabledOneBitSamp
 997:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
 998:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
 999:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1000:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledOneBitSamp(const USART_TypeDef *USARTx)
1001:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1002:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_ONEBIT) == (USART_CR3_ONEBIT));
1003:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1004:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1005:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1006:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure USART BRR register for achieving expected Baud Rate value.
1007:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Compute and set USARTDIV value in BRR Register (full BRR content)
1008:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         according to used Peripheral Clock, Oversampling mode, and expected Baud Rate values
1009:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Peripheral clock and Baud rate values provided as function parameters should be valid
1010:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (Baud rate value != 0)
1011:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_SetBaudRate
1012:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1013:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1014:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1015:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1016:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1017:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  BaudRate Baud Rate
1018:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1019:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1020:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverS
1021:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****                                           uint32_t BaudRate)
1022:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1023:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1024:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1025:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
1026:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1027:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   else
1028:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1029:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
1030:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1031:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1032:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1033:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1034:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return current Baud Rate value, according to USARTDIV present in BRR register
1035:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (full BRR content), and to used Peripheral Clock and Oversampling mode values
1036:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In case of non-initialized or invalid value stored in BRR register, value 0 will be ret
1037:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll BRR          BRR           LL_USART_GetBaudRate
1038:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1039:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PeriphClk Peripheral Clock
1040:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  OverSampling This parameter can be one of the following values:
1041:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_16
1042:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_OVERSAMPLING_8
1043:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Baud Rate
1044:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1045:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetBaudRate(const USART_TypeDef *USARTx, uint32_t PeriphClk, uint
1046:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1047:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t usartdiv = 0x0U;
1048:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   uint32_t brrresult = 0x0U;
1049:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1050:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   usartdiv = USARTx->BRR;
1051:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 40


1052:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   if (OverSampling == LL_USART_OVERSAMPLING_8)
1053:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1054:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     if ((usartdiv & 0xFFF7U) != 0U)
1055:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     {
1056:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****       usartdiv = (uint16_t)((usartdiv & 0xFFF0U) | ((usartdiv & 0x0007U) << 1U)) ;
1057:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****       brrresult = (PeriphClk * 2U) / usartdiv;
1058:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     }
1059:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1060:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   else
1061:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   {
1062:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     if ((usartdiv & 0xFFFFU) != 0U)
1063:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     {
1064:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****       brrresult = PeriphClk / usartdiv;
1065:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****     }
1066:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   }
1067:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (brrresult);
1068:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1069:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1070:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1071:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1072:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1073:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1074:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_IRDA Configuration functions related to Irda feature
1075:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1076:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1077:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1078:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1079:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable IrDA mode
1080:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1081:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1082:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_EnableIrda
1083:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1084:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1085:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1086:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIrda(USART_TypeDef *USARTx)
1087:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1088:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1089:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1090:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1091:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1092:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable IrDA mode
1093:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1094:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1095:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_DisableIrda
1096:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1097:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1098:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1099:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIrda(USART_TypeDef *USARTx)
1100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_IREN);
1102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if IrDA mode is enabled
1106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IREN          LL_USART_IsEnabledIrda
ARM GAS  /tmp/cc8CxLcc.s 			page 41


1109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIrda(const USART_TypeDef *USARTx)
1113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_IREN) == (USART_CR3_IREN));
1115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Configure IrDA Power Mode (Normal or Low Power)
1119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_SetIrdaPowerMode
1122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PowerMode This parameter can be one of the following values:
1124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_LOW
1126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPowerMode(USART_TypeDef *USARTx, uint32_t PowerMode)
1129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR3, USART_CR3_IRLP, PowerMode);
1131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Retrieve IrDA Power Mode configuration (Normal or Low Power)
1135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          IRLP          LL_USART_GetIrdaPowerMode
1138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_IRDA_POWER_NORMAL
1141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_PHASE_2EDGE
1142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPowerMode(const USART_TypeDef *USARTx)
1144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_IRLP));
1146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Irda prescaler value, used for dividing the USART clock source
1150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
1151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetIrdaPrescaler
1154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0x00 and Max_Data=0xFF
1156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetIrdaPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Irda prescaler value, used for dividing the USART clock source
1165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         to achieve the Irda Low Power frequency (8 bits value)
ARM GAS  /tmp/cc8CxLcc.s 			page 42


1166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetIrdaPrescaler
1169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Irda prescaler value (Value between Min_Data=0x00 and Max_Data=0xFF)
1171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetIrdaPrescaler(const USART_TypeDef *USARTx)
1173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_Smartcard Configuration functions related to Smartcard feat
1182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Smartcard NACK transmission
1187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_EnableSmartcardNACK
1190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcardNACK(USART_TypeDef *USARTx)
1194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_NACK);
1196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Smartcard NACK transmission
1200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_DisableSmartcardNACK
1203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcardNACK(USART_TypeDef *USARTx)
1207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_NACK);
1209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Smartcard NACK transmission is enabled
1213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          NACK          LL_USART_IsEnabledSmartcardNACK
1216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcardNACK(const USART_TypeDef *USARTx)
1220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_NACK) == (USART_CR3_NACK));
1222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 43


1223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Smartcard mode
1226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_EnableSmartcard
1229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableSmartcard(USART_TypeDef *USARTx)
1233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Smartcard mode
1239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_DisableSmartcard
1242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableSmartcard(USART_TypeDef *USARTx)
1246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_SCEN);
1248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Smartcard mode is enabled
1252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          SCEN          LL_USART_IsEnabledSmartcard
1255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledSmartcard(const USART_TypeDef *USARTx)
1259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_SCEN) == (USART_CR3_SCEN));
1261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Smartcard prescaler value, used for dividing the USART clock
1265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_SetSmartcardPrescaler
1269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  PrescalerValue Value between Min_Data=0 and Max_Data=31
1271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardPrescaler(USART_TypeDef *USARTx, uint32_t PrescalerValue)
1274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_PSC, PrescalerValue);
1276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Smartcard prescaler value, used for dividing the USART clock
ARM GAS  /tmp/cc8CxLcc.s 			page 44


1280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         source to provide the SMARTCARD Clock (5 bits value)
1281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         PSC           LL_USART_GetSmartcardPrescaler
1284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Smartcard prescaler value (Value between Min_Data=0 and Max_Data=31)
1286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardPrescaler(const USART_TypeDef *USARTx)
1288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_PSC));
1290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set Smartcard Guard time value, expressed in nb of baud clocks periods
1294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_SetSmartcardGuardTime
1298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  GuardTime Value between Min_Data=0x00 and Max_Data=0xFF
1300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetSmartcardGuardTime(USART_TypeDef *USARTx, uint32_t GuardTime)
1303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->GTPR, USART_GTPR_GT, GuardTime << USART_POSITION_GTPR_GT);
1305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return Smartcard Guard time value, expressed in nb of baud clocks periods
1309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (GT[7:0] bits : Guard time value)
1310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll GTPR         GT            LL_USART_GetSmartcardGuardTime
1313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Smartcard Guard time value (Value between Min_Data=0x00 and Max_Data=0xFF)
1315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetSmartcardGuardTime(const USART_TypeDef *USARTx)
1317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->GTPR, USART_GTPR_GT) >> USART_POSITION_GTPR_GT);
1319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_HalfDuplex Configuration functions related to Half Duplex f
1326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Single Wire Half-Duplex mode
1331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_EnableHalfDuplex
1334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
ARM GAS  /tmp/cc8CxLcc.s 			page 45


1337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableHalfDuplex(USART_TypeDef *USARTx)
1338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Single Wire Half-Duplex mode
1344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_DisableHalfDuplex
1347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableHalfDuplex(USART_TypeDef *USARTx)
1351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, USART_CR3_HDSEL);
1353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if Single Wire Half-Duplex mode is enabled
1357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          HDSEL         LL_USART_IsEnabledHalfDuplex
1360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledHalfDuplex(const USART_TypeDef *USARTx)
1364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_HDSEL) == (USART_CR3_HDSEL));
1366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Configuration_LIN Configuration functions related to LIN feature
1373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Set LIN Break Detection Length
1378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_SetLINBrkDetectionLen
1381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  LINBDLength This parameter can be one of the following values:
1383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_SetLINBrkDetectionLen(USART_TypeDef *USARTx, uint32_t LINBDLength)
1388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   MODIFY_REG(USARTx->CR2, USART_CR2_LBDL, LINBDLength);
1390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Return LIN Break Detection Length
ARM GAS  /tmp/cc8CxLcc.s 			page 46


1394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDL          LL_USART_GetLINBrkDetectionLen
1397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Returned value can be one of the following values:
1399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_10B
1400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         @arg @ref LL_USART_LINBREAK_DETECT_11B
1401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_GetLINBrkDetectionLen(const USART_TypeDef *USARTx)
1403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_LBDL));
1405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable LIN mode
1409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_EnableLIN
1412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableLIN(USART_TypeDef *USARTx)
1416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable LIN mode
1422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_DisableLIN
1425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1428:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableLIN(USART_TypeDef *USARTx)
1429:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1430:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LINEN);
1431:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1432:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1433:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1434:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Indicate if LIN mode is enabled
1435:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1436:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1437:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_IsEnabledLIN
1438:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1439:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1440:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1441:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledLIN(const USART_TypeDef *USARTx)
1442:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1443:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LINEN) == (USART_CR2_LINEN));
1444:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1445:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1446:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1447:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1448:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1449:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1450:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_AdvancedConfiguration Advanced Configurations services
ARM GAS  /tmp/cc8CxLcc.s 			page 47


1451:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1452:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1453:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1454:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1455:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Asynchronous Mode (UART)
1456:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In UART mode, the following bits must be kept cleared:
1457:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1458:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1459:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1460:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1461:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1462:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1463:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1464:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1465:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1466:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1467:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1468:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Asynchronous Mode
1469:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1470:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1471:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigAsyncMode\n
1472:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigAsyncMode\n
1473:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigAsyncMode\n
1474:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigAsyncMode\n
1475:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigAsyncMode
1476:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1477:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1478:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1479:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
1480:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1481:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Asynchronous mode, the following bits must be kept cleared:
1482:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN, CLKEN bits in the USART_CR2 register,
1483:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1484:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1486:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1487:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1488:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1489:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Synchronous Mode
1490:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In Synchronous mode, the following bits must be kept cleared:
1491:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1492:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1493:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1494:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1495:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also sets the USART in Synchronous mode.
1496:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_USART_INSTANCE(USARTx) can be used to check whether or not
1497:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Synchronous mode is supported by the USARTx instance.
1498:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1499:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1500:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1501:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1502:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1503:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1504:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Synchronous Mode
1505:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, Clock Polarity, ...) should be set using
1506:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1507:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSyncMode\n
ARM GAS  /tmp/cc8CxLcc.s 			page 48


1508:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSyncMode\n
1509:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSyncMode\n
1510:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigSyncMode\n
1511:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSyncMode
1512:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1513:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1514:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1515:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSyncMode(USART_TypeDef *USARTx)
1516:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1517:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Synchronous mode, the following bits must be kept cleared:
1518:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1519:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
1520:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1521:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
1522:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in Synchronous mode */
1523:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_CLKEN);
1524:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1525:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1526:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1527:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in LIN Mode
1528:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In LIN mode, the following bits must be kept cleared:
1529:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1530:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1531:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1532:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1533:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also set the UART/USART in LIN mode.
1534:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1535:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1536:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1537:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1538:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1539:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1540:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1541:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1542:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set LINEN in CR2 using @ref LL_USART_EnableLIN() function
1543:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to LIN Mode
1544:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, LIN Break Detection Length, ...) should be set using
1545:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1546:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          CLKEN         LL_USART_ConfigLINMode\n
1547:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigLINMode\n
1548:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          LINEN         LL_USART_ConfigLINMode\n
1549:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigLINMode\n
1550:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigLINMode\n
1551:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigLINMode
1552:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1553:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1554:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1555:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigLINMode(USART_TypeDef *USARTx)
1556:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1557:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In LIN mode, the following bits must be kept cleared:
1558:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - STOP and CLKEN bits in the USART_CR2 register,
1559:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1560:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_CLKEN | USART_CR2_STOP));
1561:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_SCEN | USART_CR3_HDSEL));
1562:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* Set the UART/USART in LIN mode */
1563:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LINEN);
1564:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 49


1565:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1566:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1567:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Half Duplex Mode
1568:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In Half Duplex mode, the following bits must be kept cleared:
1569:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1570:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1571:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1572:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1573:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also sets the UART/USART in Half Duplex mode.
1574:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HALFDUPLEX_INSTANCE(USARTx) can be used to check whether or not
1575:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Half-Duplex mode is supported by the USARTx instance.
1576:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1577:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1578:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1579:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1580:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1581:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set HDSEL in CR3 using @ref LL_USART_EnableHalfDuplex() function
1582:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Half Duplex Mode
1583:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1584:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1585:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigHalfDuplexMode\n
1586:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigHalfDuplexMode\n
1587:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigHalfDuplexMode\n
1588:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigHalfDuplexMode\n
1589:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
1590:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1591:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1592:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1593:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
1594:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1595:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Half Duplex mode, the following bits must be kept cleared:
1596:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1597:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN and IREN bits in the USART_CR3 register.*/
1598:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1599:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
1600:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in Half Duplex mode */
1601:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
1602:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1603:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1604:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1605:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Smartcard Mode
1606:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In Smartcard mode, the following bits must be kept cleared:
1607:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1608:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1609:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1610:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also configures Stop bits to 1.5 bits and
1611:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         sets the USART in Smartcard mode (SCEN bit).
1612:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Clock Output is also enabled (CLKEN).
1613:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_SMARTCARD_INSTANCE(USARTx) can be used to check whether or not
1614:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Smartcard feature is supported by the USARTx instance.
1615:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1616:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1617:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1618:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1619:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1620:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set CLKEN in CR2 using @ref LL_USART_EnableSCLKOutput() function
1621:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set SCEN in CR3 using @ref LL_USART_EnableSmartcard() function
ARM GAS  /tmp/cc8CxLcc.s 			page 50


1622:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Smartcard Mode
1623:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Parity, ...) should be set using
1624:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1625:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigSmartcardMode\n
1626:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigSmartcardMode\n
1627:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigSmartcardMode\n
1628:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigSmartcardMode\n
1629:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigSmartcardMode
1630:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1631:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1632:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1633:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigSmartcardMode(USART_TypeDef *USARTx)
1634:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1635:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Smartcard mode, the following bits must be kept cleared:
1636:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN bit in the USART_CR2 register,
1637:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - IREN and HDSEL bits in the USART_CR3 register.*/
1638:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN));
1639:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_IREN | USART_CR3_HDSEL));
1640:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* Configure Stop bits to 1.5 bits */
1641:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* Synchronous mode is activated by default */
1642:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, (USART_CR2_STOP_0 | USART_CR2_STOP_1 | USART_CR2_CLKEN));
1643:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in Smartcard mode */
1644:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_SCEN);
1645:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1646:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1647:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1648:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Irda Mode
1649:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In IRDA mode, the following bits must be kept cleared:
1650:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1651:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - STOP and CLKEN bits in the USART_CR2 register,
1652:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1653:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1654:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         This function also sets the UART/USART in IRDA mode (IREN bit).
1655:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_IRDA_INSTANCE(USARTx) can be used to check whether or not
1656:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         IrDA feature is supported by the USARTx instance.
1657:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1658:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1659:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1660:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1661:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1662:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Configure STOP in CR2 using @ref LL_USART_SetStopBitsLength() function
1663:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Set IREN in CR3 using @ref LL_USART_EnableIrda() function
1664:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Irda Mode
1665:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Word length, Power mode, ...) should be set using
1666:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1667:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigIrdaMode\n
1668:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigIrdaMode\n
1669:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          STOP          LL_USART_ConfigIrdaMode\n
1670:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigIrdaMode\n
1671:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigIrdaMode\n
1672:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigIrdaMode
1673:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1674:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1675:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1676:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigIrdaMode(USART_TypeDef *USARTx)
1677:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1678:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In IRDA mode, the following bits must be kept cleared:
ARM GAS  /tmp/cc8CxLcc.s 			page 51


1679:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN, STOP and CLKEN bits in the USART_CR2 register,
1680:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - SCEN and HDSEL bits in the USART_CR3 register.*/
1681:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
1682:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
1683:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* set the UART/USART in IRDA mode */
1684:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR3, USART_CR3_IREN);
1685:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1686:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1687:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1688:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Perform basic configuration of USART for enabling use in Multi processor Mode
1689:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (several USARTs connected in a network, one of the USARTs can be the master,
1690:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         its TX output connected to the RX inputs of the other slaves USARTs).
1691:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   In MultiProcessor mode, the following bits must be kept cleared:
1692:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - LINEN bit in the USART_CR2 register,
1693:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - CLKEN bit in the USART_CR2 register,
1694:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - SCEN bit in the USART_CR3 register,
1695:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - IREN bit in the USART_CR3 register,
1696:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           - HDSEL bit in the USART_CR3 register.
1697:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Call of this function is equivalent to following function call sequence :
1698:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear LINEN in CR2 using @ref LL_USART_DisableLIN() function
1699:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear CLKEN in CR2 using @ref LL_USART_DisableSCLKOutput() function
1700:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear SCEN in CR3 using @ref LL_USART_DisableSmartcard() function
1701:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear IREN in CR3 using @ref LL_USART_DisableIrda() function
1702:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         - Clear HDSEL in CR3 using @ref LL_USART_DisableHalfDuplex() function
1703:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Other remaining configurations items related to Multi processor Mode
1704:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         (as Baud Rate, Wake Up Method, Node address, ...) should be set using
1705:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         dedicated functions
1706:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LINEN         LL_USART_ConfigMultiProcessMode\n
1707:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR2          CLKEN         LL_USART_ConfigMultiProcessMode\n
1708:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          SCEN          LL_USART_ConfigMultiProcessMode\n
1709:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          HDSEL         LL_USART_ConfigMultiProcessMode\n
1710:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         CR3          IREN          LL_USART_ConfigMultiProcessMode
1711:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1712:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1713:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1714:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ConfigMultiProcessMode(USART_TypeDef *USARTx)
1715:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1716:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* In Multi Processor mode, the following bits must be kept cleared:
1717:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - LINEN and CLKEN bits in the USART_CR2 register,
1718:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   - IREN, SCEN and HDSEL bits in the USART_CR3 register.*/
1719:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
1720:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
1721:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1722:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1723:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1724:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
1725:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1726:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1727:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_FLAG_Management FLAG_Management
1728:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
1729:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1730:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1731:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1732:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Flag is set or not
1733:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_IsActiveFlag_PE
1734:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1735:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cc8CxLcc.s 			page 52


1736:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1737:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_PE(const USART_TypeDef *USARTx)
1738:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1739:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
1740:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1741:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1742:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1743:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Framing Error Flag is set or not
1744:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_IsActiveFlag_FE
1745:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1746:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1747:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1748:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_FE(const USART_TypeDef *USARTx)
1749:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1750:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
1751:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1752:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1753:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1754:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Noise error detected Flag is set or not
1755:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_IsActiveFlag_NE
1756:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1757:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1758:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1759:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_NE(const USART_TypeDef *USARTx)
1760:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1761:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
1762:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1763:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1764:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1765:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART OverRun Error Flag is set or not
1766:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_IsActiveFlag_ORE
1767:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1768:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1769:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1770:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_ORE(const USART_TypeDef *USARTx)
1771:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1772:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
1773:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1774:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1775:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1776:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART IDLE line detected Flag is set or not
1777:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_IsActiveFlag_IDLE
1778:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1779:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1780:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1781:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
1782:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1783:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
1784:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1785:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1786:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1787:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Read Data Register Not Empty Flag is set or not
1788:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_IsActiveFlag_RXNE
1789:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1790:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1791:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1792:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(const USART_TypeDef *USARTx)
ARM GAS  /tmp/cc8CxLcc.s 			page 53


1793:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1794:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
1795:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1796:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1797:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1798:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Flag is set or not
1799:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_IsActiveFlag_TC
1800:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1801:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1802:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1803:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
1804:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
1806:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1807:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1808:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1809:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Transmit Data Register Empty Flag is set or not
1810:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
1811:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1812:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1813:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1814:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
1815:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1816:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
1817:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1818:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1819:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1820:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Flag is set or not
1821:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1822:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1823:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_IsActiveFlag_LBD
1824:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1825:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1826:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1827:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_LBD(const USART_TypeDef *USARTx)
1828:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1829:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_LBD) == (USART_SR_LBD));
1830:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1831:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1832:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1833:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART CTS Flag is set or not
1834:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
1835:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
1836:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_IsActiveFlag_nCTS
1837:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1838:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1839:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1840:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_nCTS(const USART_TypeDef *USARTx)
1841:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1842:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->SR, USART_SR_CTS) == (USART_SR_CTS));
1843:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1844:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1845:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1846:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Send Break Flag is set or not
1847:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          SBK           LL_USART_IsActiveFlag_SBK
1848:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1849:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
ARM GAS  /tmp/cc8CxLcc.s 			page 54


1850:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1851:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_SBK(const USART_TypeDef *USARTx)
1852:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1853:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_SBK) == (USART_CR1_SBK));
1854:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1855:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1856:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1857:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Receive Wake Up from mute mode Flag is set or not
1858:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RWU           LL_USART_IsActiveFlag_RWU
1859:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1860:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
1861:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1862:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RWU(const USART_TypeDef *USARTx)
1863:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1864:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RWU) == (USART_CR1_RWU));
1865:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1866:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1867:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1868:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Parity Error Flag
1869:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1870:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1871:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1872:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         NE, FE, ORE, IDLE would also be cleared.
1873:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           PE            LL_USART_ClearFlag_PE
1874:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1875:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1876:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1877:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
1878:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1879:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1880:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1881:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1882:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1883:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1884:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1885:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1886:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1887:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Framing Error Flag
1888:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1889:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1890:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1891:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, NE, ORE, IDLE would also be cleared.
1892:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           FE            LL_USART_ClearFlag_FE
1893:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1894:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1895:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1896:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_FE(USART_TypeDef *USARTx)
1897:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1898:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1899:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1900:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1901:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1902:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1903:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1904:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1905:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1906:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Noise detected Flag
ARM GAS  /tmp/cc8CxLcc.s 			page 55


1907:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1908:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1909:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1910:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, FE, ORE, IDLE would also be cleared.
1911:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           NF            LL_USART_ClearFlag_NE
1912:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1913:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1914:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1915:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_NE(USART_TypeDef *USARTx)
1916:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1917:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1918:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1919:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1920:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1921:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1922:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1923:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1924:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1925:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear OverRun Error Flag
1926:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1927:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1928:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1929:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, NE, FE, IDLE would also be cleared.
1930:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           ORE           LL_USART_ClearFlag_ORE
1931:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1932:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1933:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1934:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_ORE(USART_TypeDef *USARTx)
1935:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1936:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1937:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1938:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1939:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1940:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1941:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1942:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1943:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1944:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear IDLE line detected Flag
1945:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Clearing this flag is done by a read access to the USARTx_SR
1946:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         register followed by a read access to the USARTx_DR register.
1947:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Please also consider that when clearing this flag, other flags as
1948:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         PE, NE, FE, ORE would also be cleared.
1949:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           IDLE          LL_USART_ClearFlag_IDLE
1950:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1951:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1952:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1953:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
1954:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1955:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   __IO uint32_t tmpreg;
1956:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->SR;
1957:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1958:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   tmpreg = USARTx->DR;
1959:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   (void) tmpreg;
1960:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1961:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1962:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1963:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear Transmission Complete Flag
ARM GAS  /tmp/cc8CxLcc.s 			page 56


1964:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           TC            LL_USART_ClearFlag_TC
1965:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1966:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1967:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1968:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
1969:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1970:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_TC));
1971:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1972:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1973:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1974:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear RX Not Empty Flag
1975:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           RXNE          LL_USART_ClearFlag_RXNE
1976:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1977:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1978:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1979:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_RXNE(USART_TypeDef *USARTx)
1980:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1981:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_RXNE));
1982:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1983:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1984:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1985:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear LIN Break Detection Flag
1986:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
1987:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
1988:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           LBD           LL_USART_ClearFlag_LBD
1989:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
1990:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
1991:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
1992:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_LBD(USART_TypeDef *USARTx)
1993:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
1994:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_LBD));
1995:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
1996:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
1997:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
1998:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Clear CTS Interrupt Flag
1999:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2000:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2001:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll SR           CTS           LL_USART_ClearFlag_nCTS
2002:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2003:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2004:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2005:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_ClearFlag_nCTS(USART_TypeDef *USARTx)
2006:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2007:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   WRITE_REG(USARTx->SR, ~(USART_SR_CTS));
2008:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2009:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2010:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2011:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
2012:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2013:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2014:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_IT_Management IT_Management
2015:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
2016:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2017:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2018:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2019:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable IDLE Interrupt
2020:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
ARM GAS  /tmp/cc8CxLcc.s 			page 57


2021:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2022:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2023:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2024:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
2025:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2026:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2027:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2028:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2029:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2030:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable RX Not Empty Interrupt
2031:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_EnableIT_RXNE
2032:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2033:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2034:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2035:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_RXNE(USART_TypeDef *USARTx)
2036:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2037:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2038:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2039:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2040:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2041:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Transmission Complete Interrupt
2042:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_EnableIT_TC
2043:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2044:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2045:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2046:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TC(USART_TypeDef *USARTx)
2047:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2048:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
2049:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2050:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2051:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2052:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable TX Empty Interrupt
2053:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_EnableIT_TXE
2054:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2055:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2056:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2057:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_TXE(USART_TypeDef *USARTx)
2058:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2059:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
2060:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2061:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2062:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2063:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Parity Error Interrupt
2064:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_EnableIT_PE
2065:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2066:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2067:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2068:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_PE(USART_TypeDef *USARTx)
2069:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2070:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_PEIE);
2071:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2072:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2073:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2074:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable LIN Break Detection Interrupt
2075:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2076:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2077:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_EnableIT_LBD
ARM GAS  /tmp/cc8CxLcc.s 			page 58


2078:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2079:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2080:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2081:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_LBD(USART_TypeDef *USARTx)
2082:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2083:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   SET_BIT(USARTx->CR2, USART_CR2_LBDIE);
2084:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2085:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2086:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2087:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable Error Interrupt
2088:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2089:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2090:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           0: Interrupt is inhibited
2091:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2092:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_EnableIT_ERROR
2093:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2094:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2095:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2096:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
2097:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2098:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
2099:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2100:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2101:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2102:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable CTS Interrupt
2103:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2104:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2105:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_EnableIT_CTS
2106:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2107:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2108:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2109:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableIT_CTS(USART_TypeDef *USARTx)
2110:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2111:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_CTSIE);
2112:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2113:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2114:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2115:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable IDLE Interrupt
2116:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_DisableIT_IDLE
2117:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2118:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2119:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2120:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_IDLE(USART_TypeDef *USARTx)
2121:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2122:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
2123:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2124:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2125:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2126:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable RX Not Empty Interrupt
2127:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_DisableIT_RXNE
2128:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2129:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2130:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2131:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_RXNE(USART_TypeDef *USARTx)
2132:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2133:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
2134:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 59


2135:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2136:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2137:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Transmission Complete Interrupt
2138:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_DisableIT_TC
2139:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2140:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2141:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2142:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TC(USART_TypeDef *USARTx)
2143:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2144:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TCIE);
2145:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2146:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2147:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2148:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable TX Empty Interrupt
2149:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_DisableIT_TXE
2150:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2151:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2152:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2153:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_TXE(USART_TypeDef *USARTx)
2154:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2155:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
2156:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2157:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2158:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2159:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Parity Error Interrupt
2160:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_DisableIT_PE
2161:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2162:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2163:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2164:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_PE(USART_TypeDef *USARTx)
2165:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2166:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_PEIE);
2167:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2168:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2169:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2170:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable LIN Break Detection Interrupt
2171:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2172:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2173:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_DisableIT_LBD
2174:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2175:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2176:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2177:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_LBD(USART_TypeDef *USARTx)
2178:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2179:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR2, USART_CR2_LBDIE);
2180:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2181:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2182:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2183:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable Error Interrupt
2184:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   When set, Error Interrupt Enable Bit is enabling interrupt generation in case of a fram
2185:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         error, overrun error or noise flag (FE=1 or ORE=1 or NF=1 in the USARTx_SR register).
2186:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           0: Interrupt is inhibited
2187:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *           1: An interrupt is generated when FE=1 or ORE=1 or NF=1 in the USARTx_SR register.
2188:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_DisableIT_ERROR
2189:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2190:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2191:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
ARM GAS  /tmp/cc8CxLcc.s 			page 60


2192:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_ERROR(USART_TypeDef *USARTx)
2193:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2194:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
2195:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2196:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2197:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2198:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable CTS Interrupt
2199:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2200:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2201:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
2202:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2203:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2204:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2205:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
 188              		.loc 3 2205 22 view .LVU63
 189              	.L2:
 190              	.LBE30:
2206:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2207:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 191              		.loc 3 2207 3 view .LVU64
 192              	.LBB36:
 193              	.LBB31:
 194              		.loc 3 2207 3 view .LVU65
 195              		.loc 3 2207 3 view .LVU66
 196              		.loc 3 2207 3 view .LVU67
 197 009e 0F4A     		ldr	r2, .L4+12
 198              	.LVL6:
 199              	.LBB32:
 200              	.LBI32:
 201              		.file 4 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 61


  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
ARM GAS  /tmp/cc8CxLcc.s 			page 62


  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
ARM GAS  /tmp/cc8CxLcc.s 			page 63


 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 143:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 144:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 145:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 146:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the Control Register.
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Control Register value
 150:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 151:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_CONTROL(void)
 152:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 154:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control" : "=r" (result) );
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 157:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 158:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 159:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 160:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 161:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Control Register (non-secure)
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the non-secure Control Register when in secure mode.
 164:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               non-secure Control Register value
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_CONTROL_NS(void)
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 168:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 170:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, control_ns" : "=r" (result) );
 171:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 177:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register
 178:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the Control Register.
 179:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 180:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_CONTROL(uint32_t control)
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 183:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 187:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 188:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Control Register (non-secure)
 190:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Writes the given value to the non-secure Control Register when in secure state.
 191:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    control  Control Register value to set
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 193:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_CONTROL_NS(uint32_t control)
 194:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR control_ns, %0" : : "r" (control) : "memory");
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 64


 199:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 201:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get IPSR Register
 202:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the IPSR Register.
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               IPSR Register value
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 205:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_IPSR(void)
 206:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 207:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 210:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 211:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 212:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 213:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 214:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 215:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get APSR Register
 216:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the APSR Register.
 217:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               APSR Register value
 218:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 219:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_APSR(void)
 220:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 221:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 222:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 223:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, apsr" : "=r" (result) );
 224:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 225:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 226:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 227:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 228:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 229:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get xPSR Register
 230:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the content of the xPSR Register.
 231:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               xPSR Register value
 232:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 233:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_xPSR(void)
 234:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 235:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 236:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 237:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, xpsr" : "=r" (result) );
 238:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 239:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 240:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 241:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 242:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 243:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer
 244:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer (PSP).
 245:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 246:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 247:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSP(void)
 248:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 249:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 250:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 251:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp"  : "=r" (result) );
 252:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 253:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 254:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 255:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 65


 256:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 257:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 258:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer (non-secure)
 259:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer (PSP) when in secure s
 260:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSP Register value
 261:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 262:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSP_NS(void)
 263:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 264:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 265:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 266:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psp_ns"  : "=r" (result) );
 267:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 268:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 269:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 270:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 271:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 272:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 273:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer
 274:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer (PSP).
 275:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 276:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 277:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
 278:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 279:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
 280:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 281:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 282:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 283:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 284:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 285:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 286:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer (PSP) when in secure sta
 287:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfProcStack  Process Stack Pointer value to set
 288:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 289:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSP_NS(uint32_t topOfProcStack)
 290:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 291:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psp_ns, %0" : : "r" (topOfProcStack) : );
 292:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 293:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 294:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 295:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 296:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 297:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer
 298:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer (MSP).
 299:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 300:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 301:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSP(void)
 302:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 303:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 304:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 305:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp" : "=r" (result) );
 306:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 307:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 308:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 309:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 310:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 311:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 312:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer (non-secure)
ARM GAS  /tmp/cc8CxLcc.s 			page 66


 313:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer (MSP) when in secure stat
 314:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSP Register value
 315:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 316:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSP_NS(void)
 317:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 318:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 319:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 320:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msp_ns" : "=r" (result) );
 321:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 322:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 323:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 324:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 325:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 326:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 327:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer
 328:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer (MSP).
 329:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 330:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 331:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
 332:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 333:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 334:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 335:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 336:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 337:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 338:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 339:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer (non-secure)
 340:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
 341:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfMainStack  Main Stack Pointer value to set
 342:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 343:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
 344:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 345:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 346:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 347:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 348:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 349:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 350:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 351:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 352:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Stack Pointer (non-secure)
 353:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Stack Pointer (SP) when in secure state.
 354:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               SP Register value
 355:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 356:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_SP_NS(void)
 357:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 358:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 359:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 360:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, sp_ns" : "=r" (result) );
 361:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 362:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 363:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 364:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 365:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 366:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Stack Pointer (non-secure)
 367:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Stack Pointer (SP) when in secure state.
 368:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    topOfStack  Stack Pointer value to set
 369:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
ARM GAS  /tmp/cc8CxLcc.s 			page 67


 370:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_SP_NS(uint32_t topOfStack)
 371:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 372:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR sp_ns, %0" : : "r" (topOfStack) : );
 373:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 374:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 375:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 376:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 377:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 378:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask
 379:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the priority mask bit from the Priority Mask Register.
 380:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 381:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 382:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
 383:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 384:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 385:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 386:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 387:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 388:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 389:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 390:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 391:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 392:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 393:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Priority Mask (non-secure)
 394:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current state of the non-secure priority mask bit from the Priority Mask Reg
 395:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Priority Mask value
 396:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 397:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PRIMASK_NS(void)
 398:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 399:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 400:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 401:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, primask_ns" : "=r" (result) :: "memory");
 402:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 403:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 404:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 405:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 406:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 407:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 408:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask
 409:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Priority Mask Register.
 410:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 411:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 412:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
 413:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 414:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 415:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 416:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 417:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 418:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 419:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 420:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Priority Mask (non-secure)
 421:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Priority Mask Register when in secure state.
 422:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    priMask  Priority Mask
 423:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 424:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PRIMASK_NS(uint32_t priMask)
 425:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 426:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR primask_ns, %0" : : "r" (priMask) : "memory");
ARM GAS  /tmp/cc8CxLcc.s 			page 68


 427:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 428:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 429:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 430:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 431:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 432:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 433:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 434:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 435:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable FIQ
 436:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables FIQ interrupts by clearing the F-bit in the CPSR.
 437:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 438:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 439:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_fault_irq(void)
 440:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 441:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie f" : : : "memory");
 442:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 443:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 444:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 445:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 446:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable FIQ
 447:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables FIQ interrupts by setting the F-bit in the CPSR.
 448:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 449:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 450:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_fault_irq(void)
 451:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 452:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid f" : : : "memory");
 453:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 454:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 455:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 456:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 457:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority
 458:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Base Priority register.
 459:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 460:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 461:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
 462:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 463:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 464:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 465:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 466:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 467:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 468:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 469:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 470:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 471:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 472:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Base Priority (non-secure)
 473:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Base Priority register when in secure state.
 474:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Base Priority register value
 475:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 476:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_BASEPRI_NS(void)
 477:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 478:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 479:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 480:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, basepri_ns" : "=r" (result) );
 481:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 482:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 483:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc8CxLcc.s 			page 69


 484:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 485:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 486:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 487:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority
 488:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register.
 489:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 490:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 491:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI(uint32_t basePri)
 492:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 493:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri, %0" : : "r" (basePri) : "memory");
 494:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 495:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 496:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 497:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 498:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 499:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority (non-secure)
 500:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Base Priority register when in secure state.
 501:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 502:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 503:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_BASEPRI_NS(uint32_t basePri)
 504:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 505:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_ns, %0" : : "r" (basePri) : "memory");
 506:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 507:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 508:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 509:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 510:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 511:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Base Priority with condition
 512:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Base Priority register only if BASEPRI masking is disable
 513:Drivers/CMSIS/Include/cmsis_gcc.h ****            or the new value increases the BASEPRI priority level.
 514:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    basePri  Base Priority value to set
 515:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 516:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_BASEPRI_MAX(uint32_t basePri)
 517:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 518:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR basepri_max, %0" : : "r" (basePri) : "memory");
 519:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 520:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 521:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 522:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 523:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask
 524:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Fault Mask register.
 525:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
 526:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 527:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FAULTMASK(void)
 528:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 529:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 530:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 531:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask" : "=r" (result) );
 532:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 533:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 534:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 535:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 536:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 537:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 538:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Fault Mask (non-secure)
 539:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Fault Mask register when in secure state.
 540:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Fault Mask register value
ARM GAS  /tmp/cc8CxLcc.s 			page 70


 541:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 542:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_FAULTMASK_NS(void)
 543:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 544:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 545:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 546:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, faultmask_ns" : "=r" (result) );
 547:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 548:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 549:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 550:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 551:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 552:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 553:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask
 554:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Fault Mask register.
 555:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 556:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 557:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
 558:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 559:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
 560:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 561:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 562:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 563:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE ) && (__ARM_FEATURE_CMSE == 3))
 564:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 565:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Fault Mask (non-secure)
 566:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Fault Mask register when in secure state.
 567:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    faultMask  Fault Mask value to set
 568:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 569:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_FAULTMASK_NS(uint32_t faultMask)
 570:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 571:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR faultmask_ns, %0" : : "r" (faultMask) : "memory");
 572:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 573:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 574:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 575:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 576:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 577:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    ) */
 578:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 579:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 580:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 581:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
 582:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 583:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 584:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit
 585:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 586:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 587:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 588:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 589:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Process Stack Pointer Limit (PSPLIM).
 590:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 591:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 592:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_PSPLIM(void)
 593:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 594:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 595:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 596:Drivers/CMSIS/Include/cmsis_gcc.h ****     // without main extensions, the non-secure PSPLIM is RAZ/WI
 597:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
ARM GAS  /tmp/cc8CxLcc.s 			page 71


 598:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 599:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 600:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim"  : "=r" (result) );
 601:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 602:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 603:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 604:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 605:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3))
 606:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 607:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Process Stack Pointer Limit (non-secure)
 608:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 609:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 610:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 611:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Process Stack Pointer Limit (PSPLIM) when in
 612:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               PSPLIM Register value
 613:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 614:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_PSPLIM_NS(void)
 615:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 616:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 617:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 618:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 619:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 620:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 621:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, psplim_ns"  : "=r" (result) );
 622:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 623:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 624:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 625:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 626:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 627:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 628:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 629:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer Limit
 630:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 631:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 632:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 633:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 634:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Process Stack Pointer Limit (PSPLIM).
 635:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 636:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 637:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_PSPLIM(uint32_t ProcStackPtrLimit)
 638:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 639:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 640:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 641:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 642:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 643:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 644:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim, %0" : : "r" (ProcStackPtrLimit));
 645:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 646:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 647:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 648:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 649:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 650:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 651:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Process Stack Pointer (non-secure)
 652:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 653:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 654:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 72


 655:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Process Stack Pointer Limit (PSPLIM) when in s
 656:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ProcStackPtrLimit  Process Stack Pointer Limit value to set
 657:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 658:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_PSPLIM_NS(uint32_t ProcStackPtrLimit)
 659:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 660:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 661:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure PSPLIM is RAZ/WI
 662:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)ProcStackPtrLimit;
 663:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 664:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR psplim_ns, %0\n" : : "r" (ProcStackPtrLimit));
 665:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 666:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 667:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 668:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 669:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 670:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 671:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit
 672:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 673:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always in non-secure
 674:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 675:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 676:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Main Stack Pointer Limit (MSPLIM).
 677:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 678:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 679:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_MSPLIM(void)
 680:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 681:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 682:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 683:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 684:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 685:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 686:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 687:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim" : "=r" (result) );
 688:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 689:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 690:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 691:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 692:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 693:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 694:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 695:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get Main Stack Pointer Limit (non-secure)
 696:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 697:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence zero is returned always.
 698:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 699:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the non-secure Main Stack Pointer Limit(MSPLIM) when in sec
 700:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               MSPLIM Register value
 701:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 702:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __TZ_get_MSPLIM_NS(void)
 703:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 704:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 705:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 706:Drivers/CMSIS/Include/cmsis_gcc.h ****   return 0U;
 707:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 708:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 709:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MRS %0, msplim_ns" : "=r" (result) );
 710:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 711:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
ARM GAS  /tmp/cc8CxLcc.s 			page 73


 712:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 713:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 714:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 715:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 716:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 717:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit
 718:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 719:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored in non-secure
 720:Drivers/CMSIS/Include/cmsis_gcc.h ****   mode.
 721:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 722:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Main Stack Pointer Limit (MSPLIM).
 723:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer Limit value to set
 724:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 725:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_MSPLIM(uint32_t MainStackPtrLimit)
 726:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 727:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) && \
 728:Drivers/CMSIS/Include/cmsis_gcc.h ****     (!defined (__ARM_FEATURE_CMSE) || (__ARM_FEATURE_CMSE < 3)))
 729:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 730:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 731:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 732:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim, %0" : : "r" (MainStackPtrLimit));
 733:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 734:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 735:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 736:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 737:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (defined (__ARM_FEATURE_CMSE  ) && (__ARM_FEATURE_CMSE   == 3))
 738:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 739:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set Main Stack Pointer Limit (non-secure)
 740:Drivers/CMSIS/Include/cmsis_gcc.h ****   Devices without ARMv8-M Main Extensions (i.e. Cortex-M23) lack the non-secure
 741:Drivers/CMSIS/Include/cmsis_gcc.h ****   Stack Pointer Limit register hence the write is silently ignored.
 742:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 743:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the non-secure Main Stack Pointer Limit (MSPLIM) when in secu
 744:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    MainStackPtrLimit  Main Stack Pointer value to set
 745:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 746:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __TZ_set_MSPLIM_NS(uint32_t MainStackPtrLimit)
 747:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 748:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (!(defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)))
 749:Drivers/CMSIS/Include/cmsis_gcc.h ****   // without main extensions, the non-secure MSPLIM is RAZ/WI
 750:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)MainStackPtrLimit;
 751:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 752:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("MSR msplim_ns, %0" : : "r" (MainStackPtrLimit));
 753:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 754:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 755:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 756:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 757:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif /* ((defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
 758:Drivers/CMSIS/Include/cmsis_gcc.h ****            (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    ) */
 759:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 760:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 761:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 762:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Get FPSCR
 763:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Returns the current value of the Floating Point Status/Control register.
 764:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Floating Point Status/Control register value
 765:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 766:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __get_FPSCR(void)
 767:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 768:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
ARM GAS  /tmp/cc8CxLcc.s 			page 74


 769:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 770:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_get_fpscr) 
 771:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 772:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 773:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 774:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_arm_get_fpscr();
 775:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 776:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 777:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 778:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMRS %0, fpscr" : "=r" (result) );
 779:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(result);
 780:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 781:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 782:Drivers/CMSIS/Include/cmsis_gcc.h ****   return(0U);
 783:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 784:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 785:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 786:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 787:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 788:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Set FPSCR
 789:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Assigns the given value to the Floating Point Status/Control register.
 790:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    fpscr  Floating Point Status/Control value to set
 791:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 792:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __set_FPSCR(uint32_t fpscr)
 793:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 794:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__FPU_PRESENT) && (__FPU_PRESENT == 1U)) && \
 795:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__FPU_USED   ) && (__FPU_USED    == 1U))     )
 796:Drivers/CMSIS/Include/cmsis_gcc.h **** #if __has_builtin(__builtin_arm_set_fpscr)
 797:Drivers/CMSIS/Include/cmsis_gcc.h **** // Re-enable using built-in when GCC has been fixed
 798:Drivers/CMSIS/Include/cmsis_gcc.h **** // || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
 799:Drivers/CMSIS/Include/cmsis_gcc.h ****   /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
 800:Drivers/CMSIS/Include/cmsis_gcc.h ****   __builtin_arm_set_fpscr(fpscr);
 801:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 802:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 803:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 804:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 805:Drivers/CMSIS/Include/cmsis_gcc.h ****   (void)fpscr;
 806:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 807:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 808:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 809:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 810:Drivers/CMSIS/Include/cmsis_gcc.h **** /*@} end of CMSIS_Core_RegAccFunctions */
 811:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 812:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 813:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ##########################  Core Instruction Access  ######################### */
 814:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
 815:Drivers/CMSIS/Include/cmsis_gcc.h ****   Access to dedicated instructions
 816:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 817:Drivers/CMSIS/Include/cmsis_gcc.h **** */
 818:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 819:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Define macros for porting to both thumb1 and thumb2.
 820:Drivers/CMSIS/Include/cmsis_gcc.h ****  * For thumb1, use low register (r0-r7), specified by constraint "l"
 821:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Otherwise, use general registers, specified by constraint "r" */
 822:Drivers/CMSIS/Include/cmsis_gcc.h **** #if defined (__thumb__) && !defined (__thumb2__)
 823:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 824:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+l" (r)
 825:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
ARM GAS  /tmp/cc8CxLcc.s 			page 75


 826:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 827:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 828:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_RW_REG(r) "+r" (r)
 829:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 830:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 831:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 832:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 833:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   No Operation
 834:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details No Operation does nothing. This instruction can be used for code alignment purposes.
 835:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 836:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __NOP()                             __ASM volatile ("nop")
 837:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 838:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 839:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Interrupt
 840:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Interrupt is a hint instruction that suspends execution until one of a number o
 841:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 842:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFI()                             __ASM volatile ("wfi")
 843:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 844:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 845:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 846:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Wait For Event
 847:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Wait For Event is a hint instruction that permits the processor to enter
 848:Drivers/CMSIS/Include/cmsis_gcc.h ****            a low-power state until one of a number of events occurs.
 849:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 850:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __WFE()                             __ASM volatile ("wfe")
 851:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 852:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 853:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 854:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Send Event
 855:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 856:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 857:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __SEV()                             __ASM volatile ("sev")
 858:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 859:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 860:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 861:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Instruction Synchronization Barrier
 862:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Instruction Synchronization Barrier flushes the pipeline in the processor,
 863:Drivers/CMSIS/Include/cmsis_gcc.h ****            so that all instructions following the ISB are fetched from cache or memory,
 864:Drivers/CMSIS/Include/cmsis_gcc.h ****            after the instruction has been completed.
 865:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 866:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __ISB(void)
 867:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 868:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("isb 0xF":::"memory");
 869:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 870:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 871:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 872:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 873:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Synchronization Barrier
 874:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Acts as a special kind of Data Memory Barrier.
 875:Drivers/CMSIS/Include/cmsis_gcc.h ****            It completes when all explicit memory accesses before this instruction complete.
 876:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 877:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DSB(void)
 878:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 879:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dsb 0xF":::"memory");
 880:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 881:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 882:Drivers/CMSIS/Include/cmsis_gcc.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 76


 883:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 884:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Data Memory Barrier
 885:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Ensures the apparent order of the explicit memory operations before
 886:Drivers/CMSIS/Include/cmsis_gcc.h ****            and after the instruction, without ensuring their completion.
 887:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 888:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __DMB(void)
 889:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 890:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("dmb 0xF":::"memory");
 891:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 892:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 893:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 894:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 895:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (32 bit)
 896:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in unsigned integer value. For example, 0x12345678 becomes 0x785
 897:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 898:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 899:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 900:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
 901:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 902:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
 903:Drivers/CMSIS/Include/cmsis_gcc.h ****   return __builtin_bswap32(value);
 904:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 905:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 906:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 907:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 908:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 909:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 910:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 911:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 912:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 913:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 914:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 915:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order within each halfword of a word. For example, 0x12345678 becomes 
 916:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 917:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 918:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 919:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __REV16(uint32_t value)
 920:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 921:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 922:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 923:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("rev16 %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 924:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 925:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 926:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 927:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 928:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 929:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse byte order (16 bit)
 930:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the byte order in a 16-bit value and returns the signed 16-bit result. For exam
 931:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 932:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 933:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 934:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE int16_t __REVSH(int16_t value)
 935:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 936:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
 937:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (int16_t)__builtin_bswap16(value);
 938:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 939:Drivers/CMSIS/Include/cmsis_gcc.h ****   int16_t result;
ARM GAS  /tmp/cc8CxLcc.s 			page 77


 940:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 941:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("revsh %0, %1" : __CMSIS_GCC_OUT_REG (result) : __CMSIS_GCC_USE_REG (value) );
 942:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
 943:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 944:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 945:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 946:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 947:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 948:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Rotate Right in unsigned value (32 bit)
 949:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Rotate Right (immediate) provides the value of the contents of a register rotated by a v
 950:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op1  Value to rotate
 951:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    op2  Number of Bits to rotate
 952:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Rotated value
 953:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 954:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __ROR(uint32_t op1, uint32_t op2)
 955:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 956:Drivers/CMSIS/Include/cmsis_gcc.h ****   op2 %= 32U;
 957:Drivers/CMSIS/Include/cmsis_gcc.h ****   if (op2 == 0U)
 958:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 959:Drivers/CMSIS/Include/cmsis_gcc.h ****     return op1;
 960:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 961:Drivers/CMSIS/Include/cmsis_gcc.h ****   return (op1 >> op2) | (op1 << (32U - op2));
 962:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 963:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 964:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 965:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 966:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Breakpoint
 967:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Causes the processor to enter Debug state.
 968:Drivers/CMSIS/Include/cmsis_gcc.h ****            Debug tools can use this to investigate system state when the instruction at a particula
 969:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  is ignored by the processor.
 970:Drivers/CMSIS/Include/cmsis_gcc.h ****                  If required, a debugger can use it to store additional information about the break
 971:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 972:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __BKPT(value)                       __ASM volatile ("bkpt "#value)
 973:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 974:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 975:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 976:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Reverse bit order of value
 977:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Reverses the bit order of the given value.
 978:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    value  Value to reverse
 979:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return               Reversed value
 980:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 981:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __RBIT(uint32_t value)
 982:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 983:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t result;
 984:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 985:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
 986:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
 987:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
 988:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 989:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
 990:Drivers/CMSIS/Include/cmsis_gcc.h ****   uint32_t s = (4U /*sizeof(v)*/ * 8U) - 1U; /* extra shift needed at end */
 991:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 992:Drivers/CMSIS/Include/cmsis_gcc.h ****   result = value;                      /* r will be reversed bits of v; first get LSB of v */
 993:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (value >>= 1U; value != 0U; value >>= 1U)
 994:Drivers/CMSIS/Include/cmsis_gcc.h ****   {
 995:Drivers/CMSIS/Include/cmsis_gcc.h ****     result <<= 1U;
 996:Drivers/CMSIS/Include/cmsis_gcc.h ****     result |= value & 1U;
ARM GAS  /tmp/cc8CxLcc.s 			page 78


 997:Drivers/CMSIS/Include/cmsis_gcc.h ****     s--;
 998:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 999:Drivers/CMSIS/Include/cmsis_gcc.h ****   result <<= s;                        /* shift when v's highest bits are zero */
1000:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1001:Drivers/CMSIS/Include/cmsis_gcc.h ****   return result;
1002:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1003:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1004:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1005:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1006:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Count leading zeros
1007:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Counts the number of leading zeros of a data value.
1008:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to count the leading zeros
1009:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             number of leading zeros in value
1010:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1011:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CLZ             (uint8_t)__builtin_clz
1012:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1013:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1014:Drivers/CMSIS/Include/cmsis_gcc.h **** #if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
1015:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
1016:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1)) || \
1017:Drivers/CMSIS/Include/cmsis_gcc.h ****      (defined (__ARM_ARCH_8M_BASE__ ) && (__ARM_ARCH_8M_BASE__ == 1))    )
1018:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1019:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (8 bit)
1020:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 8 bit value.
1021:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1022:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return             value of type uint8_t at (*ptr)
1023:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1024:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint8_t __LDREXB(volatile uint8_t *addr)
1025:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1026:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1027:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1028:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1029:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, %1" : "=r" (result) : "Q" (*addr) );
1030:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1031:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
1032:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1033:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1034:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexb %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1035:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1036:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint8_t) result);    /* Add explicit type cast here */
1037:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1038:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1039:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1040:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1041:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (16 bit)
1042:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 16 bit values.
1043:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1044:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint16_t at (*ptr)
1045:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1046:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint16_t __LDREXH(volatile uint16_t *addr)
1047:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1048:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
1049:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1050:Drivers/CMSIS/Include/cmsis_gcc.h **** #if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 8)
1051:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, %1" : "=r" (result) : "Q" (*addr) );
1052:Drivers/CMSIS/Include/cmsis_gcc.h **** #else
1053:Drivers/CMSIS/Include/cmsis_gcc.h ****     /* Prior to GCC 4.8, "Q" will be expanded to [rx, #0] which is not
ARM GAS  /tmp/cc8CxLcc.s 			page 79


1054:Drivers/CMSIS/Include/cmsis_gcc.h ****        accepted by assembler. So has to use following less efficient pattern.
1055:Drivers/CMSIS/Include/cmsis_gcc.h ****     */
1056:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrexh %0, [%1]" : "=r" (result) : "r" (addr) : "memory" );
1057:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
1058:Drivers/CMSIS/Include/cmsis_gcc.h ****    return ((uint16_t) result);    /* Add explicit type cast here */
1059:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1060:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1061:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1062:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1063:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   LDR Exclusive (32 bit)
1064:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive LDR instruction for 32 bit values.
1065:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to data
1066:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return        value of type uint32_t at (*ptr)
1067:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1068:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
 202              		.loc 4 1068 31 view .LVU68
 203              	.LBB33:
1069:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1070:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t result;
 204              		.loc 4 1070 5 view .LVU69
1071:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1072:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 205              		.loc 4 1072 4 view .LVU70
 206              		.syntax unified
 207              	@ 1072 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 208 00a0 52E8003F 		ldrex r3, [r2]
 209              	@ 0 "" 2
 210              	.LVL7:
1073:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 211              		.loc 4 1073 4 view .LVU71
 212              		.loc 4 1073 4 is_stmt 0 view .LVU72
 213              		.thumb
 214              		.syntax unified
 215              	.LBE33:
 216              	.LBE32:
 217              		.loc 3 2207 3 view .LVU73
 218 00a4 23F48063 		bic	r3, r3, #1024
 219              	.LVL8:
 220              		.loc 3 2207 3 is_stmt 1 view .LVU74
 221              	.LBB34:
 222              	.LBI34:
1074:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1075:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1076:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1077:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1078:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (8 bit)
1079:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 8 bit values.
1080:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1081:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1082:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1083:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1084:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1085:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXB(uint8_t value, volatile uint8_t *addr)
1086:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1087:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1088:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1089:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexb %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
ARM GAS  /tmp/cc8CxLcc.s 			page 80


1090:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1091:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1092:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1093:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1094:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1095:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (16 bit)
1096:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 16 bit values.
1097:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1098:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1099:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1100:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1101:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1102:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXH(uint16_t value, volatile uint16_t *addr)
1103:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1104:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
1105:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1106:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strexh %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" ((uint32_t)value) );
1107:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
1108:Drivers/CMSIS/Include/cmsis_gcc.h **** }
1109:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1110:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1111:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
1112:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   STR Exclusive (32 bit)
1113:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Executes a exclusive STR instruction for 32 bit values.
1114:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]  value  Value to store
1115:Drivers/CMSIS/Include/cmsis_gcc.h ****   \param [in]    ptr  Pointer to location
1116:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          0  Function succeeded
1117:Drivers/CMSIS/Include/cmsis_gcc.h ****   \return          1  Function failed
1118:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
1119:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
 223              		.loc 4 1119 31 view .LVU75
 224              	.LBB35:
1120:Drivers/CMSIS/Include/cmsis_gcc.h **** {
1121:Drivers/CMSIS/Include/cmsis_gcc.h ****    uint32_t result;
 225              		.loc 4 1121 4 view .LVU76
1122:Drivers/CMSIS/Include/cmsis_gcc.h **** 
1123:Drivers/CMSIS/Include/cmsis_gcc.h ****    __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 226              		.loc 4 1123 4 view .LVU77
 227              		.syntax unified
 228              	@ 1123 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 229 00a8 42E80031 		strex r1, r3, [r2]
 230              	@ 0 "" 2
 231              	.LVL9:
1124:Drivers/CMSIS/Include/cmsis_gcc.h ****    return(result);
 232              		.loc 4 1124 4 view .LVU78
 233              		.loc 4 1124 4 is_stmt 0 view .LVU79
 234              		.thumb
 235              		.syntax unified
 236              	.LBE35:
 237              	.LBE34:
 238              		.loc 3 2207 3 view .LVU80
 239 00ac 0029     		cmp	r1, #0
 240 00ae F6D1     		bne	.L2
 241              	.LBE31:
 242              	.LBE36:
 243              		.loc 3 2207 3 is_stmt 1 view .LVU81
 244              	.LVL10:
ARM GAS  /tmp/cc8CxLcc.s 			page 81


  80:Core/Src/usart.c ****   LL_USART_ConfigAsyncMode(USART1);
 245              		.loc 1 80 3 view .LVU82
 246              	.LBB37:
 247              	.LBI37:
1479:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 248              		.loc 3 1479 22 view .LVU83
 249              	.LBB38:
1484:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 250              		.loc 3 1484 3 view .LVU84
 251 00b0 094B     		ldr	r3, .L4+8
 252 00b2 1A69     		ldr	r2, [r3, #16]
 253 00b4 22F49042 		bic	r2, r2, #18432
 254 00b8 1A61     		str	r2, [r3, #16]
1485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 255              		.loc 3 1485 3 view .LVU85
 256 00ba 5A69     		ldr	r2, [r3, #20]
 257 00bc 22F02A02 		bic	r2, r2, #42
 258 00c0 5A61     		str	r2, [r3, #20]
 259              	.LVL11:
1485:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 260              		.loc 3 1485 3 is_stmt 0 view .LVU86
 261              	.LBE38:
 262              	.LBE37:
  81:Core/Src/usart.c ****   LL_USART_Enable(USART1);
 263              		.loc 1 81 3 is_stmt 1 view .LVU87
 264              	.LBB39:
 265              	.LBI39:
 410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 266              		.loc 3 410 22 view .LVU88
 267              	.LBB40:
 412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 268              		.loc 3 412 3 view .LVU89
 269 00c2 DA68     		ldr	r2, [r3, #12]
 270 00c4 42F40052 		orr	r2, r2, #8192
 271 00c8 DA60     		str	r2, [r3, #12]
 272              	.LVL12:
 412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 273              		.loc 3 412 3 is_stmt 0 view .LVU90
 274              	.LBE40:
 275              	.LBE39:
  82:Core/Src/usart.c ****   /* USER CODE BEGIN USART1_Init 2 */
  83:Core/Src/usart.c **** 
  84:Core/Src/usart.c ****   /* USER CODE END USART1_Init 2 */
  85:Core/Src/usart.c **** 
  86:Core/Src/usart.c **** }
 276              		.loc 1 86 1 view .LVU91
 277 00ca 10B0     		add	sp, sp, #64
 278              	.LCFI2:
 279              		.cfi_def_cfa_offset 24
 280              		@ sp needed
 281 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 282              	.L5:
 283              		.align	2
 284              	.L4:
 285 00d0 00380240 		.word	1073887232
 286 00d4 00000240 		.word	1073872896
 287 00d8 00380140 		.word	1073821696
ARM GAS  /tmp/cc8CxLcc.s 			page 82


 288 00dc 14380140 		.word	1073821716
 289              		.cfi_endproc
 290              	.LFE711:
 292              		.section	.text.DBG_PutString,"ax",%progbits
 293              		.align	1
 294              		.global	DBG_PutString
 295              		.syntax unified
 296              		.thumb
 297              		.thumb_func
 299              	DBG_PutString:
 300              	.LVL13:
 301              	.LFB712:
  87:Core/Src/usart.c **** 
  88:Core/Src/usart.c **** /* USER CODE BEGIN 1 */
  89:Core/Src/usart.c **** //------------------------------передача строки по UART1---------------------------
  90:Core/Src/usart.c **** void DBG_PutString(const char *str)
  91:Core/Src/usart.c **** {
 302              		.loc 1 91 1 is_stmt 1 view -0
 303              		.cfi_startproc
 304              		@ args = 0, pretend = 0, frame = 0
 305              		@ frame_needed = 0, uses_anonymous_args = 0
 306              		@ link register save eliminated.
  92:Core/Src/usart.c **** 	char c;
 307              		.loc 1 92 2 view .LVU93
  93:Core/Src/usart.c **** 	while((c = *str++))
 308              		.loc 1 93 2 view .LVU94
 309              		.loc 1 93 7 is_stmt 0 view .LVU95
 310 0000 06E0     		b	.L7
 311              	.LVL14:
 312              	.L8:
  94:Core/Src/usart.c **** 	{
  95:Core/Src/usart.c **** 		while (LL_USART_IsActiveFlag_TC(DBG_UART) != SET) {}
 313              		.loc 1 95 54 is_stmt 1 discriminator 1 view .LVU96
 314              		.loc 1 95 9 discriminator 1 view .LVU97
 315              	.LBB41:
 316              	.LBI41:
1803:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
 317              		.loc 3 1803 26 discriminator 1 view .LVU98
 318              	.LBB42:
1805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 319              		.loc 3 1805 3 discriminator 1 view .LVU99
1805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 320              		.loc 3 1805 11 is_stmt 0 discriminator 1 view .LVU100
 321 0002 064B     		ldr	r3, .L9
 322 0004 1B68     		ldr	r3, [r3]
 323              	.LVL15:
1805:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
 324              		.loc 3 1805 11 discriminator 1 view .LVU101
 325              	.LBE42:
 326              	.LBE41:
 327              		.loc 1 95 9 discriminator 1 view .LVU102
 328 0006 13F0400F 		tst	r3, #64
 329 000a FAD0     		beq	.L8
  96:Core/Src/usart.c **** 		LL_USART_TransmitData8(DBG_UART, c);
 330              		.loc 1 96 3 is_stmt 1 view .LVU103
 331              	.LVL16:
 332              	.LBB43:
ARM GAS  /tmp/cc8CxLcc.s 			page 83


 333              	.LBI43:
2208:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2209:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2210:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2211:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART IDLE Interrupt  source is enabled or disabled.
2212:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          IDLEIE        LL_USART_IsEnabledIT_IDLE
2213:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2214:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2215:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2216:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_IDLE(const USART_TypeDef *USARTx)
2217:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2218:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
2219:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2220:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2221:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2222:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART RX Not Empty Interrupt is enabled or disabled.
2223:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          RXNEIE        LL_USART_IsEnabledIT_RXNE
2224:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2225:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2226:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2227:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_RXNE(const USART_TypeDef *USARTx)
2228:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2229:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE));
2230:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2231:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2232:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2233:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Transmission Complete Interrupt is enabled or disabled.
2234:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TCIE          LL_USART_IsEnabledIT_TC
2235:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2236:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2237:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2238:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TC(const USART_TypeDef *USARTx)
2239:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2240:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE));
2241:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2242:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2243:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2244:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART TX Empty Interrupt is enabled or disabled.
2245:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          TXEIE         LL_USART_IsEnabledIT_TXE
2246:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2247:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2248:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2249:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE(const USART_TypeDef *USARTx)
2250:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2251:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE));
2252:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2253:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2254:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2255:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Parity Error Interrupt is enabled or disabled.
2256:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR1          PEIE          LL_USART_IsEnabledIT_PE
2257:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2258:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2259:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2260:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_PE(const USART_TypeDef *USARTx)
2261:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2262:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE));
2263:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
ARM GAS  /tmp/cc8CxLcc.s 			page 84


2264:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2265:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2266:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART LIN Break Detection Interrupt is enabled or disabled.
2267:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_LIN_INSTANCE(USARTx) can be used to check whether or not
2268:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         LIN feature is supported by the USARTx instance.
2269:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR2          LBDIE         LL_USART_IsEnabledIT_LBD
2270:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2271:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2272:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2273:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_LBD(const USART_TypeDef *USARTx)
2274:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2275:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR2, USART_CR2_LBDIE) == (USART_CR2_LBDIE));
2276:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2277:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2278:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2279:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART Error Interrupt is enabled or disabled.
2280:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          EIE           LL_USART_IsEnabledIT_ERROR
2281:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2282:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2283:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2284:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
2285:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2286:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
2287:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2288:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2289:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2290:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if the USART CTS Interrupt is enabled or disabled.
2291:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Macro IS_UART_HWFLOW_INSTANCE(USARTx) can be used to check whether or not
2292:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   *         Hardware Flow control feature is supported by the USARTx instance.
2293:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          CTSIE         LL_USART_IsEnabledIT_CTS
2294:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2295:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2296:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2297:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledIT_CTS(const USART_TypeDef *USARTx)
2298:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2299:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_CTSIE) == (USART_CR3_CTSIE));
2300:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2301:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2302:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2303:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
2304:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2305:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2306:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_DMA_Management DMA_Management
2307:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
2308:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2309:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2310:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2311:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable DMA Mode for reception
2312:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
2313:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2314:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2315:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2316:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
2317:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2318:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
2319:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2320:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
ARM GAS  /tmp/cc8CxLcc.s 			page 85


2321:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2322:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable DMA Mode for reception
2323:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_DisableDMAReq_RX
2324:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2325:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2326:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2327:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
2328:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2329:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
2330:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2331:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2332:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2333:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for reception
2334:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAR          LL_USART_IsEnabledDMAReq_RX
2335:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2336:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2337:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2338:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_RX(const USART_TypeDef *USARTx)
2339:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2340:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAR) == (USART_CR3_DMAR));
2341:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2342:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2343:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2344:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Enable DMA Mode for transmission
2345:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
2346:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2347:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2348:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2349:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
2350:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2351:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
2352:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2353:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2354:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2355:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Disable DMA Mode for transmission
2356:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_DisableDMAReq_TX
2357:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2358:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2359:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2360:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_DisableDMAReq_TX(USART_TypeDef *USARTx)
2361:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2362:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAT);
2363:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2364:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2365:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2366:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Check if DMA Mode is enabled for transmission
2367:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll CR3          DMAT          LL_USART_IsEnabledDMAReq_TX
2368:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2369:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval State of bit (1 or 0).
2370:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2371:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_IsEnabledDMAReq_TX(const USART_TypeDef *USARTx)
2372:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2373:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (READ_BIT(USARTx->CR3, USART_CR3_DMAT) == (USART_CR3_DMAT));
2374:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2375:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2376:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2377:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Get the data register address used for DMA transfer
ARM GAS  /tmp/cc8CxLcc.s 			page 86


2378:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_DMA_GetRegAddr
2379:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @note   Address of Data Register is valid for both Transmit and Receive transfers.
2380:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2381:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Address of data register
2382:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2383:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx)
2384:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2385:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   /* return address of DR register */
2386:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return ((uint32_t) &(USARTx->DR));
2387:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2388:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2389:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2390:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @}
2391:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2392:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2393:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /** @defgroup USART_LL_EF_Data_Management Data_Management
2394:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @{
2395:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2396:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2397:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2398:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 8 bits)
2399:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData8
2400:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2401:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0xFF
2402:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2403:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
2404:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2405:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2406:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2407:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2408:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2409:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Read Receiver Data register (Receive Data value, 9 bits)
2410:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_ReceiveData9
2411:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2412:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval Value between Min_Data=0x00 and Max_Data=0x1FF
2413:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2414:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE uint16_t LL_USART_ReceiveData9(const USART_TypeDef *USARTx)
2415:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2416:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   return (uint16_t)(READ_BIT(USARTx->DR, USART_DR_DR));
2417:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** }
2418:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** 
2419:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** /**
2420:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @brief  Write in Transmitter Data Register (Transmit Data value, 8 bits)
2421:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @rmtoll DR           DR            LL_USART_TransmitData8
2422:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  USARTx USART Instance
2423:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @param  Value between Min_Data=0x00 and Max_Data=0xFF
2424:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   * @retval None
2425:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   */
2426:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** __STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
 334              		.loc 3 2426 22 view .LVU104
 335              	.LBB44:
2427:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h **** {
2428:Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_usart.h ****   USARTx->DR = Value;
 336              		.loc 3 2428 3 view .LVU105
 337              		.loc 3 2428 14 is_stmt 0 view .LVU106
 338 000c 034B     		ldr	r3, .L9
 339 000e 5A60     		str	r2, [r3, #4]
ARM GAS  /tmp/cc8CxLcc.s 			page 87


 340              	.LVL17:
 341              	.L7:
 342              		.loc 3 2428 14 view .LVU107
 343              	.LBE44:
 344              	.LBE43:
  93:Core/Src/usart.c **** 	{
 345              		.loc 1 93 7 is_stmt 1 view .LVU108
  93:Core/Src/usart.c **** 	{
 346              		.loc 1 93 11 is_stmt 0 view .LVU109
 347 0010 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 348              	.LVL18:
  93:Core/Src/usart.c **** 	{
 349              		.loc 1 93 7 view .LVU110
 350 0014 002A     		cmp	r2, #0
 351 0016 F4D1     		bne	.L8
  97:Core/Src/usart.c **** 	}
  98:Core/Src/usart.c **** }
 352              		.loc 1 98 1 view .LVU111
 353 0018 7047     		bx	lr
 354              	.L10:
 355 001a 00BF     		.align	2
 356              	.L9:
 357 001c 00380140 		.word	1073821696
 358              		.cfi_endproc
 359              	.LFE712:
 361              		.global	DBG_buffer
 362              		.section	.bss.DBG_buffer,"aw",%nobits
 363              		.align	2
 366              	DBG_buffer:
 367 0000 00000000 		.space	40
 367      00000000 
 367      00000000 
 367      00000000 
 367      00000000 
 368              		.text
 369              	.Letext0:
 370              		.file 5 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/m
 371              		.file 6 "/home/arashamf/soft/ARM_toolchains/gcc-arm-none-eabi-10.3-2021.10/arm-none-eabi/include/s
 372              		.file 7 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l151xb.h"
 373              		.file 8 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_dma.h"
 374              		.file 9 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_tim.h"
 375              		.file 10 "Drivers/STM32L1xx_HAL_Driver/Inc/stm32l1xx_ll_gpio.h"
 376              		.file 11 "Drivers/CMSIS/Device/ST/STM32L1xx/Include/stm32l1xx.h"
 377              		.file 12 "Core/Inc/usart.h"
ARM GAS  /tmp/cc8CxLcc.s 			page 88


DEFINED SYMBOLS
                            *ABS*:0000000000000000 usart.c
     /tmp/cc8CxLcc.s:18     .text.MX_USART1_UART_Init:0000000000000000 $t
     /tmp/cc8CxLcc.s:24     .text.MX_USART1_UART_Init:0000000000000000 MX_USART1_UART_Init
     /tmp/cc8CxLcc.s:285    .text.MX_USART1_UART_Init:00000000000000d0 $d
     /tmp/cc8CxLcc.s:293    .text.DBG_PutString:0000000000000000 $t
     /tmp/cc8CxLcc.s:299    .text.DBG_PutString:0000000000000000 DBG_PutString
     /tmp/cc8CxLcc.s:357    .text.DBG_PutString:000000000000001c $d
     /tmp/cc8CxLcc.s:366    .bss.DBG_buffer:0000000000000000 DBG_buffer
     /tmp/cc8CxLcc.s:363    .bss.DBG_buffer:0000000000000000 $d

UNDEFINED SYMBOLS
LL_GPIO_Init
LL_USART_Init
